globalThis.$api = function(s,a){
 return [s[1]=a({name:"global",flags:1536,mods:0,cat:0,meta:{},id:1}),
s[2]=a({parent:s[1],name:"Event",flags:65,mods:262144,cat:0,meta:{desc:"<p>An event which takes place in the DOM.</p>\n",dom:true},id:2}),
s[3]=a({parent:s[2],name:"bubbles",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true or false depending on how event was initialized. True if event goes through its target&#39;s ancestors in reverse tree order, and false otherwise.</p>\n",dom:true},id:3}),
s[4]=a({parent:s[2],name:"cancelBubble",flags:4,mods:0,cat:0,meta:{dom:true},id:4}),
s[5]=a({parent:s[2],name:"cancelable",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.</p>\n",dom:true},id:5}),
s[6]=a({parent:s[2],name:"composed",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.</p>\n",dom:true},id:6}),
s[8]=a({parent:s[1],name:"EventTarget",flags:65,mods:0,cat:0,meta:{desc:"<p>EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.</p>\n",dom:true},id:8}),
s[7]=a({parent:s[2],name:"currentTarget",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the object whose event listener&#39;s callback is currently being invoked.</p>\n",dom:true},id:7,valuetype:s[8]}),
s[9]=a({parent:s[8],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:9}),
s[10]=a({parent:s[8],name:"dispatchEvent",flags:8192,mods:0,cat:0,meta:{desc:"<p>Dispatches a synthetic event event to target and returns true if either event&#39;s cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.</p>\n",dom:true},id:10}),
s[11]=a({parent:s[8],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:11}),
s[12]=a({parent:s[2],name:"defaultPrevented",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.</p>\n",dom:true},id:12}),
s[13]=a({parent:s[2],name:"eventPhase",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the event&#39;s phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.</p>\n",dom:true},id:13}),
s[14]=a({parent:s[2],name:"isTrusted",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if event was dispatched by the user agent, and false otherwise.</p>\n",dom:true},id:14}),
s[15]=a({parent:s[2],name:"target",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the object to which event is dispatched (its target).</p>\n",dom:true},id:15,valuetype:s[8]}),
s[16]=a({parent:s[2],name:"timeStamp",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the event&#39;s timestamp as the number of milliseconds measured relative to the time origin.</p>\n",dom:true},id:16}),
s[17]=a({parent:s[2],name:"type",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the type of event, e.g. &quot;click&quot;, &quot;hashchange&quot;, or &quot;submit&quot;.</p>\n",dom:true},id:17}),
s[18]=a({parent:s[2],name:"composedPath",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the invocation target objects of event&#39;s path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root&#39;s mode is &quot;closed&quot; that are not reachable from event&#39;s currentTarget.</p>\n",dom:true},id:18}),
s[19]=a({parent:s[2],name:"preventDefault",flags:8192,mods:0,cat:0,meta:{desc:"<p>If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.</p>\n",dom:true},id:19}),
s[20]=a({parent:s[2],name:"stopImmediatePropagation",flags:8192,mods:0,cat:0,meta:{desc:"<p>Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.</p>\n",dom:true},id:20}),
s[21]=a({parent:s[2],name:"stopPropagation",flags:8192,mods:0,cat:0,meta:{desc:"<p>When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.</p>\n",dom:true},id:21}),
s[22]=a({parent:s[2],name:"AT_TARGET",flags:4,mods:131136,cat:0,meta:{dom:true},id:22}),
s[23]=a({parent:s[2],name:"BUBBLING_PHASE",flags:4,mods:131136,cat:0,meta:{dom:true},id:23}),
s[24]=a({parent:s[2],name:"CAPTURING_PHASE",flags:4,mods:131136,cat:0,meta:{dom:true},id:24}),
s[25]=a({parent:s[2],name:"NONE",flags:4,mods:131136,cat:0,meta:{dom:true},id:25}),
s[26]=a({parent:s[2],name:"@prevent",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{see:"https",desc:"<p>Tells the browser that the default action should not be taken. The event will still continue to propagate up the tree. See Event.preventDefault()</p>\n"},id:26}),
s[27]=a({parent:s[2],name:"@stop",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Stops the event from propagating up the tree. Event listeners for the same event on nodes further up the tree will not be triggered. See Event.stopPropagation()</p>\n"},id:27}),
s[28]=a({parent:s[2],name:"@trap",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Prevents default action &amp; stops event from bubbling.</p>\n"},id:28}),
s[29]=a({parent:s[2],name:"@once",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Indicates that the listeners should be invoked at most once. The listener will automatically be removed when invoked.</p>\n"},id:29}),
s[30]=a({parent:s[2],name:"@capture",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Indicating that events of this type should be dispatched to the registered listener before being dispatched to tags deeper in the DOM tree.</p>\n"},id:30}),
s[31]=a({parent:s[2],name:"@passive",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"indicates that the listener will never call preventDefault()",desc:"<p>Indicates that the listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. This is useful for optimal performance while scrolling etc.</p>\n"},id:31}),
s[32]=a({parent:s[2],name:"@silent",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Don't trigger imba.commit from this event handler",desc:"<p>By default, Imba will re-render all scheduled tags after any <em>handled</em> event. So, Imba won&#39;t re-render your application if you click an element that has no attached handlers, but if you&#39;ve added a <api-link>@click</api-link> listener somewhere in the chain of elements, <code>imba.commit</code> will automatically be called after the event has been handled. </p>\n<p>This is usually what you want, but it is useful to be able to override this, especially when dealing with <api-link>@scroll</api-link> and other events that might fire rapidly.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"2.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @click.silent=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>",Syntax:true},id:32}),
s[33]=a({parent:s[2],name:"@wait",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"pause handler for `n` duration (default 250ms)",detail:"(time = 500ms)",desc:"<p>The wait modifier delays the execution of subsequent modifiers and callback. It defaults to wait for 250ms, which can be overridden by passing a number or time as the first/only argument.</p>\n"},id:33}),
s[34]=a({parent:s[2],name:"@throttle",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(time = 500ms)",summary:"ensures that handler triggers at most every `n` seconds",desc:"<p>The <code>throttle</code> modifier ensures the handler is called at most every <code>n</code> milliseconds (defaults to 500ms). This can be useful for events that fire very rapidly like <api-link>@scroll</api-link>, <api-link>@pointermove</api-link> etc.</p>\n<p>See <api-link>@event.cooldown</api-link> and <api-link>@event.debounce</api-link>.</p>\n"},id:34}),
s[35]=a({parent:s[2],name:"@cooldown",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(time = 500ms)",summary:"disable handler for a duration after trigger",desc:"<p>The <code>cooldown</code> modifier ensures the handler is called at most every <code>n</code> milliseconds (defaults to 500ms). This can be useful for events that fire very rapidly like <api-link>@scroll</api-link>, <api-link>@pointermove</api-link> etc.</p>\n<p>See <api-link>@event.throttle</api-link> and <api-link>@event.debounce</api-link>.</p>\n"},id:35}),
s[36]=a({parent:s[2],name:"@debounce",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(time = 500ms)",summary:"dont trigger until no events has been handled for `n` time",desc:"<p>The <code>debounce</code> modifier ensures that a minimum amount of time has elapsed after the user stops interacting and before calling the handler. This is especially useful, for example, when querying an API and not wanting to perform a request on every keystroke.</p>\n<p>See <api-link>@event.cooldown</api-link> and <api-link>@event.throttle</api-link>.</p>\n"},id:36}),
s[37]=a({parent:s[2],name:"@trusted",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{see:"https",desc:"<p>Stops handling unless event is trusted</p>\n"},id:37}),
s[38]=a({parent:s[2],name:"@self",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if event.target is the element itself",desc:"<p>The <code>self</code> event modifier is a handy way of reacting to events only when they are clicked on the actual element you are interacting with and not, for example, a child element. This can be useful for things like modal wrappers when you only want to react when clicking directly.</p>\n"},id:38}),
s[39]=a({parent:s[2],name:"@sel",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(selector)",desc:"<p>Only trigger handler if event.target matches selector</p>\n"},id:39}),
s[40]=a({parent:s[2],name:"@closest",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(selector)",desc:"<p>Only trigger handler if event.target.closest(selector) returns a match</p>\n"},id:40}),
s[41]=a({parent:s[2],name:"@if",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(condition)",desc:"<p>Only trigger condition is truthy</p>\n"},id:41}),
s[42]=a({parent:s[2],name:"@emit",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"detail",kind:"parameterName"},detail:"(name,detail = {})",desc:"<p>Trigger a custom event via this handler</p>\n"},id:42}),
s[43]=a({parent:s[2],name:"@flag",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"target",kind:"parameterName"},detail:"(name,target?)",desc:"<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"},id:43}),
s[44]=a({parent:s[2],name:"@log",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(...data)",desc:"<p>Logs to console</p>\n"},id:44}),
s[45]=a({parent:s[2],name:"@outside",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if event originates from outside the handler",desc:"<p>Handle if event originates from outside the literal container of the <code>&lt;global&gt;</code> teleport.\nThis modifier is only supported on <code>&lt;global&gt;</code> listeners.</p>\n"},id:45}),
s[46]=a({parent:s[1],name:"UIEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Simple user interface events.</p>\n",dom:true},id:46}),
s[47]=a({parent:s[46],name:"detail",flags:4,mods:64,cat:0,meta:{dom:true},id:47}),
s[49]=a({parent:s[1],name:"GlobalEventHandlers",flags:64,mods:0,cat:0,meta:{},id:49}),
s[50]=a({parent:s[1],name:"WindowEventHandlers",flags:64,mods:0,cat:0,meta:{},id:50}),
s[71]=a({parent:s[1],name:"Window",inherits:s[8],implements:[s[49],s[50]],flags:65,mods:0,cat:0,meta:{desc:"<p>A window containing a DOM document; the document property points to the DOM document loaded in that window.</p>\n",dom:true},id:71}),
s[48]=a({parent:s[46],name:"view",flags:4,mods:64,cat:0,meta:{dom:true},id:48,valuetype:s[71]}),
s[51]=a({parent:s[50],name:"onafterprint",flags:4,mods:0,cat:0,meta:{dom:true},id:51}),
s[52]=a({parent:s[50],name:"onbeforeprint",flags:4,mods:0,cat:0,meta:{dom:true},id:52}),
s[53]=a({parent:s[50],name:"onbeforeunload",flags:4,mods:0,cat:0,meta:{dom:true},id:53}),
s[54]=a({parent:s[50],name:"ongamepadconnected",flags:4,mods:0,cat:0,meta:{dom:true},id:54}),
s[55]=a({parent:s[50],name:"ongamepaddisconnected",flags:4,mods:0,cat:0,meta:{dom:true},id:55}),
s[56]=a({parent:s[50],name:"onhashchange",flags:4,mods:0,cat:0,meta:{dom:true},id:56}),
s[57]=a({parent:s[50],name:"onlanguagechange",flags:4,mods:0,cat:0,meta:{dom:true},id:57}),
s[58]=a({parent:s[50],name:"onmessage",flags:4,mods:0,cat:0,meta:{dom:true},id:58}),
s[59]=a({parent:s[50],name:"onmessageerror",flags:4,mods:0,cat:0,meta:{dom:true},id:59}),
s[60]=a({parent:s[50],name:"onoffline",flags:4,mods:0,cat:0,meta:{dom:true},id:60}),
s[61]=a({parent:s[50],name:"ononline",flags:4,mods:0,cat:0,meta:{dom:true},id:61}),
s[62]=a({parent:s[50],name:"onpagehide",flags:4,mods:0,cat:0,meta:{dom:true},id:62}),
s[63]=a({parent:s[50],name:"onpageshow",flags:4,mods:0,cat:0,meta:{dom:true},id:63}),
s[64]=a({parent:s[50],name:"onpopstate",flags:4,mods:0,cat:0,meta:{dom:true},id:64}),
s[65]=a({parent:s[50],name:"onrejectionhandled",flags:4,mods:0,cat:0,meta:{dom:true},id:65}),
s[66]=a({parent:s[50],name:"onstorage",flags:4,mods:0,cat:0,meta:{dom:true},id:66}),
s[67]=a({parent:s[50],name:"onunhandledrejection",flags:4,mods:0,cat:0,meta:{dom:true},id:67}),
s[68]=a({parent:s[50],name:"onunload",flags:4,mods:0,cat:0,meta:{dom:true},id:68}),
s[69]=a({parent:s[50],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{dom:true},id:69}),
s[70]=a({parent:s[50],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{dom:true},id:70}),
s[72]=a({parent:s[71],name:"closed",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the window has been closed, false otherwise.</p>\n",dom:true},id:72}),
s[74]=a({parent:s[1],name:"CustomElementRegistry",flags:65,mods:0,cat:0,meta:{dom:true},id:74}),
s[73]=a({parent:s[71],name:"customElements",flags:4,mods:64,cat:0,meta:{desc:"<p>Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.</p>\n",dom:true},id:73,valuetype:s[74]}),
s[75]=a({parent:s[74],name:"define",flags:8192,mods:0,cat:0,meta:{dom:true},id:75}),
s[76]=a({parent:s[74],name:"get",flags:8192,mods:0,cat:0,meta:{dom:true},id:76}),
s[77]=a({parent:s[74],name:"upgrade",flags:8192,mods:0,cat:0,meta:{dom:true},id:77}),
s[78]=a({parent:s[74],name:"whenDefined",flags:8192,mods:0,cat:0,meta:{dom:true},id:78}),
s[79]=a({parent:s[71],name:"devicePixelRatio",flags:4,mods:64,cat:0,meta:{dom:true},id:79}),
s[81]=a({parent:s[1],name:"Node",inherits:s[8],flags:65,mods:524288,cat:0,meta:{desc:"<p>Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.</p>\n",dom:true},id:81}),
s[550]=a({parent:s[1],name:"FontFaceSource",flags:64,mods:0,cat:0,meta:{},id:550}),
s[567]=a({parent:s[1],name:"Document",inherits:s[81],implements:[s[550],s[49]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Any web page loaded in the browser and serves as an entry point into the web page&#39;s content, which is the DOM tree.</p>\n",dom:true},id:567}),
s[80]=a({parent:s[71],name:"document",flags:4,mods:524352,cat:0,meta:{dom:true},id:80,valuetype:s[567]}),
s[82]=a({parent:s[81],name:"baseURI",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns node&#39;s node document&#39;s document base URL.</p>\n",dom:true},id:82}),
s[84]=a({parent:s[1],name:"NodeList",flags:65,mods:0,cat:0,meta:{desc:"<p>NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().</p>\n",dom:true},id:84}),
s[88]=a({parent:s[1],name:"NodeListOf",inherits:s[84],flags:64,mods:0,cat:0,meta:{},id:88}),
s[83]=a({parent:s[81],name:"childNodes",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the children.</p>\n",dom:true},id:83,valuetype:s[88]}),
s[85]=a({parent:s[84],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of nodes in the collection.</p>\n",dom:true},id:85}),
s[86]=a({parent:s[84],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the node with index index from the collection. The nodes are sorted in tree order.</p>\n",dom:true},id:86}),
s[87]=a({parent:s[84],name:"forEach",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Performs the specified action for each node in an list.</p>\n",dom:true},id:87}),
s[89]=a({parent:s[88],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the node with index index from the collection. The nodes are sorted in tree order.</p>\n",dom:true},id:89}),
s[90]=a({parent:s[88],name:"forEach",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Performs the specified action for each node in an list.</p>\n",dom:true},id:90}),
s[91]=a({parent:s[81],name:"firstChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first child.</p>\n",dom:true},id:91,valuetype:null}),
s[92]=a({parent:s[81],name:"isConnected",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if node is connected and false otherwise.</p>\n",dom:true},id:92}),
s[93]=a({parent:s[81],name:"lastChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the last child.</p>\n",dom:true},id:93,valuetype:null}),
s[94]=a({parent:s[81],name:"nextSibling",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the next sibling.</p>\n",dom:true},id:94,valuetype:null}),
s[95]=a({parent:s[81],name:"nodeName",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a string appropriate for the type of node.</p>\n",dom:true},id:95}),
s[96]=a({parent:s[81],name:"nodeType",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the type of node.</p>\n",dom:true},id:96}),
s[97]=a({parent:s[81],name:"nodeValue",flags:4,mods:0,cat:0,meta:{dom:true},id:97}),
s[98]=a({parent:s[81],name:"ownerDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the node document. Returns null for documents.</p>\n",dom:true},id:98,valuetype:s[567]}),
s[100]=a({parent:s[1],name:"NonDocumentTypeChildNode",flags:64,mods:0,cat:0,meta:{},id:100}),
s[103]=a({parent:s[1],name:"Element",inherits:s[81],implements:[s[100]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.</p>\n",dom:true},id:103}),
s[478]=a({parent:s[1],name:"HTMLElement",inherits:s[103],implements:[s[49]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</p>\n",dom:true},id:478}),
s[99]=a({parent:s[81],name:"parentElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the parent element.</p>\n",dom:true},id:99,valuetype:s[478]}),
s[101]=a({parent:s[100],name:"nextElementSibling",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first following sibling that is an element, and null otherwise.</p>\n",dom:true},id:101,valuetype:s[103]}),
s[102]=a({parent:s[100],name:"previousElementSibling",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first preceding sibling that is an element, and null otherwise.</p>\n",dom:true},id:102,valuetype:s[103]}),
s[105]=a({parent:s[1],name:"NamedNodeMap",flags:65,mods:0,cat:0,meta:{desc:"<p>A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.</p>\n",dom:true},id:105}),
s[104]=a({parent:s[103],name:"attributes",flags:4,mods:64,cat:0,meta:{dom:true},id:104,valuetype:s[105]}),
s[106]=a({parent:s[105],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:106}),
s[107]=a({parent:s[105],name:"getNamedItem",flags:8192,mods:0,cat:0,meta:{dom:true},id:107}),
s[108]=a({parent:s[105],name:"getNamedItemNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:108}),
s[109]=a({parent:s[105],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:109}),
s[110]=a({parent:s[105],name:"removeNamedItem",flags:8192,mods:0,cat:0,meta:{dom:true},id:110}),
s[111]=a({parent:s[105],name:"removeNamedItemNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:111}),
s[112]=a({parent:s[105],name:"setNamedItem",flags:8192,mods:0,cat:0,meta:{dom:true},id:112}),
s[113]=a({parent:s[105],name:"setNamedItemNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:113}),
s[115]=a({parent:s[1],name:"DOMTokenList",flags:65,mods:0,cat:0,meta:{desc:"<p>A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.</p>\n",dom:true},id:115}),
s[114]=a({parent:s[103],name:"classList",flags:4,mods:64,cat:0,meta:{desc:"<p>Allows for manipulation of element&#39;s class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.</p>\n",dom:true},id:114,valuetype:s[115]}),
s[116]=a({parent:s[115],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of tokens.</p>\n",dom:true},id:116}),
s[117]=a({parent:s[115],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the associated set as string.</p>\n<p>Can be set, to change the associated attribute.</p>\n",dom:true},id:117}),
s[118]=a({parent:s[115],name:"add",flags:8192,mods:0,cat:0,meta:{desc:"<p>Adds all arguments passed, except those already present.</p>\n<p>Throws a &quot;SyntaxError&quot; DOMException if one of the arguments is the empty string.</p>\n<p>Throws an &quot;InvalidCharacterError&quot; DOMException if one of the arguments contains any ASCII whitespace.</p>\n",dom:true},id:118}),
s[119]=a({parent:s[115],name:"contains",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if token is present, and false otherwise.</p>\n",dom:true},id:119}),
s[120]=a({parent:s[115],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the token with index index.</p>\n",dom:true},id:120}),
s[121]=a({parent:s[115],name:"remove",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes arguments passed, if they are present.</p>\n<p>Throws a &quot;SyntaxError&quot; DOMException if one of the arguments is the empty string.</p>\n<p>Throws an &quot;InvalidCharacterError&quot; DOMException if one of the arguments contains any ASCII whitespace.</p>\n",dom:true},id:121}),
s[122]=a({parent:s[115],name:"replace",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replaces token with newToken.</p>\n<p>Returns true if token was replaced with newToken, and false otherwise.</p>\n<p>Throws a &quot;SyntaxError&quot; DOMException if one of the arguments is the empty string.</p>\n<p>Throws an &quot;InvalidCharacterError&quot; DOMException if one of the arguments contains any ASCII whitespace.</p>\n",dom:true},id:122}),
s[123]=a({parent:s[115],name:"supports",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if token is in the associated attribute&#39;s supported tokens. Returns false otherwise.</p>\n<p>Throws a TypeError if the associated attribute has no supported tokens defined.</p>\n",dom:true},id:123}),
s[124]=a({parent:s[115],name:"toggle",flags:8192,mods:0,cat:0,meta:{desc:"<p>If force is not given, &quot;toggles&quot; token, removing it if it&#39;s present and adding it if it&#39;s not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).</p>\n<p>Returns true if token is now present, and false otherwise.</p>\n<p>Throws a &quot;SyntaxError&quot; DOMException if token is empty.</p>\n<p>Throws an &quot;InvalidCharacterError&quot; DOMException if token contains any spaces.</p>\n",dom:true},id:124}),
s[125]=a({parent:s[115],name:"forEach",flags:8192,mods:0,cat:0,meta:{dom:true},id:125}),
s[126]=a({parent:s[103],name:"className",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the value of element&#39;s class content attribute. Can be set to change it.</p>\n",dom:true},id:126}),
s[127]=a({parent:s[103],name:"clientHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:127}),
s[128]=a({parent:s[103],name:"clientLeft",flags:4,mods:64,cat:0,meta:{dom:true},id:128}),
s[129]=a({parent:s[103],name:"clientTop",flags:4,mods:64,cat:0,meta:{dom:true},id:129}),
s[130]=a({parent:s[103],name:"clientWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:130}),
s[131]=a({parent:s[103],name:"id",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the value of element&#39;s id content attribute. Can be set to change it.</p>\n",dom:true},id:131}),
s[132]=a({parent:s[103],name:"localName",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the local name.</p>\n",dom:true},id:132}),
s[133]=a({parent:s[103],name:"namespaceURI",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the namespace.</p>\n",dom:true},id:133}),
s[134]=a({parent:s[103],name:"onfullscreenchange",flags:4,mods:0,cat:0,meta:{dom:true},id:134}),
s[135]=a({parent:s[103],name:"onfullscreenerror",flags:4,mods:0,cat:0,meta:{dom:true},id:135}),
s[136]=a({parent:s[103],name:"outerHTML",flags:4,mods:0,cat:0,meta:{dom:true},id:136}),
s[137]=a({parent:s[103],name:"ownerDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the node document. Returns null for documents.</p>\n",dom:true},id:137,valuetype:s[567]}),
s[138]=a({parent:s[103],name:"part",flags:4,mods:64,cat:0,meta:{dom:true},id:138,valuetype:s[115]}),
s[139]=a({parent:s[103],name:"prefix",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the namespace prefix.</p>\n",dom:true},id:139}),
s[140]=a({parent:s[103],name:"scrollHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:140}),
s[141]=a({parent:s[103],name:"scrollLeft",flags:4,mods:0,cat:0,meta:{dom:true},id:141}),
s[142]=a({parent:s[103],name:"scrollTop",flags:4,mods:0,cat:0,meta:{dom:true},id:142}),
s[143]=a({parent:s[103],name:"scrollWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:143}),
s[145]=a({parent:s[1],name:"DocumentFragment",inherits:s[81],flags:65,mods:524288,cat:0,meta:{desc:"<p>A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn&#39;t part of the active document tree structure, changes made to the fragment don&#39;t affect the document, cause reflow, or incur any performance impact that can occur when changes are made.</p>\n",dom:true},id:145}),
s[162]=a({parent:s[1],name:"ShadowRoot",inherits:s[145],flags:65,mods:524288,cat:0,meta:{dom:true},id:162}),
s[144]=a({parent:s[103],name:"shadowRoot",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns element&#39;s shadow root, if any, and if shadow root&#39;s mode is &quot;open&quot;, and null otherwise.</p>\n",dom:true},id:144,valuetype:s[162]}),
s[146]=a({parent:s[145],name:"ownerDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the node document. Returns null for documents.</p>\n",dom:true},id:146,valuetype:s[567]}),
s[147]=a({parent:s[145],name:"getElementById",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first element within node&#39;s descendants whose ID is elementId.</p>\n",dom:true},id:147}),
s[148]=a({parent:s[145],name:"childElementCount",flags:4,mods:64,cat:0,meta:{dom:true},id:148}),
s[150]=a({parent:s[1],name:"HTMLCollectionBase",flags:64,mods:0,cat:0,meta:{desc:"<p>A generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.</p>\n"},id:150}),
s[153]=a({parent:s[1],name:"HTMLCollection",inherits:s[150],flags:65,mods:0,cat:0,meta:{dom:true},id:153}),
s[149]=a({parent:s[145],name:"children",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the child elements.</p>\n",dom:true},id:149,valuetype:s[153]}),
s[151]=a({parent:s[150],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Sets or retrieves the number of objects in a collection.</p>\n",dom:true},id:151}),
s[152]=a({parent:s[150],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Retrieves an object from various collections.</p>\n",dom:true},id:152}),
s[154]=a({parent:s[153],name:"namedItem",flags:8192,mods:0,cat:0,meta:{desc:"<p>Retrieves a select object or an object from an options collection.</p>\n",dom:true},id:154}),
s[155]=a({parent:s[145],name:"firstElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first child that is an element, and null otherwise.</p>\n",dom:true},id:155,valuetype:s[103]}),
s[156]=a({parent:s[145],name:"lastElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the last child that is an element, and null otherwise.</p>\n",dom:true},id:156,valuetype:s[103]}),
s[157]=a({parent:s[145],name:"append",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:157}),
s[158]=a({parent:s[145],name:"prepend",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:158}),
s[159]=a({parent:s[145],name:"querySelector",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first element that is a descendant of node that matches selectors.</p>\n",dom:true},id:159}),
s[160]=a({parent:s[145],name:"querySelectorAll",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns all element descendants of node that match selectors.</p>\n",dom:true},id:160}),
s[161]=a({parent:s[145],name:"replaceChildren",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:161}),
s[163]=a({parent:s[162],name:"delegatesFocus",flags:4,mods:64,cat:0,meta:{dom:true},id:163}),
s[164]=a({parent:s[162],name:"host",flags:4,mods:524352,cat:0,meta:{dom:true},id:164,valuetype:s[103]}),
s[165]=a({parent:s[162],name:"mode",flags:4,mods:64,cat:0,meta:{dom:true},id:165}),
s[166]=a({parent:s[162],name:"activeElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.</p>\n<p>For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe&#39;s node document.</p>\n<p>Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that&#39;s located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.</p>\n",dom:true},id:166,valuetype:s[103]}),
s[167]=a({parent:s[162],name:"fullscreenElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns document&#39;s fullscreen element.</p>\n",dom:true},id:167,valuetype:s[103]}),
s[168]=a({parent:s[162],name:"pictureInPictureElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:168,valuetype:s[103]}),
s[169]=a({parent:s[162],name:"pointerLockElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:169,valuetype:s[103]}),
s[171]=a({parent:s[1],name:"StyleSheetList",flags:65,mods:0,cat:0,meta:{desc:"<p>A list of StyleSheet.</p>\n",dom:true},id:171}),
s[170]=a({parent:s[162],name:"styleSheets",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.</p>\n",dom:true},id:170,valuetype:s[171]}),
s[172]=a({parent:s[171],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:172}),
s[173]=a({parent:s[171],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:173}),
s[174]=a({parent:s[162],name:"getAnimations",flags:8192,mods:0,cat:0,meta:{dom:true},id:174}),
s[175]=a({parent:s[162],name:"innerHTML",flags:4,mods:0,cat:0,meta:{dom:true},id:175}),
s[176]=a({parent:s[103],name:"slot",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the value of element&#39;s slot content attribute. Can be set to change it.</p>\n",dom:true},id:176}),
s[177]=a({parent:s[103],name:"tagName",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the HTML-uppercased qualified name.</p>\n",dom:true},id:177}),
s[178]=a({parent:s[103],name:"attachShadow",flags:8192,mods:0,cat:0,meta:{desc:"<p>Creates a shadow root for element and returns it.</p>\n",dom:true},id:178}),
s[179]=a({parent:s[103],name:"closest",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.</p>\n",dom:true},id:179}),
s[180]=a({parent:s[103],name:"getAttribute",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns element&#39;s first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.</p>\n",dom:true},id:180}),
s[181]=a({parent:s[103],name:"getAttributeNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns element&#39;s attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.</p>\n",dom:true},id:181}),
s[182]=a({parent:s[103],name:"getAttributeNames",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the qualified names of all element&#39;s attributes. Can contain duplicates.</p>\n",dom:true},id:182}),
s[183]=a({parent:s[103],name:"getAttributeNode",flags:8192,mods:0,cat:0,meta:{dom:true},id:183}),
s[184]=a({parent:s[103],name:"getAttributeNodeNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:184}),
s[185]=a({parent:s[103],name:"getBoundingClientRect",flags:8192,mods:0,cat:0,meta:{dom:true},id:185}),
s[186]=a({parent:s[103],name:"getClientRects",flags:8192,mods:0,cat:0,meta:{dom:true},id:186}),
s[187]=a({parent:s[103],name:"getElementsByClassName",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.</p>\n",dom:true},id:187}),
s[188]=a({parent:s[103],name:"getElementsByTagName",flags:8192,mods:0,cat:0,meta:{dom:true},id:188}),
s[189]=a({parent:s[103],name:"getElementsByTagNameNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:189}),
s[190]=a({parent:s[103],name:"hasAttribute",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.</p>\n",dom:true},id:190}),
s[191]=a({parent:s[103],name:"hasAttributeNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if element has an attribute whose namespace is namespace and local name is localName.</p>\n",dom:true},id:191}),
s[192]=a({parent:s[103],name:"hasAttributes",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if element has attributes, and false otherwise.</p>\n",dom:true},id:192}),
s[193]=a({parent:s[103],name:"hasPointerCapture",flags:8192,mods:0,cat:0,meta:{dom:true},id:193}),
s[194]=a({parent:s[103],name:"insertAdjacentElement",flags:8192,mods:0,cat:0,meta:{dom:true},id:194}),
s[195]=a({parent:s[103],name:"insertAdjacentHTML",flags:8192,mods:0,cat:0,meta:{dom:true},id:195}),
s[196]=a({parent:s[103],name:"insertAdjacentText",flags:8192,mods:0,cat:0,meta:{dom:true},id:196}),
s[197]=a({parent:s[103],name:"matches",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if matching selectors against element&#39;s root yields element, and false otherwise.</p>\n",dom:true},id:197}),
s[198]=a({parent:s[103],name:"releasePointerCapture",flags:8192,mods:0,cat:0,meta:{dom:true},id:198}),
s[199]=a({parent:s[103],name:"removeAttribute",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes element&#39;s first attribute whose qualified name is qualifiedName.</p>\n",dom:true},id:199}),
s[200]=a({parent:s[103],name:"removeAttributeNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes element&#39;s attribute whose namespace is namespace and local name is localName.</p>\n",dom:true},id:200}),
s[201]=a({parent:s[103],name:"removeAttributeNode",flags:8192,mods:0,cat:0,meta:{dom:true},id:201}),
s[202]=a({parent:s[103],name:"requestFullscreen",flags:8192,mods:0,cat:0,meta:{desc:"<p>Displays element fullscreen and resolves promise when done.</p>\n<p>When supplied, options&#39;s navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to &quot;show&quot;, navigation simplicity is preferred over screen space, and if set to &quot;hide&quot;, more screen space is preferred. User agents are always free to honor user preference over the application&#39;s. The default value &quot;auto&quot; indicates no application preference.</p>\n",dom:true},id:202}),
s[203]=a({parent:s[103],name:"requestPointerLock",flags:8192,mods:0,cat:0,meta:{dom:true},id:203}),
s[204]=a({parent:s[103],name:"scroll",flags:8192,mods:0,cat:0,meta:{dom:true},id:204}),
s[205]=a({parent:s[103],name:"scrollBy",flags:8192,mods:0,cat:0,meta:{dom:true},id:205}),
s[206]=a({parent:s[103],name:"scrollIntoView",flags:8192,mods:0,cat:0,meta:{dom:true},id:206}),
s[207]=a({parent:s[103],name:"scrollTo",flags:8192,mods:0,cat:0,meta:{dom:true},id:207}),
s[208]=a({parent:s[103],name:"setAttribute",flags:8192,mods:0,cat:0,meta:{desc:"<p>Sets the value of element&#39;s first attribute whose qualified name is qualifiedName to value.</p>\n",dom:true},id:208}),
s[209]=a({parent:s[103],name:"setAttributeNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>Sets the value of element&#39;s attribute whose namespace is namespace and local name is localName to value.</p>\n",dom:true},id:209}),
s[210]=a({parent:s[103],name:"setAttributeNode",flags:8192,mods:0,cat:0,meta:{dom:true},id:210}),
s[211]=a({parent:s[103],name:"setAttributeNodeNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:211}),
s[212]=a({parent:s[103],name:"setPointerCapture",flags:8192,mods:0,cat:0,meta:{dom:true},id:212}),
s[213]=a({parent:s[103],name:"toggleAttribute",flags:8192,mods:0,cat:0,meta:{desc:"<p>If force is not given, &quot;toggles&quot; qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.</p>\n<p>Returns true if qualifiedName is now present, and false otherwise.</p>\n",dom:true},id:213}),
s[215]=a({parent:s[1],name:"imba",flags:512,mods:32770,cat:0,meta:{},id:215}),
s[412]=a({parent:s[215],name:"ElementRoute",flags:64,mods:0,cat:0,meta:{},id:412}),
s[214]=a({parent:s[103],name:"route",flags:98304,mods:32768,cat:0,meta:{idl:true,summary:"The path/route this element should be enabled for"},id:214,valuetype:s[412]}),
s[216]=a({parent:s[215],name:"Touch",flags:32,mods:32768,cat:0,meta:{desc:"<p>To make it easier and more fun to work with touches, Imba includes a custom <api-link>@touch</api-link> event that combines <api-link>@pointerdown</api-link> -&gt; <api-link>@pointermove</api-link> -&gt; <api-link>@pointerup</api-link> in one convenient handler, with modifiers for commonly needed functionality.</p>\n"},id:216}),
s[217]=a({parent:s[216],name:"x",flags:4,mods:32768,cat:0,meta:{desc:"<p>The final X coordinate of the pointer (after modifiers)</p>\n"},id:217}),
s[218]=a({parent:s[216],name:"y",flags:4,mods:32768,cat:0,meta:{desc:"<p>The final Y coordinate of the pointer (after modifiers)</p>\n"},id:218}),
s[219]=a({parent:s[216],name:"dx",flags:4,mods:32768,cat:0,meta:{desc:"<p>The horizontal movement of the pointer (after modifiers)</p>\n"},id:219}),
s[220]=a({parent:s[216],name:"dy",flags:4,mods:32768,cat:0,meta:{desc:"<p>The vertical movement of the pointer (after modifiers).</p>\n"},id:220}),
s[221]=a({parent:s[216],name:"clientX",flags:32768,mods:32768,cat:0,meta:{desc:"<p>The X coordinate of the pointer in local (DOM content) coordinates.</p>\n"},id:221}),
s[222]=a({parent:s[216],name:"clientY",flags:32768,mods:32768,cat:0,meta:{desc:"<p>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</p>\n"},id:222}),
s[223]=a({parent:s[216],name:"active?",flags:32768,mods:32768,cat:0,meta:{desc:"<p>True if touch is still active</p>\n"},id:223}),
s[224]=a({parent:s[216],name:"ended?",flags:32768,mods:32768,cat:0,meta:{desc:"<p>True if touch has ended</p>\n"},id:224}),
s[225]=a({parent:s[216],name:"ctrlKey",flags:32768,mods:32768,cat:0,meta:{desc:"<p>Returns true if the <code>control</code> key was down when the mouse event was fired.</p>\n"},id:225}),
s[226]=a({parent:s[216],name:"altKey",flags:32768,mods:32768,cat:0,meta:{desc:"<p>Returns true if the <code>alt</code> key was down when the mouse event was fired.</p>\n"},id:226}),
s[227]=a({parent:s[216],name:"shiftKey",flags:32768,mods:32768,cat:0,meta:{desc:"<p>Returns true if the <code>shift</code> key was down when the mouse event was fired.</p>\n"},id:227}),
s[228]=a({parent:s[216],name:"metaKey",flags:32768,mods:32768,cat:0,meta:{desc:"<p>Returns true if the <code>shift</code> key was down when the mouse event was fired.</p>\n"},id:228}),
s[229]=a({parent:s[216],name:"pointerType",flags:32768,mods:32768,cat:0,meta:{desc:"<p>Indicates the device type that caused the event (mouse, pen, touch, etc.)</p>\n"},id:229}),
s[230]=a({parent:s[216],name:"pointerId",flags:32768,mods:32768,cat:0,meta:{summary:"A unique identifier for the pointer causing the event.",desc:"<p>The identifier is unique, being different from the identifiers of all other active pointer events. Since the value may be randomly generated, it is not guaranteed to convey any particular meaning.</p>\n"},id:230}),
s[231]=a({parent:s[216],name:"@moved",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Only when touch has moved more than threshold",detail:"(threshold = 4px, dir = 'any')",desc:"<p>This guard will break the chain unless the touch has moved more than threshold. Once this threshold has been reached, all subsequent updates of touch will pass through. The element will also activate the <api-link>@move</api-link> pseudostate during touch - after threshold is reached.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"5.imba\" data-lang=\"imba\">&lt;div @touch.moved(threshold=4px, dir='any')&gt;</code></app-code-block>",Syntax:true},id:231}),
s[232]=a({parent:s[216],name:"@hold",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Only start handling after pressing and holding still",detail:"(duration = 250ms)",desc:"<p>This guard will break the chain unless the touch has been held for a duration.\nIf the pointer moves more than 5px before the modifier activates, the handler will\nessentially be cancelled.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"8.imba\" data-lang=\"imba\">&lt;div @touch.hold(duration=250ms)&gt;</code></app-code-block>",Syntax:true},id:232}),
s[233]=a({parent:s[216],name:"@sync",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Sync the x,y properties of touch to another object",detail:"(data, xProp?, yProp?)",desc:"<p>A convenient touch modifier that takes care of updating the x,y values of some data during touch. When touch starts sync will remember the initial x,y values and only add/subtract based on movement of the touch.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"11.imba\" data-lang=\"imba\">&lt;div @touch.sync(target, xprop='x', yprop='y')&gt;</code></app-code-block>",Syntax:true},id:233}),
s[234]=a({parent:s[216],name:"@apply",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{see:"https",detail:"(data, xProp?, yProp?)",desc:"<p>Sets the x and y properties of object to the x and y properties of touch.</p>\n"},id:234}),
s[235]=a({parent:s[216],name:"@fit",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Convert the coordinates of the touch to some other frame of reference.",detail:"(target?,snap?)",desc:"<p>A very common need for touches is to convert the coordinates of the touch to some other frame of reference. When dragging you might want to make x,y relative to the container. For a custom slider you might want to convert the coordinates from pixels to relative offset of the slider track. There are loads of other scenarios where you&#39;d want to convert the coordinates to some arbitrary scale and offset. This can easily be achieved with fitting modifiers.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"14.imba\" data-lang=\"imba\">&lt;div @touch.fit&gt; # make x,y relative to the element\n&lt;div @touch.fit(start,end,snap?)&gt;\n&lt;div @touch.fit(target)&gt; # make x,y relative to a target element\n&lt;div @touch.fit(target,start,end,snap?)&gt;\n&lt;div @touch.fit(target,[xstart,ystart],[xend,yend],snap?)&gt;</code></app-code-block>",Syntax:true},id:235}),
s[236]=a({parent:s[216],name:"@reframe",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(target?, ax?, ay?)",desc:"<p>Just like @touch.fit but without clamping x,y to the bounds of the\ntarget.</p>\n"},id:236}),
s[237]=a({parent:s[216],name:"@pin",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(target?, ax?, ay?)",desc:"<p>Allow pinning the touch to a certain point in an element, so that\nall future x,y values are relative to this pinned point.</p>\n"},id:237}),
s[238]=a({parent:s[216],name:"@round",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(to = 1)",desc:"<p>Round the x,y coordinates with an optional accuracy</p>\n"},id:238}),
s[239]=a({parent:s[216],name:"@flag",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"target",kind:"parameterName"},detail:"(name,target?)",desc:"<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"},id:239}),
s[240]=a({parent:s[216],name:"@sel",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(selector)",desc:"<p>Only trigger handler if event.target matches selector</p>\n"},id:240}),
s[241]=a({parent:s[216],name:"@prevent",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{see:"https",desc:"<p>Tells the browser that the default action should not be taken. The event will still continue to propagate up the tree. See Event.preventDefault()</p>\n"},id:241}),
s[242]=a({parent:s[216],name:"@stop",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Stops the event from propagating up the tree. Event listeners for the same event on nodes further up the tree will not be triggered. See Event.stopPropagation()</p>\n"},id:242}),
s[243]=a({parent:s[216],name:"@trap",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Prevents default action &amp; stops event from bubbling.</p>\n"},id:243}),
s[244]=a({parent:s[216],name:"@self",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Only trigger handler if event.target is the element itself",desc:"<p>The <code>self</code> event modifier is a handy way of reacting to events only when they are clicked on the actual element you are interacting with and not, for example, a child element. This can be useful for things like modal wrappers when you only want to react when clicking directly.</p>\n"},id:244}),
s[245]=a({parent:s[216],name:"@silent",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Don't trigger imba.commit from this event handler"},id:245}),
s[246]=a({parent:s[216],name:"@lock",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Suppress pointer events on all other elements"},id:246}),
s[247]=a({parent:s[216],name:"@if",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(condition)",desc:"<p>Only trigger condition is truthy</p>\n"},id:247}),
s[248]=a({parent:s[215],name:"IntersectRoot",flags:524288,mods:0,cat:0,meta:{},id:248}),
s[249]=a({parent:s[215],name:"IntersectOptions",flags:524288,mods:0,cat:0,meta:{},id:249}),
s[250]=a({parent:s[215],name:"IntersectEvent",inherits:s[2],flags:32,mods:294912,cat:0,meta:{desc:"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> is a <a href=\"https://caniuse.com/#feat=intersectionobserver\">well-supported</a> API in modern browsers. It provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&#39;s viewport. Imba adds a simplified abstraction on top of this via the custom <api-link>@intersect</api-link> event.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"22.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @intersect.in=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block><h4>Parameters</h4><p>The <api-link>@intersect</api-link> events accepts several arguments. You can pass in an object with the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root\">root</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\">rootMargin</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold\">threshold</a>  properties supported by <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver\">IntersectionObserver</a>. </p>\n<app-code-block data-path=\"/docs\"><code data-name=\"23.imba\" data-lang=\"imba\">&lt;div @intersect=handler&gt; # default options\n&lt;div @intersect(root: frame, rootMargin: '20px')=handler&gt;\n&lt;div @intersect(threshold: [0,0.5,1])=handler&gt;</code></app-code-block><p>For convenience, imba will convert certain arguments into options. A single number between 0 and 1 will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold\">threshold</a> option:</p>\n<app-code-block data-path=\"/docs\"><code data-name=\"24.imba\" data-lang=\"imba\"># n 0-1 adds single threshold at n visibility\n&lt;div @intersect(0)=handler&gt; # {threshold: 0}\n&lt;div @intersect(0.5)=handler&gt; # {threshold: 0.5}\n&lt;div @intersect(1)=handler&gt; # {threshold: 1.0}</code></app-code-block><p>Any number above 1 will add n thresholds, spread evenly:</p>\n<app-code-block data-path=\"/docs\"><code data-name=\"25.imba\" data-lang=\"imba\">&lt;div @intersect(2)=handler&gt; # {threshold: [0,1]}\n&lt;div @intersect(3)=handler&gt; # {threshold: [0,0.5,1]}\n&lt;div @intersect(5)=handler&gt; # {threshold: [0,0.25,0.5,0.75,1]}\n# ... and so forth</code></app-code-block><p>An element will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root\">root</a> option:</p>\n<app-code-block data-path=\"/docs\"><code data-name=\"26.imba\" data-lang=\"imba\">&lt;div @intersect(frame)=handler&gt; # {root: frame}\n&lt;div @intersect(frame,3)=handler&gt; # {root: frame, threshold: [0,0.5,1]}</code></app-code-block><p>A string will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\">rootMargin</a> option:</p>\n<app-code-block data-path=\"/docs\"><code data-name=\"27.imba\" data-lang=\"imba\">&lt;div @intersect(\"20px 10px\")=handler&gt; # {rootMargin: \"20px 10px\"}</code></app-code-block>",Syntax:true,Parameters:true},id:250}),
s[251]=a({parent:s[250],name:"@in",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Stop handling unless intersectionRatio has increased.",desc:"<p>The <code>out</code> modifier stops the handler unless intersectionRatio has <em>increased</em>.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"35.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @intersect.in=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>",Syntax:true},id:251}),
s[252]=a({parent:s[250],name:"@out",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Stop handling unless intersectionRatio has decreased.",desc:"<p>The <code>out</code> modifier stops the handler unless intersectionRatio has <em>decreased</em>.</p>\n<h4>Syntax</h4><app-code-block data-path=\"/docs\"><code data-name=\"38.imba\" data-lang=\"imba\"># Will only trigger when element starts intersecting\n&lt;div @intersect.out=handler&gt;\n# Will trigger whenever any part of the div is hidden\n&lt;div @intersect(1).out=handler&gt;</code></app-code-block>",Syntax:true},id:252}),
s[253]=a({parent:s[250],name:"@css",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Set css variable `--ratio` to the intersectionRatio.",desc:"<p>The css modifier sets a css variable --ratio on the event target with the current ratio.</p>\n"},id:253}),
s[254]=a({parent:s[250],name:"@flag",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"name",kind:"parameterName"},desc:"<p>Will add a class to the DOM element when intersecting</p>\n"},id:254}),
s[255]=a({parent:s[250],name:"@options",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"thresholds",kind:"parameterName"},desc:"<p>Configuring</p>\n"},id:255}),
s[257]=a({parent:s[1],name:"IntersectionObserverEntry",flags:65,mods:0,cat:0,meta:{desc:"<p>This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition.</p>\n",dom:true},id:257}),
s[256]=a({parent:s[250],name:"entry",flags:4,mods:32768,cat:0,meta:{desc:"<p>The raw IntersectionObserverEntry</p>\n"},id:256,valuetype:s[257]}),
s[259]=a({parent:s[1],name:"DOMRectReadOnly",flags:65,mods:0,cat:0,meta:{dom:true},id:259}),
s[258]=a({parent:s[257],name:"boundingClientRect",flags:4,mods:64,cat:0,meta:{dom:true},id:258,valuetype:s[259]}),
s[260]=a({parent:s[259],name:"bottom",flags:4,mods:64,cat:0,meta:{dom:true},id:260}),
s[261]=a({parent:s[259],name:"height",flags:4,mods:64,cat:0,meta:{dom:true},id:261}),
s[262]=a({parent:s[259],name:"left",flags:4,mods:64,cat:0,meta:{dom:true},id:262}),
s[263]=a({parent:s[259],name:"right",flags:4,mods:64,cat:0,meta:{dom:true},id:263}),
s[264]=a({parent:s[259],name:"top",flags:4,mods:64,cat:0,meta:{dom:true},id:264}),
s[265]=a({parent:s[259],name:"width",flags:4,mods:64,cat:0,meta:{dom:true},id:265}),
s[266]=a({parent:s[259],name:"x",flags:4,mods:64,cat:0,meta:{dom:true},id:266}),
s[267]=a({parent:s[259],name:"y",flags:4,mods:64,cat:0,meta:{dom:true},id:267}),
s[268]=a({parent:s[259],name:"toJSON",flags:8192,mods:0,cat:0,meta:{dom:true},id:268}),
s[269]=a({parent:s[257],name:"intersectionRatio",flags:4,mods:64,cat:0,meta:{dom:true},id:269}),
s[270]=a({parent:s[257],name:"intersectionRect",flags:4,mods:64,cat:0,meta:{dom:true},id:270,valuetype:s[259]}),
s[271]=a({parent:s[257],name:"isIntersecting",flags:4,mods:64,cat:0,meta:{dom:true},id:271}),
s[272]=a({parent:s[257],name:"rootBounds",flags:4,mods:64,cat:0,meta:{dom:true},id:272,valuetype:s[259]}),
s[273]=a({parent:s[257],name:"target",flags:4,mods:524352,cat:0,meta:{dom:true},id:273,valuetype:s[103]}),
s[274]=a({parent:s[257],name:"time",flags:4,mods:64,cat:0,meta:{dom:true},id:274}),
s[275]=a({parent:s[250],name:"ratio",flags:4,mods:32768,cat:0,meta:{desc:"<p>Ratio of the intersectionRect to the boundingClientRect</p>\n"},id:275}),
s[276]=a({parent:s[250],name:"delta",flags:4,mods:32768,cat:0,meta:{desc:"<p>Difference in ratio since previous event</p>\n"},id:276}),
s[277]=a({parent:s[215],name:"ResizeEvent",inherits:s[46],flags:32,mods:294912,cat:0,meta:{desc:"<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\">ResizeObserver</a> interface reports changes to the dimensions of an Element&#39;s content or border box. It has <a href=\"https://caniuse.com/#feat=resizeobserver\">good browser support</a> and is very useful in a wide variety of usecases. ResizeObserver avoids infinite callback loops and cyclic dependencies that are often created when resizing via a callback function. It does this by only processing elements deeper in the DOM in subsequent frames.</p>\n"},id:277}),
s[278]=a({parent:s[277],name:"width",flags:4,mods:32832,cat:0,meta:{desc:"<p>Width of the resized element</p>\n"},id:278}),
s[279]=a({parent:s[277],name:"height",flags:4,mods:32832,cat:0,meta:{desc:"<p>Height of the resized element</p>\n"},id:279}),
s[280]=a({parent:s[277],name:"rect",flags:4,mods:32832,cat:0,meta:{desc:"<p>contentRect from the ResizeObserverEntry</p>\n"},id:280,valuetype:s[259]}),
s[282]=a({parent:s[1],name:"ResizeObserverEntry",flags:65,mods:0,cat:0,meta:{dom:true},id:282}),
s[281]=a({parent:s[277],name:"entry",flags:4,mods:32832,cat:0,meta:{desc:"<p>the raw ResizeObserverEntry</p>\n"},id:281,valuetype:s[282]}),
s[284]=a({parent:s[1],name:"ReadonlyArray",flags:64,mods:0,cat:0,meta:{},id:284}),
s[283]=a({parent:s[282],name:"borderBoxSize",flags:4,mods:64,cat:0,meta:{dom:true},id:283,valuetype:s[284]}),
s[285]=a({parent:s[284],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the length of the array. This is a number one higher than the highest element defined in an array.</p>\n"},id:285}),
s[286]=a({parent:s[284],name:"concat",flags:8192,mods:0,cat:0,meta:{param:{text:"items",kind:"parameterName"},desc:"<p>Combines two or more arrays.</p>\n"},id:286}),
s[287]=a({parent:s[284],name:"join",flags:8192,mods:0,cat:0,meta:{param:{text:"separator",kind:"parameterName"},desc:"<p>Adds all the elements of an array separated by the specified separator string.</p>\n"},id:287}),
s[288]=a({parent:s[284],name:"slice",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns a section of an array.</p>\n"},id:288}),
s[289]=a({parent:s[284],name:"indexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the first occurrence of a value in an array.</p>\n"},id:289}),
s[290]=a({parent:s[284],name:"lastIndexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the last occurrence of a specified value in an array.</p>\n"},id:290}),
s[291]=a({parent:s[284],name:"every",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether all the members of an array satisfy the specified test.</p>\n"},id:291}),
s[292]=a({parent:s[284],name:"some",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether the specified callback function returns true for any element of an array.</p>\n"},id:292}),
s[293]=a({parent:s[284],name:"forEach",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Performs the specified action for each element in an array.</p>\n"},id:293}),
s[294]=a({parent:s[284],name:"map",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Calls a defined callback function on each element of an array, and returns an array that contains the results.</p>\n"},id:294}),
s[295]=a({parent:s[284],name:"filter",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the elements of an array that meet the condition specified in a callback function.</p>\n"},id:295}),
s[296]=a({parent:s[284],name:"reduce",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.</p>\n"},id:296}),
s[297]=a({parent:s[284],name:"reduceRight",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.</p>\n"},id:297}),
s[298]=a({parent:s[284],name:"find",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the value of the first element in the array where predicate is true, and undefined\notherwise.</p>\n"},id:298}),
s[299]=a({parent:s[284],name:"findIndex",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the index of the first element in the array where predicate is true, and -1\notherwise.</p>\n"},id:299}),
s[300]=a({parent:s[284],name:"entries",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of key, value pairs for every entry in the array</p>\n"},id:300}),
s[301]=a({parent:s[284],name:"keys",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of keys in the array</p>\n"},id:301}),
s[302]=a({parent:s[284],name:"values",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of values in the array</p>\n"},id:302}),
s[303]=a({parent:s[284],name:"includes",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Determines whether an array includes a certain element, returning true or false as appropriate.</p>\n"},id:303}),
s[304]=a({parent:s[284],name:"flatMap",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.</p>\n"},id:304}),
s[305]=a({parent:s[284],name:"flat",flags:8192,mods:0,cat:0,meta:{param:{text:"depth",kind:"parameterName"},desc:"<p>Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.</p>\n"},id:305}),
s[306]=a({parent:s[282],name:"contentBoxSize",flags:4,mods:64,cat:0,meta:{dom:true},id:306,valuetype:s[284]}),
s[307]=a({parent:s[282],name:"contentRect",flags:4,mods:64,cat:0,meta:{dom:true},id:307,valuetype:s[259]}),
s[308]=a({parent:s[282],name:"target",flags:4,mods:524352,cat:0,meta:{dom:true},id:308,valuetype:s[103]}),
s[309]=a({parent:s[277],name:"@css",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Set css variables for width / height of resized element",desc:"<p>The css modifier sets css variables (or units) to the width/height\nof the resized element</p>\n"},id:309}),
s[310]=a({parent:s[215],name:"Router",flags:64,mods:32768,cat:0,meta:{},id:310}),
s[311]=a({parent:s[310],name:"path",flags:4,mods:32768,cat:0,meta:{desc:"<p>The currently matching path</p>\n"},id:311}),
s[312]=a({parent:s[310],name:"hash",flags:4,mods:32768,cat:0,meta:{desc:"<p>The hash</p>\n"},id:312}),
s[313]=a({parent:s[310],name:"match",flags:8192,mods:32768,cat:0,meta:{desc:"<p>See if router currently matches a pattern/path</p>\n"},id:313}),
s[314]=a({parent:s[310],name:"go",flags:8192,mods:32768,cat:0,meta:{param:"state",desc:"<p>Go to a url</p>\n"},id:314}),
s[315]=a({parent:s[310],name:"replace",flags:8192,mods:32768,cat:0,meta:{param:"state",desc:"<p>Switch to another url without pushing to the history</p>\n"},id:315}),
s[316]=a({parent:s[215],name:"Route",flags:64,mods:0,cat:0,meta:{},id:316}),
s[317]=a({parent:s[215],name:"router",flags:2,mods:32768,cat:0,meta:{desc:"<p>Reference to global router</p>\n"},id:317,valuetype:s[310]}),
s[318]=a({parent:s[215],name:"commit",flags:16,mods:32768,cat:0,meta:{desc:"<p>Schedule re-render</p>\n"},id:318}),
s[319]=a({parent:s[215],name:"render",flags:16,mods:32768,cat:0,meta:{desc:"<p>Render elements in custom context</p>\n"},id:319}),
s[320]=a({parent:s[215],name:"mount",flags:16,mods:32768,cat:0,meta:{param:"into",desc:"<p>Attach an element to the dom</p>\n"},id:320}),
s[321]=a({parent:s[215],name:"unmount",flags:16,mods:32768,cat:0,meta:{param:"element",desc:"<p>Detach element from document</p>\n"},id:321}),
s[322]=a({parent:s[215],name:"@observable",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Mark field as observable</p>\n"},id:322}),
s[323]=a({parent:s[215],name:"@computed",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Mark getter as computed</p>\n"},id:323}),
s[324]=a({parent:s[215],name:"@autorun",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Runs the method immediately after instance is initialized\nand re-runs whenever any of the referenced observables\nchange. Methods marked with autorun in tag declarations\nwill run immediately after mount, and automatically dispose\nwhen element unmounts.</p>\n"},id:324}),
s[325]=a({parent:s[215],name:"@lazy",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Mark getter as lazy. It will only be evaluated once,\nand then return the resulting value forever after.</p>\n"},id:325}),
s[326]=a({parent:s[215],name:"serve",flags:16,mods:32768,cat:0,meta:{desc:"<p>Start an asset-aware server</p>\n"},id:326}),
s[327]=a({parent:s[215],name:"Globals",flags:64,mods:0,cat:0,meta:{},id:327}),
s[328]=a({parent:s[327],name:"clearInterval",flags:8192,mods:32768,cat:0,meta:{desc:"<p>The global clearInterval() method cancels a timed, repeating action which was previously established by a call to setInterval().</p>\n"},id:328}),
s[329]=a({parent:s[327],name:"clearTimeout",flags:8192,mods:32768,cat:0,meta:{desc:"<p>The global clearTimeout() method cancels a timeout previously established by calling setTimeout().</p>\n"},id:329}),
s[330]=a({parent:s[327],name:"setInterval",flags:8192,mods:32768,cat:0,meta:{desc:"<p>The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.</p>\n"},id:330}),
s[331]=a({parent:s[327],name:"setTimeout",flags:8192,mods:32768,cat:0,meta:{desc:"<p>The global setTimeout() method sets a timer which executes a function or specified piece of code once the timer expires.</p>\n"},id:331}),
s[332]=a({parent:s[327],name:"isNaN",flags:8192,mods:32768,cat:0,meta:{param:{text:"number",kind:"parameterName"},desc:"<p>Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).</p>\n"},id:332}),
s[333]=a({parent:s[327],name:"isFinite",flags:8192,mods:32768,cat:0,meta:{param:{text:"number",kind:"parameterName"},desc:"<p>Determines whether a supplied number is finite.</p>\n"},id:333}),
s[334]=a({parent:s[327],name:"window",flags:4,mods:32832,cat:0,meta:{desc:"<p>Reference to the current window</p>\n"},id:334,valuetype:s[71]}),
s[335]=a({parent:s[327],name:"document",flags:4,mods:557120,cat:0,meta:{desc:"<p>Reference to the current document</p>\n"},id:335,valuetype:s[567]}),
s[336]=a({parent:s[327],name:"process",flags:4,mods:32832,cat:0,meta:{desc:"<p>Reference to the current document</p>\n"},id:336}),
s[337]=a({parent:s[327],name:"__dirname",flags:4,mods:32832,cat:0,meta:{desc:"<p>Dirname</p>\n"},id:337}),
s[338]=a({parent:s[327],name:"__filename",flags:4,mods:32832,cat:0,meta:{desc:"<p>Filename</p>\n"},id:338}),
s[339]=a({parent:s[327],name:"__realname",flags:4,mods:32832,cat:0,meta:{desc:"<p>Real filename</p>\n"},id:339}),
s[340]=a({parent:s[327],name:"global",flags:4,mods:32832,cat:0,meta:{desc:"<p>Reference to the global object</p>\n"},id:340}),
s[341]=a({parent:s[327],name:"parseInt",flags:8192,mods:32768,cat:0,meta:{param:{text:"radix",kind:"parameterName"},desc:"<p>Converts a string to an integer.</p>\n"},id:341}),
s[342]=a({parent:s[327],name:"parseFloat",flags:8192,mods:32768,cat:0,meta:{param:{text:"string",kind:"parameterName"},desc:"<p>Converts a string to a floating-point number.</p>\n"},id:342}),
s[344]=a({parent:s[1],name:"Console",flags:64,mods:0,cat:0,meta:{},id:344}),
s[343]=a({parent:s[327],name:"console",flags:4,mods:32768,cat:0,meta:{desc:"<p>Access to the global console object</p>\n"},id:343,valuetype:s[344]}),
s[345]=a({parent:s[344],name:"assert",flags:8192,mods:0,cat:0,meta:{dom:true},id:345}),
s[346]=a({parent:s[344],name:"clear",flags:8192,mods:0,cat:0,meta:{dom:true},id:346}),
s[347]=a({parent:s[344],name:"count",flags:8192,mods:0,cat:0,meta:{dom:true},id:347}),
s[348]=a({parent:s[344],name:"countReset",flags:8192,mods:0,cat:0,meta:{dom:true},id:348}),
s[349]=a({parent:s[344],name:"debug",flags:8192,mods:0,cat:0,meta:{dom:true},id:349}),
s[350]=a({parent:s[344],name:"dir",flags:8192,mods:0,cat:0,meta:{dom:true},id:350}),
s[351]=a({parent:s[344],name:"dirxml",flags:8192,mods:0,cat:0,meta:{dom:true},id:351}),
s[352]=a({parent:s[344],name:"error",flags:8192,mods:0,cat:0,meta:{dom:true},id:352}),
s[353]=a({parent:s[344],name:"group",flags:8192,mods:0,cat:0,meta:{dom:true},id:353}),
s[354]=a({parent:s[344],name:"groupCollapsed",flags:8192,mods:0,cat:0,meta:{dom:true},id:354}),
s[355]=a({parent:s[344],name:"groupEnd",flags:8192,mods:0,cat:0,meta:{dom:true},id:355}),
s[356]=a({parent:s[344],name:"info",flags:8192,mods:0,cat:0,meta:{dom:true},id:356}),
s[357]=a({parent:s[344],name:"log",flags:8192,mods:0,cat:0,meta:{dom:true},id:357}),
s[358]=a({parent:s[344],name:"table",flags:8192,mods:0,cat:0,meta:{dom:true},id:358}),
s[359]=a({parent:s[344],name:"time",flags:8192,mods:0,cat:0,meta:{dom:true},id:359}),
s[360]=a({parent:s[344],name:"timeEnd",flags:8192,mods:0,cat:0,meta:{dom:true},id:360}),
s[361]=a({parent:s[344],name:"timeLog",flags:8192,mods:0,cat:0,meta:{dom:true},id:361}),
s[362]=a({parent:s[344],name:"timeStamp",flags:8192,mods:0,cat:0,meta:{dom:true},id:362}),
s[363]=a({parent:s[344],name:"trace",flags:8192,mods:0,cat:0,meta:{dom:true},id:363}),
s[364]=a({parent:s[344],name:"warn",flags:8192,mods:0,cat:0,meta:{dom:true},id:364}),
s[365]=a({parent:s[215],name:"Context",flags:64,mods:786432,cat:0,meta:{},id:365}),
s[366]=a({parent:s[215],name:"Flags",flags:64,mods:0,cat:0,meta:{},id:366}),
s[367]=a({parent:s[366],name:"contains",flags:8192,mods:32768,cat:0,meta:{summary:"Returns true if the list contains the given token, otherwise false."},id:367}),
s[368]=a({parent:s[366],name:"add",flags:8192,mods:32768,cat:0,meta:{summary:"Adds the specified token to the list."},id:368}),
s[369]=a({parent:s[366],name:"remove",flags:8192,mods:32768,cat:0,meta:{summary:"Removes the specified token from the list."},id:369}),
s[370]=a({parent:s[366],name:"toggle",flags:8192,mods:32768,cat:0,meta:{summary:"Toggles specified token in the list."},id:370}),
s[371]=a({parent:s[366],name:"incr",flags:8192,mods:32768,cat:0,meta:{summary:"Adds the specified token to the list"},id:371}),
s[372]=a({parent:s[366],name:"decr",flags:8192,mods:32768,cat:0,meta:{summary:"Removes the specified token from the list if zero increments remain"},id:372}),
s[373]=a({parent:s[215],name:"units",flags:64,mods:0,cat:0,meta:{},id:373}),
s[374]=a({parent:s[373],name:"ms",flags:4,mods:32768,cat:0,meta:{desc:"<p>Milliseconds</p>\n"},id:374}),
s[375]=a({parent:s[373],name:"s",flags:4,mods:32768,cat:0,meta:{desc:"<p>Seconds. Compiles to n * 1000 (milliseconds in one second)</p>\n"},id:375}),
s[376]=a({parent:s[373],name:"minutes",flags:4,mods:32768,cat:0,meta:{desc:"<p>Days. Compiles to n * 60000 (milliseconds in one minute)</p>\n"},id:376}),
s[377]=a({parent:s[373],name:"hours",flags:4,mods:32768,cat:0,meta:{desc:"<p>Hours. Compiles to n * 3600000 (milliseconds in 1 hour)</p>\n"},id:377}),
s[378]=a({parent:s[373],name:"days",flags:4,mods:32768,cat:0,meta:{desc:"<p>Days. Compiles to n * 86400000 (milliseconds in one day)</p>\n"},id:378}),
s[379]=a({parent:s[373],name:"fps",flags:4,mods:32768,cat:0,meta:{desc:"<p>Frames per second. Compiles to 1000 / n\nIe 60fps =&gt; 1000 / 60.</p>\n"},id:379}),
s[380]=a({parent:s[373],name:"px",flags:4,mods:32768,cat:0,meta:{desc:"<p>Pixels</p>\n"},id:380}),
s[381]=a({parent:s[215],name:"Component",inherits:s[478],flags:32,mods:557056,cat:0,meta:{},id:381}),
s[382]=a({parent:s[381],name:"render",flags:8192,mods:32896,cat:0,meta:{summary:"Called to update the element and their children",abstract:true,lifecycle:true},id:382}),
s[383]=a({parent:s[381],name:"hydrate",flags:8192,mods:32896,cat:0,meta:{summary:"Called on client to hydrate SSR element",abstract:true,lifecycle:true},id:383}),
s[384]=a({parent:s[381],name:"dehydrate",flags:8192,mods:32896,cat:0,meta:{summary:"Called on server when stringifying a component",abstract:true,lifecycle:true},id:384}),
s[385]=a({parent:s[381],name:"suspend",flags:8192,mods:32768,cat:0,meta:{summary:"Suspend rendering of component",lifecycle:true},id:385}),
s[386]=a({parent:s[381],name:"unsuspend",flags:8192,mods:32768,cat:0,meta:{summary:"Unsuspend rendering of component",lifecycle:true},id:386}),
s[387]=a({parent:s[381],name:"tick",flags:8192,mods:32896,cat:0,meta:{summary:"Called to update element via scheduler",abstract:true,lifecycle:true},id:387}),
s[388]=a({parent:s[381],name:"render?",flags:32768,mods:32896,cat:0,meta:{summary:"Tells whether the component should render",abstract:true,lifecycle:true},id:388}),
s[389]=a({parent:s[381],name:"mounting?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component is currently being mounted",lifecycle:true},id:389}),
s[390]=a({parent:s[381],name:"mounted?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component is currently mounted in document",lifecycle:true},id:390}),
s[391]=a({parent:s[381],name:"awakened?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component has been awakened",lifecycle:true},id:391}),
s[392]=a({parent:s[381],name:"rendered?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component has been rendered",lifecycle:true},id:392}),
s[393]=a({parent:s[381],name:"suspended?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component has been suspended",lifecycle:true},id:393}),
s[394]=a({parent:s[381],name:"rendering?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component is currently rendering",lifecycle:true},id:394}),
s[395]=a({parent:s[381],name:"scheduled?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component is scheduled to automatically render",lifecycle:true},id:395}),
s[396]=a({parent:s[381],name:"hydrated?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component has been hydrated on the client",lifecycle:true},id:396}),
s[397]=a({parent:s[381],name:"ssr?",flags:32768,mods:32768,cat:0,meta:{readonly:true,summary:"Tells whether the component was originally rendered on the server"},id:397}),
s[398]=a({parent:s[381],name:"schedule",flags:8192,mods:32768,cat:0,meta:{summary:"Start rendering the component on every imba.commit"},id:398}),
s[399]=a({parent:s[381],name:"unschedule",flags:8192,mods:32768,cat:0,meta:{summary:"Stop rendering the component automatically on every imba.commit"},id:399}),
s[400]=a({parent:s[381],name:"build",flags:8192,mods:32896,cat:0,meta:{summary:"Called before any properties are set",lifecycle:true,abstract:true},id:400}),
s[401]=a({parent:s[381],name:"setup",flags:8192,mods:32896,cat:0,meta:{summary:"Called before any properties are set",lifecycle:true,abstract:true},id:401}),
s[402]=a({parent:s[381],name:"awaken",flags:8192,mods:32896,cat:0,meta:{summary:"Called when element is *first* attached to document",lifecycle:true,abstract:true},id:402}),
s[403]=a({parent:s[381],name:"mount",flags:8192,mods:32896,cat:0,meta:{summary:"Called when element is attached to document",lifecycle:true,abstract:true},id:403}),
s[404]=a({parent:s[381],name:"unmount",flags:8192,mods:32896,cat:0,meta:{summary:"Called when element is detached from document",lifecycle:true,abstract:true},id:404}),
s[405]=a({parent:s[381],name:"rendered",flags:8192,mods:32896,cat:0,meta:{summary:"Called after render",lifecycle:true,abstract:true},id:405}),
s[406]=a({parent:s[381],name:"autorender",flags:4,mods:32768,cat:0,meta:{summary:"Specify how / when the component should re-render",idl:true,desc:"<p>Schedule the element to update itself\nyes = render on events / imba.commit\nno = force manual render\nnull / undefined = render via parent\n(n)s = render every n s\n(n)ms = render every n ms\n(n)fps = render n times per second</p>\n"},id:406}),
s[407]=a({parent:s[215],name:"ImbaProcess",flags:64,mods:0,cat:0,meta:{},id:407}),
s[408]=a({parent:s[215],name:"Scheduler",flags:64,mods:32768,cat:0,meta:{desc:"<p>Class for scheduling</p>\n"},id:408}),
s[409]=a({parent:s[408],name:"dt",flags:4,mods:32768,cat:0,meta:{desc:"<p>Milliseconds since previous tick</p>\n"},id:409}),
s[410]=a({parent:s[215],name:"scheduler",flags:2,mods:32768,cat:0,meta:{desc:"<p>Reference to global scheduler</p>\n"},id:410,valuetype:s[408]}),
s[411]=a({parent:s[215],name:"Reaction",flags:64,mods:0,cat:0,meta:{},id:411}),
s[413]=a({parent:s[103],name:"route-to",flags:4,mods:32768,cat:0,meta:{idl:true,summary:"The path/route to go to when clicking this element"},id:413}),
s[414]=a({parent:s[103],name:"router",flags:4,mods:32832,cat:0,meta:{summary:"Reference to the imba router"},id:414,valuetype:s[310]}),
s[415]=a({parent:s[103],name:"data",flags:4,mods:32768,cat:0,meta:{idl:true,summary:"Default property for setting the data of an element"},id:415}),
s[416]=a({parent:s[103],name:"key",flags:4,mods:32768,cat:0,meta:{idl:true,desc:"<p>Gives elements a stable identity inside lists.\nAny value (both objects and primitive values) may be used as a key.</p>\n"},id:416}),
s[417]=a({parent:s[103],name:"hotkeys",flags:4,mods:32768,cat:0,meta:{summary:"Sets whether `@hotkey` events inside of this element\nis enabled or not",idl:true,desc:"<p>Sets whether <api-link>@hotkey</api-link> events inside of this element\nis enabled or not. If explicitly set to true, only\n<api-link>@hotkey</api-link> events inside this group will be triggered\nwhen this element or a child has focus.</p>\n"},id:417}),
s[418]=a({parent:s[103],name:"ease",flags:4,mods:32768,cat:0,meta:{see:"",idl:true,desc:"<p>Enable transitions for when element is attached / detached</p>\n"},id:418}),
s[419]=a({parent:s[103],name:"flags",flags:4,mods:32832,cat:0,meta:{summary:"Allows for manipulation of element's class content attribute"},id:419,valuetype:s[366]}),
s[420]=a({parent:s[103],name:"emit",flags:8192,mods:32768,cat:0,meta:{param:"options",desc:"<p>Emits event</p>\n"},id:420}),
s[421]=a({parent:s[103],name:"ariaAtomic",flags:4,mods:0,cat:0,meta:{dom:true},id:421}),
s[422]=a({parent:s[103],name:"ariaAutoComplete",flags:4,mods:0,cat:0,meta:{dom:true},id:422}),
s[423]=a({parent:s[103],name:"ariaBusy",flags:4,mods:0,cat:0,meta:{dom:true},id:423}),
s[424]=a({parent:s[103],name:"ariaChecked",flags:4,mods:0,cat:0,meta:{dom:true},id:424}),
s[425]=a({parent:s[103],name:"ariaColCount",flags:4,mods:0,cat:0,meta:{dom:true},id:425}),
s[426]=a({parent:s[103],name:"ariaColIndex",flags:4,mods:0,cat:0,meta:{dom:true},id:426}),
s[427]=a({parent:s[103],name:"ariaColSpan",flags:4,mods:0,cat:0,meta:{dom:true},id:427}),
s[428]=a({parent:s[103],name:"ariaCurrent",flags:4,mods:0,cat:0,meta:{dom:true},id:428}),
s[429]=a({parent:s[103],name:"ariaDisabled",flags:4,mods:0,cat:0,meta:{dom:true},id:429}),
s[430]=a({parent:s[103],name:"ariaExpanded",flags:4,mods:0,cat:0,meta:{dom:true},id:430}),
s[431]=a({parent:s[103],name:"ariaHasPopup",flags:4,mods:0,cat:0,meta:{dom:true},id:431}),
s[432]=a({parent:s[103],name:"ariaHidden",flags:4,mods:0,cat:0,meta:{dom:true},id:432}),
s[433]=a({parent:s[103],name:"ariaKeyShortcuts",flags:4,mods:0,cat:0,meta:{dom:true},id:433}),
s[434]=a({parent:s[103],name:"ariaLabel",flags:4,mods:0,cat:0,meta:{dom:true},id:434}),
s[435]=a({parent:s[103],name:"ariaLevel",flags:4,mods:0,cat:0,meta:{dom:true},id:435}),
s[436]=a({parent:s[103],name:"ariaLive",flags:4,mods:0,cat:0,meta:{dom:true},id:436}),
s[437]=a({parent:s[103],name:"ariaModal",flags:4,mods:0,cat:0,meta:{dom:true},id:437}),
s[438]=a({parent:s[103],name:"ariaMultiLine",flags:4,mods:0,cat:0,meta:{dom:true},id:438}),
s[439]=a({parent:s[103],name:"ariaMultiSelectable",flags:4,mods:0,cat:0,meta:{dom:true},id:439}),
s[440]=a({parent:s[103],name:"ariaOrientation",flags:4,mods:0,cat:0,meta:{dom:true},id:440}),
s[441]=a({parent:s[103],name:"ariaPlaceholder",flags:4,mods:0,cat:0,meta:{dom:true},id:441}),
s[442]=a({parent:s[103],name:"ariaPosInSet",flags:4,mods:0,cat:0,meta:{dom:true},id:442}),
s[443]=a({parent:s[103],name:"ariaPressed",flags:4,mods:0,cat:0,meta:{dom:true},id:443}),
s[444]=a({parent:s[103],name:"ariaReadOnly",flags:4,mods:0,cat:0,meta:{dom:true},id:444}),
s[445]=a({parent:s[103],name:"ariaRequired",flags:4,mods:0,cat:0,meta:{dom:true},id:445}),
s[446]=a({parent:s[103],name:"ariaRoleDescription",flags:4,mods:0,cat:0,meta:{dom:true},id:446}),
s[447]=a({parent:s[103],name:"ariaRowCount",flags:4,mods:0,cat:0,meta:{dom:true},id:447}),
s[448]=a({parent:s[103],name:"ariaRowIndex",flags:4,mods:0,cat:0,meta:{dom:true},id:448}),
s[449]=a({parent:s[103],name:"ariaRowSpan",flags:4,mods:0,cat:0,meta:{dom:true},id:449}),
s[450]=a({parent:s[103],name:"ariaSelected",flags:4,mods:0,cat:0,meta:{dom:true},id:450}),
s[451]=a({parent:s[103],name:"ariaSetSize",flags:4,mods:0,cat:0,meta:{dom:true},id:451}),
s[452]=a({parent:s[103],name:"ariaSort",flags:4,mods:0,cat:0,meta:{dom:true},id:452}),
s[453]=a({parent:s[103],name:"ariaValueMax",flags:4,mods:0,cat:0,meta:{dom:true},id:453}),
s[454]=a({parent:s[103],name:"ariaValueMin",flags:4,mods:0,cat:0,meta:{dom:true},id:454}),
s[455]=a({parent:s[103],name:"ariaValueNow",flags:4,mods:0,cat:0,meta:{dom:true},id:455}),
s[456]=a({parent:s[103],name:"ariaValueText",flags:4,mods:0,cat:0,meta:{dom:true},id:456}),
s[457]=a({parent:s[103],name:"animate",flags:8192,mods:0,cat:0,meta:{dom:true},id:457}),
s[458]=a({parent:s[103],name:"getAnimations",flags:8192,mods:0,cat:0,meta:{dom:true},id:458}),
s[459]=a({parent:s[103],name:"after",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:459}),
s[460]=a({parent:s[103],name:"before",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:460}),
s[461]=a({parent:s[103],name:"remove",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes node.</p>\n",dom:true},id:461}),
s[462]=a({parent:s[103],name:"replaceWith",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:462}),
s[463]=a({parent:s[103],name:"innerHTML",flags:4,mods:0,cat:0,meta:{dom:true},id:463}),
s[464]=a({parent:s[103],name:"childElementCount",flags:4,mods:64,cat:0,meta:{dom:true},id:464}),
s[465]=a({parent:s[103],name:"children",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the child elements.</p>\n",dom:true},id:465,valuetype:s[153]}),
s[466]=a({parent:s[103],name:"firstElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first child that is an element, and null otherwise.</p>\n",dom:true},id:466,valuetype:s[103]}),
s[467]=a({parent:s[103],name:"lastElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the last child that is an element, and null otherwise.</p>\n",dom:true},id:467,valuetype:s[103]}),
s[468]=a({parent:s[103],name:"append",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:468}),
s[469]=a({parent:s[103],name:"prepend",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:469}),
s[470]=a({parent:s[103],name:"querySelector",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first element that is a descendant of node that matches selectors.</p>\n",dom:true},id:470}),
s[471]=a({parent:s[103],name:"querySelectorAll",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns all element descendants of node that match selectors.</p>\n",dom:true},id:471}),
s[472]=a({parent:s[103],name:"replaceChildren",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:472}),
s[474]=a({parent:s[1],name:"HTMLSlotElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{dom:true},id:474}),
s[473]=a({parent:s[103],name:"assignedSlot",flags:4,mods:524352,cat:0,meta:{dom:true},id:473,valuetype:s[474]}),
s[475]=a({parent:s[474],name:"name",flags:4,mods:0,cat:0,meta:{dom:true},id:475}),
s[476]=a({parent:s[474],name:"assignedElements",flags:8192,mods:0,cat:0,meta:{dom:true},id:476}),
s[477]=a({parent:s[474],name:"assignedNodes",flags:8192,mods:0,cat:0,meta:{dom:true},id:477}),
s[479]=a({parent:s[478],name:"accessKey",flags:4,mods:0,cat:0,meta:{dom:true},id:479}),
s[480]=a({parent:s[478],name:"accessKeyLabel",flags:4,mods:64,cat:0,meta:{dom:true},id:480}),
s[481]=a({parent:s[478],name:"autocapitalize",flags:4,mods:0,cat:0,meta:{dom:true},id:481}),
s[482]=a({parent:s[478],name:"dir",flags:4,mods:0,cat:0,meta:{dom:true},id:482}),
s[483]=a({parent:s[478],name:"draggable",flags:4,mods:0,cat:0,meta:{dom:true},id:483}),
s[484]=a({parent:s[478],name:"hidden",flags:4,mods:0,cat:0,meta:{dom:true},id:484}),
s[485]=a({parent:s[478],name:"innerText",flags:4,mods:0,cat:0,meta:{dom:true},id:485}),
s[486]=a({parent:s[478],name:"lang",flags:4,mods:0,cat:0,meta:{dom:true},id:486}),
s[487]=a({parent:s[478],name:"offsetHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:487}),
s[488]=a({parent:s[478],name:"offsetLeft",flags:4,mods:64,cat:0,meta:{dom:true},id:488}),
s[489]=a({parent:s[478],name:"offsetParent",flags:4,mods:524352,cat:0,meta:{dom:true},id:489,valuetype:s[103]}),
s[490]=a({parent:s[478],name:"offsetTop",flags:4,mods:64,cat:0,meta:{dom:true},id:490}),
s[491]=a({parent:s[478],name:"offsetWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:491}),
s[492]=a({parent:s[478],name:"outerText",flags:4,mods:0,cat:0,meta:{dom:true},id:492}),
s[493]=a({parent:s[478],name:"spellcheck",flags:4,mods:0,cat:0,meta:{dom:true},id:493}),
s[494]=a({parent:s[478],name:"title",flags:4,mods:0,cat:0,meta:{dom:true},id:494}),
s[495]=a({parent:s[478],name:"translate",flags:4,mods:0,cat:0,meta:{dom:true},id:495}),
s[496]=a({parent:s[478],name:"click",flags:8192,mods:0,cat:0,meta:{dom:true},id:496}),
s[497]=a({parent:s[478],name:"oncopy",flags:4,mods:0,cat:0,meta:{dom:true},id:497}),
s[498]=a({parent:s[478],name:"oncut",flags:4,mods:0,cat:0,meta:{dom:true},id:498}),
s[499]=a({parent:s[478],name:"onpaste",flags:4,mods:0,cat:0,meta:{dom:true},id:499}),
s[501]=a({parent:s[1],name:"CSSStyleDeclaration",flags:65,mods:0,cat:0,meta:{desc:"<p>An object that is a CSS declaration block, and exposes style information and various style-related methods and properties.</p>\n",dom:true},id:501}),
s[500]=a({parent:s[478],name:"style",flags:4,mods:64,cat:0,meta:{dom:true},id:500,valuetype:s[501]}),
s[502]=a({parent:s[478],name:"contentEditable",flags:4,mods:0,cat:0,meta:{dom:true},id:502}),
s[503]=a({parent:s[478],name:"enterKeyHint",flags:4,mods:0,cat:0,meta:{dom:true},id:503}),
s[504]=a({parent:s[478],name:"inputMode",flags:4,mods:0,cat:0,meta:{dom:true},id:504}),
s[505]=a({parent:s[478],name:"isContentEditable",flags:4,mods:64,cat:0,meta:{dom:true},id:505}),
s[507]=a({parent:s[1],name:"DOMStringMap",flags:65,mods:786432,cat:0,meta:{desc:"<p>Used by the dataset HTML attribute to represent data for custom attributes added to elements.</p>\n",dom:true},id:507}),
s[506]=a({parent:s[478],name:"dataset",flags:4,mods:786496,cat:0,meta:{dom:true},id:506,valuetype:s[507]}),
s[508]=a({parent:s[478],name:"nonce",flags:16777220,mods:0,cat:0,meta:{dom:true},id:508}),
s[509]=a({parent:s[478],name:"tabIndex",flags:4,mods:0,cat:0,meta:{dom:true},id:509}),
s[510]=a({parent:s[478],name:"blur",flags:8192,mods:0,cat:0,meta:{dom:true},id:510}),
s[511]=a({parent:s[478],name:"focus",flags:8192,mods:0,cat:0,meta:{dom:true},id:511}),
s[512]=a({parent:s[81],name:"parentNode",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the parent.</p>\n",dom:true},id:512,valuetype:null}),
s[513]=a({parent:s[81],name:"previousSibling",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the previous sibling.</p>\n",dom:true},id:513,valuetype:null}),
s[514]=a({parent:s[81],name:"textContent",flags:4,mods:0,cat:0,meta:{dom:true},id:514}),
s[515]=a({parent:s[81],name:"appendChild",flags:8192,mods:0,cat:0,meta:{dom:true},id:515}),
s[516]=a({parent:s[81],name:"cloneNode",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a copy of node. If deep is true, the copy also includes the node&#39;s descendants.</p>\n",dom:true},id:516}),
s[517]=a({parent:s[81],name:"compareDocumentPosition",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a bitmask indicating the position of other relative to node.</p>\n",dom:true},id:517}),
s[518]=a({parent:s[81],name:"contains",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if other is an inclusive descendant of node, and false otherwise.</p>\n",dom:true},id:518}),
s[519]=a({parent:s[81],name:"getRootNode",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns node&#39;s root.</p>\n",dom:true},id:519}),
s[520]=a({parent:s[81],name:"hasChildNodes",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether node has children.</p>\n",dom:true},id:520}),
s[521]=a({parent:s[81],name:"insertBefore",flags:8192,mods:0,cat:0,meta:{dom:true},id:521}),
s[522]=a({parent:s[81],name:"isDefaultNamespace",flags:8192,mods:0,cat:0,meta:{dom:true},id:522}),
s[523]=a({parent:s[81],name:"isEqualNode",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether node and otherNode have the same properties.</p>\n",dom:true},id:523}),
s[524]=a({parent:s[81],name:"isSameNode",flags:8192,mods:0,cat:0,meta:{dom:true},id:524}),
s[525]=a({parent:s[81],name:"lookupNamespaceURI",flags:8192,mods:0,cat:0,meta:{dom:true},id:525}),
s[526]=a({parent:s[81],name:"lookupPrefix",flags:8192,mods:0,cat:0,meta:{dom:true},id:526}),
s[527]=a({parent:s[81],name:"normalize",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.</p>\n",dom:true},id:527}),
s[528]=a({parent:s[81],name:"removeChild",flags:8192,mods:0,cat:0,meta:{dom:true},id:528}),
s[529]=a({parent:s[81],name:"replaceChild",flags:8192,mods:0,cat:0,meta:{dom:true},id:529}),
s[530]=a({parent:s[81],name:"ATTRIBUTE_NODE",flags:4,mods:131136,cat:0,meta:{dom:true},id:530}),
s[531]=a({parent:s[81],name:"CDATA_SECTION_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a CDATASection node.</p>\n",dom:true},id:531}),
s[532]=a({parent:s[81],name:"COMMENT_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a Comment node.</p>\n",dom:true},id:532}),
s[533]=a({parent:s[81],name:"DOCUMENT_FRAGMENT_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a DocumentFragment node.</p>\n",dom:true},id:533}),
s[534]=a({parent:s[81],name:"DOCUMENT_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a document.</p>\n",dom:true},id:534}),
s[535]=a({parent:s[81],name:"DOCUMENT_POSITION_CONTAINED_BY",flags:4,mods:131136,cat:0,meta:{desc:"<p>Set when other is a descendant of node.</p>\n",dom:true},id:535}),
s[536]=a({parent:s[81],name:"DOCUMENT_POSITION_CONTAINS",flags:4,mods:131136,cat:0,meta:{desc:"<p>Set when other is an ancestor of node.</p>\n",dom:true},id:536}),
s[537]=a({parent:s[81],name:"DOCUMENT_POSITION_DISCONNECTED",flags:4,mods:131136,cat:0,meta:{desc:"<p>Set when node and other are not in the same tree.</p>\n",dom:true},id:537}),
s[538]=a({parent:s[81],name:"DOCUMENT_POSITION_FOLLOWING",flags:4,mods:131136,cat:0,meta:{desc:"<p>Set when other is following node.</p>\n",dom:true},id:538}),
s[539]=a({parent:s[81],name:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",flags:4,mods:131136,cat:0,meta:{dom:true},id:539}),
s[540]=a({parent:s[81],name:"DOCUMENT_POSITION_PRECEDING",flags:4,mods:131136,cat:0,meta:{desc:"<p>Set when other is preceding node.</p>\n",dom:true},id:540}),
s[541]=a({parent:s[81],name:"DOCUMENT_TYPE_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a doctype.</p>\n",dom:true},id:541}),
s[542]=a({parent:s[81],name:"ELEMENT_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is an element.</p>\n",dom:true},id:542}),
s[543]=a({parent:s[81],name:"ENTITY_NODE",flags:4,mods:131136,cat:0,meta:{dom:true},id:543}),
s[544]=a({parent:s[81],name:"ENTITY_REFERENCE_NODE",flags:4,mods:131136,cat:0,meta:{dom:true},id:544}),
s[545]=a({parent:s[81],name:"NOTATION_NODE",flags:4,mods:131136,cat:0,meta:{dom:true},id:545}),
s[546]=a({parent:s[81],name:"PROCESSING_INSTRUCTION_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a ProcessingInstruction node.</p>\n",dom:true},id:546}),
s[547]=a({parent:s[81],name:"TEXT_NODE",flags:4,mods:131136,cat:0,meta:{desc:"<p>node is a Text node.</p>\n",dom:true},id:547}),
s[548]=a({parent:s[81],name:"#context",flags:4,mods:819264,cat:0,meta:{summary:"Proxy to reference data on elements up the tree"},id:548,valuetype:s[365]}),
s[549]=a({parent:s[81],name:"#parent",flags:4,mods:557120,cat:0,meta:{summary:"Reference to the parentNode even before element has been attached"},id:549,valuetype:s[103]}),
s[552]=a({parent:s[1],name:"FontFaceSet",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:552}),
s[551]=a({parent:s[550],name:"fonts",flags:4,mods:64,cat:0,meta:{dom:true},id:551,valuetype:s[552]}),
s[553]=a({parent:s[552],name:"onloading",flags:4,mods:0,cat:0,meta:{dom:true},id:553}),
s[554]=a({parent:s[552],name:"onloadingdone",flags:4,mods:0,cat:0,meta:{dom:true},id:554}),
s[555]=a({parent:s[552],name:"onloadingerror",flags:4,mods:0,cat:0,meta:{dom:true},id:555}),
s[557]=a({parent:s[1],name:"Promise",flags:65,mods:0,cat:0,meta:{desc:"<p>Represents the completion of an asynchronous operation</p>\n"},id:557}),
s[556]=a({parent:s[552],name:"ready",flags:4,mods:64,cat:0,meta:{dom:true},id:556,valuetype:s[557]}),
s[558]=a({parent:s[557],name:"then",flags:8192,mods:0,cat:0,meta:{param:{text:"onrejected",kind:"parameterName"},returns:"A Promise for the completion of which ever callback is executed.",desc:"<p>Attaches callbacks for the resolution and/or rejection of the Promise.</p>\n"},id:558}),
s[559]=a({parent:s[557],name:"catch",flags:8192,mods:0,cat:0,meta:{param:{text:"onrejected",kind:"parameterName"},returns:"A Promise for the completion of the callback.",desc:"<p>Attaches a callback for only the rejection of the Promise.</p>\n"},id:559}),
s[560]=a({parent:s[557],name:"finally",flags:8192,mods:0,cat:0,meta:{param:{text:"onfinally",kind:"parameterName"},returns:"A Promise for the completion of the callback.",desc:"<p>Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\nresolved value cannot be modified from the callback.</p>\n"},id:560}),
s[561]=a({parent:s[552],name:"status",flags:4,mods:64,cat:0,meta:{dom:true},id:561}),
s[562]=a({parent:s[552],name:"check",flags:8192,mods:0,cat:0,meta:{dom:true},id:562}),
s[563]=a({parent:s[552],name:"load",flags:8192,mods:0,cat:0,meta:{dom:true},id:563}),
s[564]=a({parent:s[552],name:"forEach",flags:8192,mods:0,cat:0,meta:{dom:true},id:564}),
s[565]=a({parent:s[552],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:565}),
s[566]=a({parent:s[552],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:566}),
s[568]=a({parent:s[567],name:"URL",flags:4,mods:131136,cat:0,meta:{desc:"<p>Sets or gets the URL for the current document.</p>\n",dom:true},id:568}),
s[569]=a({parent:s[567],name:"body",flags:4,mods:524288,cat:0,meta:{desc:"<p>Specifies the beginning and end of the document body.</p>\n",dom:true},id:569,valuetype:s[478]}),
s[570]=a({parent:s[567],name:"characterSet",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns document&#39;s encoding.</p>\n",dom:true},id:570}),
s[571]=a({parent:s[567],name:"compatMode",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets a value that indicates whether standards-compliant mode is switched on for the object.</p>\n",dom:true},id:571}),
s[572]=a({parent:s[567],name:"contentType",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns document&#39;s content type.</p>\n",dom:true},id:572}),
s[573]=a({parent:s[567],name:"cookie",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can&#39;t be applied to this resource, the empty string will be returned.</p>\n<p>Can be set, to add a new cookie to the element&#39;s set of HTTP cookies.</p>\n<p>If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a &quot;SecurityError&quot; DOMException will be thrown on getting and setting.</p>\n",dom:true},id:573}),
s[574]=a({parent:s[567],name:"currentScript",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.</p>\n<p>Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.</p>\n",dom:true},id:574}),
s[575]=a({parent:s[567],name:"defaultView",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the Window object of the active document.</p>\n",dom:true},id:575}),
s[576]=a({parent:s[567],name:"designMode",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or gets a value that indicates whether the document can be edited.</p>\n",dom:true},id:576}),
s[577]=a({parent:s[567],name:"dir",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a value that indicates the reading order of the object.</p>\n",dom:true},id:577}),
s[579]=a({parent:s[1],name:"DocumentType",inherits:s[81],flags:65,mods:524288,cat:0,meta:{desc:"<p>A Node containing a doctype.</p>\n",dom:true},id:579}),
s[578]=a({parent:s[567],name:"doctype",flags:4,mods:524352,cat:0,meta:{desc:"<p>Gets an object representing the document type declaration associated with the current document.</p>\n",dom:true},id:578,valuetype:s[579]}),
s[580]=a({parent:s[579],name:"name",flags:4,mods:64,cat:0,meta:{dom:true},id:580}),
s[581]=a({parent:s[579],name:"ownerDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the node document. Returns null for documents.</p>\n",dom:true},id:581,valuetype:s[567]}),
s[582]=a({parent:s[579],name:"publicId",flags:4,mods:64,cat:0,meta:{dom:true},id:582}),
s[583]=a({parent:s[579],name:"systemId",flags:4,mods:64,cat:0,meta:{dom:true},id:583}),
s[584]=a({parent:s[579],name:"after",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:584}),
s[585]=a({parent:s[579],name:"before",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:585}),
s[586]=a({parent:s[579],name:"remove",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes node.</p>\n",dom:true},id:586}),
s[587]=a({parent:s[579],name:"replaceWith",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:587}),
s[588]=a({parent:s[567],name:"documentElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Gets a reference to the root node of the document.</p>\n",dom:true},id:588,valuetype:s[478]}),
s[589]=a({parent:s[567],name:"documentURI",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns document&#39;s URL.</p>\n",dom:true},id:589}),
s[590]=a({parent:s[567],name:"domain",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or gets the security domain of the document.</p>\n",dom:true},id:590}),
s[592]=a({parent:s[1],name:"HTMLCollectionOf",inherits:s[150],flags:64,mods:0,cat:0,meta:{},id:592}),
s[591]=a({parent:s[567],name:"embeds",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of all embed objects in the document.</p>\n",dom:true},id:591,valuetype:s[592]}),
s[593]=a({parent:s[592],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Retrieves an object from various collections.</p>\n",dom:true},id:593}),
s[594]=a({parent:s[592],name:"namedItem",flags:8192,mods:0,cat:0,meta:{dom:true},id:594}),
s[595]=a({parent:s[567],name:"forms",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection, in source order, of all form objects in the document.</p>\n",dom:true},id:595,valuetype:s[592]}),
s[596]=a({parent:s[567],name:"fullscreenEnabled",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.</p>\n",dom:true},id:596}),
s[598]=a({parent:s[1],name:"HTMLHeadElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.</p>\n",dom:true},id:598}),
s[597]=a({parent:s[567],name:"head",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the head element.</p>\n",dom:true},id:597,valuetype:s[598]}),
s[599]=a({parent:s[567],name:"hidden",flags:4,mods:64,cat:0,meta:{dom:true},id:599}),
s[600]=a({parent:s[567],name:"images",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection, in source order, of img objects in the document.</p>\n",dom:true},id:600,valuetype:s[592]}),
s[602]=a({parent:s[1],name:"DOMImplementation",flags:65,mods:0,cat:0,meta:{desc:"<p>An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.</p>\n",dom:true},id:602}),
s[601]=a({parent:s[567],name:"implementation",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the implementation object of the current document.</p>\n",dom:true},id:601,valuetype:s[602]}),
s[603]=a({parent:s[602],name:"createDocument",flags:8192,mods:0,cat:0,meta:{dom:true},id:603}),
s[604]=a({parent:s[602],name:"createDocumentType",flags:8192,mods:0,cat:0,meta:{dom:true},id:604}),
s[605]=a({parent:s[602],name:"createHTMLDocument",flags:8192,mods:0,cat:0,meta:{dom:true},id:605}),
s[606]=a({parent:s[567],name:"lastModified",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the date that the page was last modified, if the page supplies one.</p>\n",dom:true},id:606}),
s[607]=a({parent:s[567],name:"links",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of all a objects that specify the href property and all area objects in the document.</p>\n",dom:true},id:607,valuetype:s[592]}),
s[609]=a({parent:s[1],name:"Location",flags:65,mods:0,cat:0,meta:{desc:"<p>The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.</p>\n",dom:true},id:609}),
s[608]=a({parent:s[567],name:"location",flags:98304,mods:0,cat:0,meta:{desc:"<p>Contains information about the current URL.</p>\n",dom:true},id:608,valuetype:s[609]}),
s[611]=a({parent:s[1],name:"DOMStringList",flags:65,mods:0,cat:0,meta:{desc:"<p>A type returned by some APIs which contains a list of DOMString (strings).</p>\n",dom:true},id:611}),
s[610]=a({parent:s[609],name:"ancestorOrigins",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.</p>\n",dom:true},id:610,valuetype:s[611]}),
s[612]=a({parent:s[611],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of strings in strings.</p>\n",dom:true},id:612}),
s[613]=a({parent:s[611],name:"contains",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if strings contains string, and false otherwise.</p>\n",dom:true},id:613}),
s[614]=a({parent:s[611],name:"item",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the string with index index from strings.</p>\n",dom:true},id:614}),
s[615]=a({parent:s[609],name:"hash",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s fragment (includes leading &quot;#&quot; if non-empty).</p>\n<p>Can be set, to navigate to the same URL with a changed fragment (ignores leading &quot;#&quot;).</p>\n",dom:true},id:615}),
s[616]=a({parent:s[609],name:"host",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s host and port (if different from the default port for the scheme).</p>\n<p>Can be set, to navigate to the same URL with a changed host and port.</p>\n",dom:true},id:616}),
s[617]=a({parent:s[609],name:"hostname",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s host.</p>\n<p>Can be set, to navigate to the same URL with a changed host.</p>\n",dom:true},id:617}),
s[618]=a({parent:s[609],name:"href",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL.</p>\n<p>Can be set, to navigate to the given URL.</p>\n",dom:true},id:618}),
s[619]=a({parent:s[609],name:"origin",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s origin.</p>\n",dom:true},id:619}),
s[620]=a({parent:s[609],name:"pathname",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s path.</p>\n<p>Can be set, to navigate to the same URL with a changed path.</p>\n",dom:true},id:620}),
s[621]=a({parent:s[609],name:"port",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s port.</p>\n<p>Can be set, to navigate to the same URL with a changed port.</p>\n",dom:true},id:621}),
s[622]=a({parent:s[609],name:"protocol",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s scheme.</p>\n<p>Can be set, to navigate to the same URL with a changed scheme.</p>\n",dom:true},id:622}),
s[623]=a({parent:s[609],name:"search",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the Location object&#39;s URL&#39;s query (includes leading &quot;?&quot; if non-empty).</p>\n<p>Can be set, to navigate to the same URL with a changed query (ignores leading &quot;?&quot;).</p>\n",dom:true},id:623}),
s[624]=a({parent:s[609],name:"assign",flags:8192,mods:0,cat:0,meta:{desc:"<p>Navigates to the given URL.</p>\n",dom:true},id:624}),
s[625]=a({parent:s[609],name:"reload",flags:8192,mods:0,cat:0,meta:{desc:"<p>Reloads the current page.</p>\n",dom:true},id:625}),
s[626]=a({parent:s[609],name:"replace",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the current page from the session history and navigates to the given URL.</p>\n",dom:true},id:626}),
s[627]=a({parent:s[567],name:"onfullscreenchange",flags:4,mods:0,cat:0,meta:{dom:true},id:627}),
s[628]=a({parent:s[567],name:"onfullscreenerror",flags:4,mods:0,cat:0,meta:{dom:true},id:628}),
s[629]=a({parent:s[567],name:"onpointerlockchange",flags:4,mods:0,cat:0,meta:{dom:true},id:629}),
s[630]=a({parent:s[567],name:"onpointerlockerror",flags:4,mods:0,cat:0,meta:{dom:true},id:630}),
s[631]=a({parent:s[567],name:"onreadystatechange",flags:4,mods:0,cat:0,meta:{param:{text:"ev",kind:"parameterName"},desc:"<p>Fires when the state of the object has changed.</p>\n",dom:true},id:631}),
s[632]=a({parent:s[567],name:"onvisibilitychange",flags:4,mods:0,cat:0,meta:{dom:true},id:632}),
s[633]=a({parent:s[567],name:"ownerDocument",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the node document. Returns null for documents.</p>\n",dom:true},id:633}),
s[634]=a({parent:s[567],name:"pictureInPictureEnabled",flags:4,mods:64,cat:0,meta:{dom:true},id:634}),
s[635]=a({parent:s[567],name:"plugins",flags:4,mods:64,cat:0,meta:{desc:"<p>Return an HTMLCollection of the embed elements in the Document.</p>\n",dom:true},id:635,valuetype:s[592]}),
s[636]=a({parent:s[567],name:"readyState",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a value that indicates the current state of the object.</p>\n",dom:true},id:636}),
s[637]=a({parent:s[567],name:"referrer",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the URL of the location that referred the user to the current page.</p>\n",dom:true},id:637}),
s[638]=a({parent:s[567],name:"scripts",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of all script objects in the document.</p>\n",dom:true},id:638,valuetype:s[592]}),
s[639]=a({parent:s[567],name:"scrollingElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:639,valuetype:s[103]}),
s[641]=a({parent:s[1],name:"AnimationTimeline",flags:65,mods:0,cat:0,meta:{dom:true},id:641}),
s[643]=a({parent:s[1],name:"DocumentTimeline",inherits:s[641],flags:65,mods:0,cat:0,meta:{dom:true},id:643}),
s[640]=a({parent:s[567],name:"timeline",flags:4,mods:64,cat:0,meta:{dom:true},id:640,valuetype:s[643]}),
s[642]=a({parent:s[641],name:"currentTime",flags:4,mods:64,cat:0,meta:{dom:true},id:642}),
s[644]=a({parent:s[567],name:"title",flags:4,mods:0,cat:0,meta:{desc:"<p>Contains the title of the document.</p>\n",dom:true},id:644}),
s[645]=a({parent:s[567],name:"visibilityState",flags:4,mods:64,cat:0,meta:{dom:true},id:645}),
s[646]=a({parent:s[567],name:"adoptNode",flags:8192,mods:0,cat:0,meta:{desc:"<p>Moves node from another document and returns it.</p>\n<p>If node is a document, throws a &quot;NotSupportedError&quot; DOMException or, if node is a shadow root, throws a &quot;HierarchyRequestError&quot; DOMException.</p>\n",dom:true},id:646}),
s[647]=a({parent:s[567],name:"close",flags:8192,mods:0,cat:0,meta:{desc:"<p>Closes an output stream and forces the sent data to display.</p>\n",dom:true},id:647}),
s[648]=a({parent:s[567],name:"createAttribute",flags:8192,mods:0,cat:0,meta:{param:{text:"name",kind:"parameterName"},desc:"<p>Creates an attribute object with a specified name.</p>\n",dom:true},id:648}),
s[649]=a({parent:s[567],name:"createAttributeNS",flags:8192,mods:0,cat:0,meta:{dom:true},id:649}),
s[650]=a({parent:s[567],name:"createCDATASection",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a CDATASection node whose data is data.</p>\n",dom:true},id:650}),
s[651]=a({parent:s[567],name:"createComment",flags:8192,mods:0,cat:0,meta:{param:{text:"data",kind:"parameterName"},desc:"<p>Creates a comment object with the specified data.</p>\n",dom:true},id:651}),
s[652]=a({parent:s[567],name:"createDocumentFragment",flags:8192,mods:0,cat:0,meta:{desc:"<p>Creates a new document.</p>\n",dom:true},id:652}),
s[653]=a({parent:s[567],name:"createElementNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an element with namespace namespace. Its namespace prefix will be everything before &quot;:&quot; (U+003E) in qualifiedName or null. Its local name will be everything after &quot;:&quot; (U+003E) in qualifiedName or qualifiedName.</p>\n<p>If localName does not match the Name production an &quot;InvalidCharacterError&quot; DOMException will be thrown.</p>\n<p>If one of the following conditions is true a &quot;NamespaceError&quot; DOMException will be thrown:</p>\n<p>localName does not match the QName production.\nNamespace prefix is not null and namespace is the empty string.\nNamespace prefix is &quot;xml&quot; and namespace is not the XML namespace.\nqualifiedName or namespace prefix is &quot;xmlns&quot; and namespace is not the XMLNS namespace.\nnamespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is &quot;xmlns&quot;.</p>\n<p>When supplied, options&#39;s is can be used to create a customized built-in element.</p>\n",dom:true},id:653}),
s[654]=a({parent:s[567],name:"createEvent",flags:8192,mods:0,cat:0,meta:{dom:true},id:654}),
s[655]=a({parent:s[567],name:"createNodeIterator",flags:8192,mods:0,cat:0,meta:{param:{text:"filter",kind:"parameterName"},desc:"<p>Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.</p>\n",dom:true},id:655}),
s[656]=a({parent:s[567],name:"createProcessingInstruction",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an &quot;InvalidCharacterError&quot; DOMException will be thrown. If data contains &quot;?&gt;&quot; an &quot;InvalidCharacterError&quot; DOMException will be thrown.</p>\n",dom:true},id:656}),
s[657]=a({parent:s[567],name:"createRange",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an empty range object that has both of its boundary points positioned at the beginning of the document.</p>\n",dom:true},id:657}),
s[658]=a({parent:s[567],name:"createTextNode",flags:8192,mods:0,cat:0,meta:{param:{text:"data",kind:"parameterName"},desc:"<p>Creates a text string from the specified value.</p>\n",dom:true},id:658}),
s[659]=a({parent:s[567],name:"createTreeWalker",flags:8192,mods:0,cat:0,meta:{param:{text:"filter",kind:"parameterName"},desc:"<p>Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.</p>\n",dom:true},id:659}),
s[660]=a({parent:s[567],name:"elementFromPoint",flags:8192,mods:0,cat:0,meta:{param:{text:"y",kind:"parameterName"},desc:"<p>Returns the element for the specified x coordinate and the specified y coordinate.</p>\n",dom:true},id:660}),
s[661]=a({parent:s[567],name:"elementsFromPoint",flags:8192,mods:0,cat:0,meta:{dom:true},id:661}),
s[662]=a({parent:s[567],name:"exitFullscreen",flags:8192,mods:0,cat:0,meta:{desc:"<p>Stops document&#39;s fullscreen element from being displayed fullscreen and resolves promise when done.</p>\n",dom:true},id:662}),
s[663]=a({parent:s[567],name:"exitPictureInPicture",flags:8192,mods:0,cat:0,meta:{dom:true},id:663}),
s[664]=a({parent:s[567],name:"exitPointerLock",flags:8192,mods:0,cat:0,meta:{dom:true},id:664}),
s[665]=a({parent:s[567],name:"getElementById",flags:8192,mods:0,cat:0,meta:{param:{text:"elementId",kind:"parameterName"},desc:"<p>Returns a reference to the first object with the specified value of the ID attribute.</p>\n",dom:true},id:665}),
s[666]=a({parent:s[567],name:"getElementsByClassName",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.</p>\n",dom:true},id:666}),
s[667]=a({parent:s[567],name:"getElementsByName",flags:8192,mods:0,cat:0,meta:{param:{text:"elementName",kind:"parameterName"},desc:"<p>Gets a collection of objects based on the value of the NAME or ID attribute.</p>\n",dom:true},id:667}),
s[668]=a({parent:s[567],name:"getElementsByTagName",flags:8192,mods:0,cat:0,meta:{param:{text:"name",kind:"parameterName"},desc:"<p>Retrieves a collection of objects based on the specified element name.</p>\n",dom:true},id:668}),
s[669]=a({parent:s[567],name:"getElementsByTagNameNS",flags:8192,mods:0,cat:0,meta:{desc:"<p>If namespace and localName are &quot;*&quot; returns a HTMLCollection of all descendant elements.</p>\n<p>If only namespace is &quot;*&quot; returns a HTMLCollection of all descendant elements whose local name is localName.</p>\n<p>If only localName is &quot;*&quot; returns a HTMLCollection of all descendant elements whose namespace is namespace.</p>\n<p>Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.</p>\n",dom:true},id:669}),
s[670]=a({parent:s[567],name:"getSelection",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.</p>\n",dom:true},id:670}),
s[671]=a({parent:s[567],name:"hasFocus",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets a value indicating whether the object currently has focus.</p>\n",dom:true},id:671}),
s[672]=a({parent:s[567],name:"hasStorageAccess",flags:8192,mods:0,cat:0,meta:{dom:true},id:672}),
s[673]=a({parent:s[567],name:"importNode",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a copy of node. If deep is true, the copy also includes the node&#39;s descendants.</p>\n<p>If node is a document or a shadow root, throws a &quot;NotSupportedError&quot; DOMException.</p>\n",dom:true},id:673}),
s[674]=a({parent:s[567],name:"open",flags:8192,mods:0,cat:0,meta:{param:{text:"replace",kind:"parameterName"},desc:"<p>Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.</p>\n",dom:true},id:674}),
s[675]=a({parent:s[567],name:"queryCommandIndeterm",flags:8192,mods:0,cat:0,meta:{param:{text:"commandId",kind:"parameterName"},desc:"<p>Returns a Boolean value that indicates whether the specified command is in the indeterminate state.</p>\n",dom:true},id:675}),
s[676]=a({parent:s[567],name:"queryCommandValue",flags:8192,mods:0,cat:0,meta:{param:{text:"commandId",kind:"parameterName"},desc:"<p>Returns the current value of the document, range, or current selection for the given command.</p>\n",dom:true},id:676}),
s[677]=a({parent:s[567],name:"requestStorageAccess",flags:8192,mods:0,cat:0,meta:{dom:true},id:677}),
s[678]=a({parent:s[567],name:"write",flags:8192,mods:0,cat:0,meta:{param:{text:"content",kind:"parameterName"},desc:"<p>Writes one or more HTML expressions to a document in the specified window.</p>\n",dom:true},id:678}),
s[679]=a({parent:s[567],name:"writeln",flags:8192,mods:0,cat:0,meta:{param:{text:"content",kind:"parameterName"},desc:"<p>Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.</p>\n",dom:true},id:679}),
s[680]=a({parent:s[567],name:"oncopy",flags:4,mods:0,cat:0,meta:{dom:true},id:680}),
s[681]=a({parent:s[567],name:"oncut",flags:4,mods:0,cat:0,meta:{dom:true},id:681}),
s[682]=a({parent:s[567],name:"onpaste",flags:4,mods:0,cat:0,meta:{dom:true},id:682}),
s[683]=a({parent:s[567],name:"activeElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.</p>\n<p>For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe&#39;s node document.</p>\n<p>Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that&#39;s located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.</p>\n",dom:true},id:683,valuetype:s[103]}),
s[684]=a({parent:s[567],name:"fullscreenElement",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns document&#39;s fullscreen element.</p>\n",dom:true},id:684,valuetype:s[103]}),
s[685]=a({parent:s[567],name:"pictureInPictureElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:685,valuetype:s[103]}),
s[686]=a({parent:s[567],name:"pointerLockElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:686,valuetype:s[103]}),
s[687]=a({parent:s[567],name:"styleSheets",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.</p>\n",dom:true},id:687,valuetype:s[171]}),
s[688]=a({parent:s[567],name:"getAnimations",flags:8192,mods:0,cat:0,meta:{dom:true},id:688}),
s[689]=a({parent:s[567],name:"childElementCount",flags:4,mods:64,cat:0,meta:{dom:true},id:689}),
s[690]=a({parent:s[567],name:"children",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the child elements.</p>\n",dom:true},id:690,valuetype:s[153]}),
s[691]=a({parent:s[567],name:"firstElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the first child that is an element, and null otherwise.</p>\n",dom:true},id:691,valuetype:s[103]}),
s[692]=a({parent:s[567],name:"lastElementChild",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the last child that is an element, and null otherwise.</p>\n",dom:true},id:692,valuetype:s[103]}),
s[693]=a({parent:s[567],name:"append",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:693}),
s[694]=a({parent:s[567],name:"prepend",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:694}),
s[695]=a({parent:s[567],name:"querySelector",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first element that is a descendant of node that matches selectors.</p>\n",dom:true},id:695}),
s[696]=a({parent:s[567],name:"querySelectorAll",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns all element descendants of node that match selectors.</p>\n",dom:true},id:696}),
s[697]=a({parent:s[567],name:"replaceChildren",flags:8192,mods:0,cat:0,meta:{desc:"<p>Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.</p>\n<p>Throws a &quot;HierarchyRequestError&quot; DOMException if the constraints of the node tree are violated.</p>\n",dom:true},id:697}),
s[698]=a({parent:s[567],name:"createExpression",flags:8192,mods:0,cat:0,meta:{dom:true},id:698}),
s[699]=a({parent:s[567],name:"createNSResolver",flags:8192,mods:0,cat:0,meta:{dom:true},id:699}),
s[700]=a({parent:s[567],name:"evaluate",flags:8192,mods:0,cat:0,meta:{dom:true},id:700}),
s[701]=a({parent:s[71],name:"frameElement",flags:4,mods:524352,cat:0,meta:{dom:true},id:701,valuetype:s[103]}),
s[702]=a({parent:s[71],name:"frames",flags:4,mods:64,cat:0,meta:{dom:true},id:702,valuetype:s[71]}),
s[704]=a({parent:s[1],name:"History",flags:65,mods:0,cat:0,meta:{desc:"<p>Allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</p>\n",dom:true},id:704}),
s[703]=a({parent:s[71],name:"history",flags:4,mods:64,cat:0,meta:{dom:true},id:703,valuetype:s[704]}),
s[705]=a({parent:s[704],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:705}),
s[706]=a({parent:s[704],name:"scrollRestoration",flags:4,mods:0,cat:0,meta:{dom:true},id:706}),
s[707]=a({parent:s[704],name:"state",flags:4,mods:64,cat:0,meta:{dom:true},id:707}),
s[708]=a({parent:s[704],name:"back",flags:8192,mods:0,cat:0,meta:{dom:true},id:708}),
s[709]=a({parent:s[704],name:"forward",flags:8192,mods:0,cat:0,meta:{dom:true},id:709}),
s[710]=a({parent:s[704],name:"go",flags:8192,mods:0,cat:0,meta:{dom:true},id:710}),
s[711]=a({parent:s[704],name:"pushState",flags:8192,mods:0,cat:0,meta:{dom:true},id:711}),
s[712]=a({parent:s[704],name:"replaceState",flags:8192,mods:0,cat:0,meta:{dom:true},id:712}),
s[713]=a({parent:s[71],name:"innerHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:713}),
s[714]=a({parent:s[71],name:"innerWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:714}),
s[715]=a({parent:s[71],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:715}),
s[716]=a({parent:s[71],name:"location",flags:98304,mods:0,cat:0,meta:{dom:true},id:716,valuetype:s[609]}),
s[718]=a({parent:s[1],name:"BarProp",flags:65,mods:0,cat:0,meta:{dom:true},id:718}),
s[717]=a({parent:s[71],name:"locationbar",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the location bar is visible; otherwise, returns false.</p>\n",dom:true},id:717,valuetype:s[718]}),
s[719]=a({parent:s[718],name:"visible",flags:4,mods:64,cat:0,meta:{dom:true},id:719}),
s[720]=a({parent:s[71],name:"menubar",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the menu bar is visible; otherwise, returns false.</p>\n",dom:true},id:720,valuetype:s[718]}),
s[721]=a({parent:s[71],name:"name",flags:4,mods:0,cat:0,meta:{dom:true},id:721}),
s[723]=a({parent:s[1],name:"Navigator",flags:65,mods:0,cat:0,meta:{desc:"<p>The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.</p>\n",dom:true},id:723}),
s[722]=a({parent:s[71],name:"navigator",flags:4,mods:64,cat:0,meta:{dom:true},id:722,valuetype:s[723]}),
s[725]=a({parent:s[1],name:"Clipboard",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:725}),
s[724]=a({parent:s[723],name:"clipboard",flags:4,mods:64,cat:0,meta:{dom:true},id:724,valuetype:s[725]}),
s[726]=a({parent:s[725],name:"read",flags:8192,mods:0,cat:0,meta:{dom:true},id:726}),
s[727]=a({parent:s[725],name:"readText",flags:8192,mods:0,cat:0,meta:{dom:true},id:727}),
s[728]=a({parent:s[725],name:"write",flags:8192,mods:0,cat:0,meta:{dom:true},id:728}),
s[729]=a({parent:s[725],name:"writeText",flags:8192,mods:0,cat:0,meta:{dom:true},id:729}),
s[731]=a({parent:s[1],name:"CredentialsContainer",flags:65,mods:0,cat:0,meta:{dom:true},id:731}),
s[730]=a({parent:s[723],name:"credentials",flags:4,mods:64,cat:0,meta:{dom:true},id:730,valuetype:s[731]}),
s[732]=a({parent:s[731],name:"create",flags:8192,mods:0,cat:0,meta:{dom:true},id:732}),
s[733]=a({parent:s[731],name:"get",flags:8192,mods:0,cat:0,meta:{dom:true},id:733}),
s[734]=a({parent:s[731],name:"preventSilentAccess",flags:8192,mods:0,cat:0,meta:{dom:true},id:734}),
s[735]=a({parent:s[731],name:"store",flags:8192,mods:0,cat:0,meta:{dom:true},id:735}),
s[736]=a({parent:s[723],name:"doNotTrack",flags:4,mods:64,cat:0,meta:{dom:true},id:736}),
s[738]=a({parent:s[1],name:"Geolocation",flags:65,mods:0,cat:0,meta:{desc:"<p>An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user&#39;s location.</p>\n",dom:true},id:738}),
s[737]=a({parent:s[723],name:"geolocation",flags:4,mods:64,cat:0,meta:{dom:true},id:737,valuetype:s[738]}),
s[739]=a({parent:s[738],name:"clearWatch",flags:8192,mods:0,cat:0,meta:{dom:true},id:739}),
s[740]=a({parent:s[738],name:"getCurrentPosition",flags:8192,mods:0,cat:0,meta:{dom:true},id:740}),
s[741]=a({parent:s[738],name:"watchPosition",flags:8192,mods:0,cat:0,meta:{dom:true},id:741}),
s[742]=a({parent:s[723],name:"maxTouchPoints",flags:4,mods:64,cat:0,meta:{dom:true},id:742}),
s[744]=a({parent:s[1],name:"MediaCapabilities",flags:65,mods:0,cat:0,meta:{dom:true},id:744}),
s[743]=a({parent:s[723],name:"mediaCapabilities",flags:4,mods:64,cat:0,meta:{dom:true},id:743,valuetype:s[744]}),
s[745]=a({parent:s[744],name:"decodingInfo",flags:8192,mods:0,cat:0,meta:{dom:true},id:745}),
s[746]=a({parent:s[744],name:"encodingInfo",flags:8192,mods:0,cat:0,meta:{dom:true},id:746}),
s[748]=a({parent:s[1],name:"MediaDevices",inherits:s[8],flags:65,mods:0,cat:0,meta:{desc:"<p>Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.</p>\n",dom:true},id:748}),
s[747]=a({parent:s[723],name:"mediaDevices",flags:4,mods:64,cat:0,meta:{dom:true},id:747,valuetype:s[748]}),
s[749]=a({parent:s[748],name:"ondevicechange",flags:4,mods:0,cat:0,meta:{dom:true},id:749}),
s[750]=a({parent:s[748],name:"enumerateDevices",flags:8192,mods:0,cat:0,meta:{dom:true},id:750}),
s[751]=a({parent:s[748],name:"getDisplayMedia",flags:8192,mods:0,cat:0,meta:{dom:true},id:751}),
s[752]=a({parent:s[748],name:"getSupportedConstraints",flags:8192,mods:0,cat:0,meta:{dom:true},id:752}),
s[753]=a({parent:s[748],name:"getUserMedia",flags:8192,mods:0,cat:0,meta:{dom:true},id:753}),
s[754]=a({parent:s[748],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:754}),
s[755]=a({parent:s[748],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:755}),
s[757]=a({parent:s[1],name:"MediaSession",flags:65,mods:0,cat:0,meta:{dom:true},id:757}),
s[756]=a({parent:s[723],name:"mediaSession",flags:4,mods:64,cat:0,meta:{dom:true},id:756,valuetype:s[757]}),
s[759]=a({parent:s[1],name:"MediaMetadata",flags:65,mods:0,cat:0,meta:{dom:true},id:759}),
s[758]=a({parent:s[757],name:"metadata",flags:4,mods:0,cat:0,meta:{dom:true},id:758,valuetype:s[759]}),
s[760]=a({parent:s[759],name:"album",flags:4,mods:0,cat:0,meta:{dom:true},id:760}),
s[761]=a({parent:s[759],name:"artist",flags:4,mods:0,cat:0,meta:{dom:true},id:761}),
s[762]=a({parent:s[759],name:"artwork",flags:4,mods:0,cat:0,meta:{dom:true},id:762,valuetype:s[284]}),
s[763]=a({parent:s[759],name:"title",flags:4,mods:0,cat:0,meta:{dom:true},id:763}),
s[764]=a({parent:s[757],name:"playbackState",flags:4,mods:0,cat:0,meta:{dom:true},id:764}),
s[765]=a({parent:s[757],name:"setActionHandler",flags:8192,mods:0,cat:0,meta:{dom:true},id:765}),
s[766]=a({parent:s[757],name:"setPositionState",flags:8192,mods:0,cat:0,meta:{dom:true},id:766}),
s[768]=a({parent:s[1],name:"Permissions",flags:65,mods:0,cat:0,meta:{dom:true},id:768}),
s[767]=a({parent:s[723],name:"permissions",flags:4,mods:64,cat:0,meta:{dom:true},id:767,valuetype:s[768]}),
s[769]=a({parent:s[768],name:"query",flags:8192,mods:0,cat:0,meta:{dom:true},id:769}),
s[770]=a({parent:s[723],name:"pointerEnabled",flags:4,mods:64,cat:0,meta:{dom:true},id:770}),
s[772]=a({parent:s[1],name:"ServiceWorkerContainer",inherits:s[8],flags:65,mods:0,cat:0,meta:{desc:"<p>The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.</p>\n",dom:true},id:772}),
s[771]=a({parent:s[723],name:"serviceWorker",flags:4,mods:64,cat:0,meta:{dom:true},id:771,valuetype:s[772]}),
s[774]=a({parent:s[1],name:"AbstractWorker",flags:64,mods:0,cat:0,meta:{},id:774}),
s[778]=a({parent:s[1],name:"ServiceWorker",inherits:s[8],implements:[s[774]],flags:65,mods:0,cat:0,meta:{desc:"<p>This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.</p>\n",dom:true},id:778}),
s[773]=a({parent:s[772],name:"controller",flags:4,mods:64,cat:0,meta:{dom:true},id:773,valuetype:s[778]}),
s[775]=a({parent:s[774],name:"onerror",flags:4,mods:0,cat:0,meta:{dom:true},id:775}),
s[776]=a({parent:s[774],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{dom:true},id:776}),
s[777]=a({parent:s[774],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{dom:true},id:777}),
s[779]=a({parent:s[778],name:"onstatechange",flags:4,mods:0,cat:0,meta:{dom:true},id:779}),
s[780]=a({parent:s[778],name:"scriptURL",flags:4,mods:64,cat:0,meta:{dom:true},id:780}),
s[781]=a({parent:s[778],name:"state",flags:4,mods:64,cat:0,meta:{dom:true},id:781}),
s[782]=a({parent:s[778],name:"postMessage",flags:8192,mods:0,cat:0,meta:{dom:true},id:782}),
s[783]=a({parent:s[778],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:783}),
s[784]=a({parent:s[778],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:784}),
s[785]=a({parent:s[772],name:"oncontrollerchange",flags:4,mods:0,cat:0,meta:{dom:true},id:785}),
s[786]=a({parent:s[772],name:"onmessage",flags:4,mods:0,cat:0,meta:{dom:true},id:786}),
s[787]=a({parent:s[772],name:"onmessageerror",flags:4,mods:0,cat:0,meta:{dom:true},id:787}),
s[788]=a({parent:s[772],name:"ready",flags:4,mods:64,cat:0,meta:{dom:true},id:788,valuetype:s[557]}),
s[789]=a({parent:s[772],name:"getRegistration",flags:8192,mods:0,cat:0,meta:{dom:true},id:789}),
s[790]=a({parent:s[772],name:"getRegistrations",flags:8192,mods:0,cat:0,meta:{dom:true},id:790}),
s[791]=a({parent:s[772],name:"register",flags:8192,mods:0,cat:0,meta:{dom:true},id:791}),
s[792]=a({parent:s[772],name:"startMessages",flags:8192,mods:0,cat:0,meta:{dom:true},id:792}),
s[793]=a({parent:s[772],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:793}),
s[794]=a({parent:s[772],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:794}),
s[795]=a({parent:s[723],name:"getGamepads",flags:8192,mods:0,cat:0,meta:{dom:true},id:795}),
s[796]=a({parent:s[723],name:"requestMediaKeySystemAccess",flags:8192,mods:0,cat:0,meta:{dom:true},id:796}),
s[797]=a({parent:s[723],name:"sendBeacon",flags:8192,mods:0,cat:0,meta:{dom:true},id:797}),
s[798]=a({parent:s[723],name:"share",flags:8192,mods:0,cat:0,meta:{dom:true},id:798}),
s[799]=a({parent:s[723],name:"vibrate",flags:8192,mods:0,cat:0,meta:{dom:true},id:799}),
s[800]=a({parent:s[723],name:"webdriver",flags:4,mods:64,cat:0,meta:{dom:true},id:800}),
s[801]=a({parent:s[723],name:"hardwareConcurrency",flags:4,mods:64,cat:0,meta:{dom:true},id:801}),
s[802]=a({parent:s[723],name:"registerProtocolHandler",flags:8192,mods:0,cat:0,meta:{dom:true},id:802}),
s[803]=a({parent:s[723],name:"cookieEnabled",flags:4,mods:64,cat:0,meta:{dom:true},id:803}),
s[804]=a({parent:s[723],name:"userAgent",flags:4,mods:64,cat:0,meta:{dom:true},id:804}),
s[805]=a({parent:s[723],name:"vendor",flags:4,mods:64,cat:0,meta:{dom:true},id:805}),
s[806]=a({parent:s[723],name:"language",flags:4,mods:64,cat:0,meta:{dom:true},id:806}),
s[807]=a({parent:s[723],name:"languages",flags:4,mods:64,cat:0,meta:{dom:true},id:807,valuetype:s[284]}),
s[809]=a({parent:s[1],name:"NetworkInformation",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:809}),
s[808]=a({parent:s[723],name:"connection",flags:4,mods:64,cat:0,meta:{dom:true},id:808,valuetype:s[809]}),
s[810]=a({parent:s[809],name:"type",flags:4,mods:64,cat:0,meta:{dom:true},id:810}),
s[811]=a({parent:s[723],name:"onLine",flags:4,mods:64,cat:0,meta:{dom:true},id:811}),
s[813]=a({parent:s[1],name:"StorageManager",flags:65,mods:0,cat:0,meta:{dom:true},id:813}),
s[812]=a({parent:s[723],name:"storage",flags:4,mods:64,cat:0,meta:{dom:true},id:812,valuetype:s[813]}),
s[814]=a({parent:s[813],name:"estimate",flags:8192,mods:0,cat:0,meta:{dom:true},id:814}),
s[815]=a({parent:s[813],name:"persist",flags:8192,mods:0,cat:0,meta:{dom:true},id:815}),
s[816]=a({parent:s[813],name:"persisted",flags:8192,mods:0,cat:0,meta:{dom:true},id:816}),
s[817]=a({parent:s[71],name:"ondevicemotion",flags:4,mods:0,cat:0,meta:{dom:true},id:817}),
s[818]=a({parent:s[71],name:"ondeviceorientation",flags:4,mods:0,cat:0,meta:{dom:true},id:818}),
s[819]=a({parent:s[71],name:"opener",flags:4,mods:0,cat:0,meta:{dom:true},id:819}),
s[820]=a({parent:s[71],name:"outerHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:820}),
s[821]=a({parent:s[71],name:"outerWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:821}),
s[822]=a({parent:s[71],name:"parent",flags:4,mods:64,cat:0,meta:{desc:"<p>Refers to either the parent WindowProxy, or itself. It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.</p>\n",dom:true},id:822,valuetype:s[71]}),
s[823]=a({parent:s[71],name:"personalbar",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the personal bar is visible; otherwise, returns false.</p>\n",dom:true},id:823,valuetype:s[718]}),
s[825]=a({parent:s[1],name:"Screen",flags:65,mods:0,cat:0,meta:{desc:"<p>A screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</p>\n",dom:true},id:825}),
s[824]=a({parent:s[71],name:"screen",flags:4,mods:64,cat:0,meta:{dom:true},id:824,valuetype:s[825]}),
s[826]=a({parent:s[825],name:"availHeight",flags:4,mods:64,cat:0,meta:{dom:true},id:826}),
s[827]=a({parent:s[825],name:"availWidth",flags:4,mods:64,cat:0,meta:{dom:true},id:827}),
s[828]=a({parent:s[825],name:"colorDepth",flags:4,mods:64,cat:0,meta:{dom:true},id:828}),
s[829]=a({parent:s[825],name:"height",flags:4,mods:64,cat:0,meta:{dom:true},id:829}),
s[831]=a({parent:s[1],name:"ScreenOrientation",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:831}),
s[830]=a({parent:s[825],name:"orientation",flags:4,mods:64,cat:0,meta:{dom:true},id:830,valuetype:s[831]}),
s[832]=a({parent:s[831],name:"angle",flags:4,mods:64,cat:0,meta:{dom:true},id:832}),
s[833]=a({parent:s[831],name:"onchange",flags:4,mods:0,cat:0,meta:{dom:true},id:833}),
s[834]=a({parent:s[831],name:"type",flags:4,mods:64,cat:0,meta:{dom:true},id:834}),
s[835]=a({parent:s[831],name:"lock",flags:8192,mods:0,cat:0,meta:{dom:true},id:835}),
s[836]=a({parent:s[831],name:"unlock",flags:8192,mods:0,cat:0,meta:{dom:true},id:836}),
s[837]=a({parent:s[831],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:837}),
s[838]=a({parent:s[831],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:838}),
s[839]=a({parent:s[825],name:"pixelDepth",flags:4,mods:64,cat:0,meta:{dom:true},id:839}),
s[840]=a({parent:s[825],name:"width",flags:4,mods:64,cat:0,meta:{dom:true},id:840}),
s[841]=a({parent:s[71],name:"screenLeft",flags:4,mods:64,cat:0,meta:{dom:true},id:841}),
s[842]=a({parent:s[71],name:"screenTop",flags:4,mods:64,cat:0,meta:{dom:true},id:842}),
s[843]=a({parent:s[71],name:"screenX",flags:4,mods:64,cat:0,meta:{dom:true},id:843}),
s[844]=a({parent:s[71],name:"screenY",flags:4,mods:64,cat:0,meta:{dom:true},id:844}),
s[845]=a({parent:s[71],name:"scrollX",flags:4,mods:64,cat:0,meta:{dom:true},id:845}),
s[846]=a({parent:s[71],name:"scrollY",flags:4,mods:64,cat:0,meta:{dom:true},id:846}),
s[847]=a({parent:s[71],name:"scrollbars",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the scrollbars are visible; otherwise, returns false.</p>\n",dom:true},id:847,valuetype:s[718]}),
s[848]=a({parent:s[71],name:"self",flags:4,mods:64,cat:0,meta:{dom:true},id:848}),
s[850]=a({parent:s[1],name:"SpeechSynthesis",inherits:s[8],flags:65,mods:0,cat:0,meta:{desc:"<p>This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.</p>\n",dom:true},id:850}),
s[849]=a({parent:s[71],name:"speechSynthesis",flags:4,mods:64,cat:0,meta:{dom:true},id:849,valuetype:s[850]}),
s[851]=a({parent:s[850],name:"onvoiceschanged",flags:4,mods:0,cat:0,meta:{dom:true},id:851}),
s[852]=a({parent:s[850],name:"paused",flags:4,mods:64,cat:0,meta:{dom:true},id:852}),
s[853]=a({parent:s[850],name:"pending",flags:4,mods:64,cat:0,meta:{dom:true},id:853}),
s[854]=a({parent:s[850],name:"speaking",flags:4,mods:64,cat:0,meta:{dom:true},id:854}),
s[855]=a({parent:s[850],name:"cancel",flags:8192,mods:0,cat:0,meta:{dom:true},id:855}),
s[856]=a({parent:s[850],name:"getVoices",flags:8192,mods:0,cat:0,meta:{dom:true},id:856}),
s[857]=a({parent:s[850],name:"pause",flags:8192,mods:0,cat:0,meta:{dom:true},id:857}),
s[858]=a({parent:s[850],name:"resume",flags:8192,mods:0,cat:0,meta:{dom:true},id:858}),
s[859]=a({parent:s[850],name:"speak",flags:8192,mods:0,cat:0,meta:{dom:true},id:859}),
s[860]=a({parent:s[850],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:860}),
s[861]=a({parent:s[850],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:861}),
s[862]=a({parent:s[71],name:"statusbar",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the status bar is visible; otherwise, returns false.</p>\n",dom:true},id:862,valuetype:s[718]}),
s[863]=a({parent:s[71],name:"toolbar",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns true if the toolbar is visible; otherwise, returns false.</p>\n",dom:true},id:863,valuetype:s[718]}),
s[864]=a({parent:s[71],name:"top",flags:4,mods:64,cat:0,meta:{dom:true},id:864,valuetype:s[71]}),
s[866]=a({parent:s[1],name:"VisualViewport",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:866}),
s[865]=a({parent:s[71],name:"visualViewport",flags:4,mods:64,cat:0,meta:{dom:true},id:865,valuetype:s[866]}),
s[867]=a({parent:s[866],name:"height",flags:4,mods:64,cat:0,meta:{dom:true},id:867}),
s[868]=a({parent:s[866],name:"offsetLeft",flags:4,mods:64,cat:0,meta:{dom:true},id:868}),
s[869]=a({parent:s[866],name:"offsetTop",flags:4,mods:64,cat:0,meta:{dom:true},id:869}),
s[870]=a({parent:s[866],name:"onresize",flags:4,mods:0,cat:0,meta:{dom:true},id:870}),
s[871]=a({parent:s[866],name:"onscroll",flags:4,mods:0,cat:0,meta:{dom:true},id:871}),
s[872]=a({parent:s[866],name:"pageLeft",flags:4,mods:64,cat:0,meta:{dom:true},id:872}),
s[873]=a({parent:s[866],name:"pageTop",flags:4,mods:64,cat:0,meta:{dom:true},id:873}),
s[874]=a({parent:s[866],name:"scale",flags:4,mods:64,cat:0,meta:{dom:true},id:874}),
s[875]=a({parent:s[866],name:"width",flags:4,mods:64,cat:0,meta:{dom:true},id:875}),
s[876]=a({parent:s[866],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:876}),
s[877]=a({parent:s[866],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:877}),
s[878]=a({parent:s[71],name:"window",flags:4,mods:64,cat:0,meta:{dom:true},id:878}),
s[879]=a({parent:s[71],name:"alert",flags:8192,mods:0,cat:0,meta:{dom:true},id:879}),
s[880]=a({parent:s[71],name:"blur",flags:8192,mods:0,cat:0,meta:{dom:true},id:880}),
s[881]=a({parent:s[71],name:"cancelIdleCallback",flags:8192,mods:0,cat:0,meta:{dom:true},id:881}),
s[882]=a({parent:s[71],name:"close",flags:8192,mods:0,cat:0,meta:{desc:"<p>Closes the window.</p>\n",dom:true},id:882}),
s[883]=a({parent:s[71],name:"confirm",flags:8192,mods:0,cat:0,meta:{dom:true},id:883}),
s[884]=a({parent:s[71],name:"focus",flags:8192,mods:0,cat:0,meta:{desc:"<p>Moves the focus to the window&#39;s browsing context, if any.</p>\n",dom:true},id:884}),
s[885]=a({parent:s[71],name:"getComputedStyle",flags:8192,mods:0,cat:0,meta:{dom:true},id:885}),
s[886]=a({parent:s[71],name:"getSelection",flags:8192,mods:0,cat:0,meta:{dom:true},id:886}),
s[887]=a({parent:s[71],name:"matchMedia",flags:8192,mods:0,cat:0,meta:{dom:true},id:887}),
s[888]=a({parent:s[71],name:"moveBy",flags:8192,mods:0,cat:0,meta:{dom:true},id:888}),
s[889]=a({parent:s[71],name:"moveTo",flags:8192,mods:0,cat:0,meta:{dom:true},id:889}),
s[890]=a({parent:s[71],name:"open",flags:8192,mods:0,cat:0,meta:{dom:true},id:890}),
s[891]=a({parent:s[71],name:"postMessage",flags:8192,mods:0,cat:0,meta:{desc:"<p>Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.</p>\n<p>Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.</p>\n<p>A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to &quot;/&quot;. This default restricts the message to same-origin targets only.</p>\n<p>If the origin of the target window doesn&#39;t match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to &quot;*&quot;.</p>\n<p>Throws a &quot;DataCloneError&quot; DOMException if transfer array contains duplicate objects or if message could not be cloned.</p>\n",dom:true},id:891}),
s[892]=a({parent:s[71],name:"print",flags:8192,mods:0,cat:0,meta:{dom:true},id:892}),
s[893]=a({parent:s[71],name:"prompt",flags:8192,mods:0,cat:0,meta:{dom:true},id:893}),
s[894]=a({parent:s[71],name:"requestIdleCallback",flags:8192,mods:0,cat:0,meta:{dom:true},id:894}),
s[895]=a({parent:s[71],name:"resizeBy",flags:8192,mods:0,cat:0,meta:{dom:true},id:895}),
s[896]=a({parent:s[71],name:"resizeTo",flags:8192,mods:0,cat:0,meta:{dom:true},id:896}),
s[897]=a({parent:s[71],name:"scroll",flags:8192,mods:0,cat:0,meta:{dom:true},id:897}),
s[898]=a({parent:s[71],name:"scrollBy",flags:8192,mods:0,cat:0,meta:{dom:true},id:898}),
s[899]=a({parent:s[71],name:"scrollTo",flags:8192,mods:0,cat:0,meta:{dom:true},id:899}),
s[900]=a({parent:s[71],name:"stop",flags:8192,mods:0,cat:0,meta:{desc:"<p>Cancels the document load.</p>\n",dom:true},id:900}),
s[901]=a({parent:s[71],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:901}),
s[902]=a({parent:s[71],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:902}),
s[903]=a({parent:s[71],name:"cancelAnimationFrame",flags:8192,mods:0,cat:0,meta:{dom:true},id:903}),
s[904]=a({parent:s[71],name:"requestAnimationFrame",flags:8192,mods:0,cat:0,meta:{dom:true},id:904}),
s[906]=a({parent:s[1],name:"Storage",flags:65,mods:786432,cat:0,meta:{desc:"<p>This Web Storage API interface provides access to a particular domain&#39;s session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.</p>\n",dom:true},id:906}),
s[905]=a({parent:s[71],name:"localStorage",flags:4,mods:786496,cat:0,meta:{dom:true},id:905,valuetype:s[906]}),
s[907]=a({parent:s[906],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of key/value pairs.</p>\n",dom:true},id:907}),
s[908]=a({parent:s[906],name:"clear",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes all key/value pairs, if there are any.</p>\n<p>Dispatches a storage event on Window objects holding an equivalent Storage object.</p>\n",dom:true},id:908}),
s[909]=a({parent:s[906],name:"getItem",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the current value associated with the given key, or null if the given key does not exist.</p>\n",dom:true},id:909}),
s[910]=a({parent:s[906],name:"key",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.</p>\n",dom:true},id:910}),
s[911]=a({parent:s[906],name:"removeItem",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the key/value pair with the given key, if a key/value pair with the given key exists.</p>\n<p>Dispatches a storage event on Window objects holding an equivalent Storage object.</p>\n",dom:true},id:911}),
s[912]=a({parent:s[906],name:"setItem",flags:8192,mods:0,cat:0,meta:{desc:"<p>Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.</p>\n<p>Throws a &quot;QuotaExceededError&quot; DOMException exception if the new value couldn&#39;t be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)</p>\n<p>Dispatches a storage event on Window objects holding an equivalent Storage object.</p>\n",dom:true},id:912}),
s[914]=a({parent:s[1],name:"CacheStorage",flags:65,mods:0,cat:0,meta:{desc:"<p>The storage for Cache objects.</p>\n",dom:true},id:914}),
s[913]=a({parent:s[71],name:"caches",flags:4,mods:64,cat:0,meta:{dom:true},id:913,valuetype:s[914]}),
s[915]=a({parent:s[914],name:"delete",flags:8192,mods:0,cat:0,meta:{dom:true},id:915}),
s[916]=a({parent:s[914],name:"has",flags:8192,mods:0,cat:0,meta:{dom:true},id:916}),
s[917]=a({parent:s[914],name:"keys",flags:8192,mods:0,cat:0,meta:{dom:true},id:917}),
s[918]=a({parent:s[914],name:"match",flags:8192,mods:0,cat:0,meta:{dom:true},id:918}),
s[919]=a({parent:s[914],name:"open",flags:8192,mods:0,cat:0,meta:{dom:true},id:919}),
s[920]=a({parent:s[71],name:"crossOriginIsolated",flags:4,mods:64,cat:0,meta:{dom:true},id:920}),
s[922]=a({parent:s[1],name:"Crypto",flags:65,mods:0,cat:0,meta:{desc:"<p>Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.</p>\n",dom:true},id:922}),
s[921]=a({parent:s[71],name:"crypto",flags:4,mods:64,cat:0,meta:{dom:true},id:921,valuetype:s[922]}),
s[924]=a({parent:s[1],name:"SubtleCrypto",flags:65,mods:0,cat:0,meta:{desc:"<p>This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).</p>\n",dom:true},id:924}),
s[923]=a({parent:s[922],name:"subtle",flags:4,mods:64,cat:0,meta:{dom:true},id:923,valuetype:s[924]}),
s[925]=a({parent:s[924],name:"decrypt",flags:8192,mods:0,cat:0,meta:{dom:true},id:925}),
s[926]=a({parent:s[924],name:"deriveBits",flags:8192,mods:0,cat:0,meta:{dom:true},id:926}),
s[927]=a({parent:s[924],name:"deriveKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:927}),
s[928]=a({parent:s[924],name:"digest",flags:8192,mods:0,cat:0,meta:{dom:true},id:928}),
s[929]=a({parent:s[924],name:"encrypt",flags:8192,mods:0,cat:0,meta:{dom:true},id:929}),
s[930]=a({parent:s[924],name:"exportKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:930}),
s[931]=a({parent:s[924],name:"generateKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:931}),
s[932]=a({parent:s[924],name:"importKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:932}),
s[933]=a({parent:s[924],name:"sign",flags:8192,mods:0,cat:0,meta:{dom:true},id:933}),
s[934]=a({parent:s[924],name:"unwrapKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:934}),
s[935]=a({parent:s[924],name:"verify",flags:8192,mods:0,cat:0,meta:{dom:true},id:935}),
s[936]=a({parent:s[924],name:"wrapKey",flags:8192,mods:0,cat:0,meta:{dom:true},id:936}),
s[937]=a({parent:s[922],name:"getRandomValues",flags:8192,mods:0,cat:0,meta:{dom:true},id:937}),
s[939]=a({parent:s[1],name:"IDBFactory",flags:65,mods:0,cat:0,meta:{desc:"<p>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)</p>\n",dom:true},id:939}),
s[938]=a({parent:s[71],name:"indexedDB",flags:4,mods:64,cat:0,meta:{dom:true},id:938,valuetype:s[939]}),
s[940]=a({parent:s[939],name:"cmp",flags:8192,mods:0,cat:0,meta:{desc:"<p>Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.</p>\n<p>Throws a &quot;DataError&quot; DOMException if either input is not a valid key.</p>\n",dom:true},id:940}),
s[941]=a({parent:s[939],name:"databases",flags:8192,mods:0,cat:0,meta:{dom:true},id:941}),
s[942]=a({parent:s[939],name:"deleteDatabase",flags:8192,mods:0,cat:0,meta:{desc:"<p>Attempts to delete the named database. If the database already exists and there are open connections that don&#39;t close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request&#39;s result will be null.</p>\n",dom:true},id:942}),
s[943]=a({parent:s[939],name:"open",flags:8192,mods:0,cat:0,meta:{desc:"<p>Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request&#39;s result will be the connection.</p>\n",dom:true},id:943}),
s[944]=a({parent:s[71],name:"isSecureContext",flags:4,mods:64,cat:0,meta:{dom:true},id:944}),
s[945]=a({parent:s[71],name:"origin",flags:4,mods:64,cat:0,meta:{dom:true},id:945}),
s[947]=a({parent:s[1],name:"Performance",inherits:s[8],flags:65,mods:0,cat:0,meta:{desc:"<p>Provides access to performance-related information for the current page. It&#39;s part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.</p>\n",dom:true},id:947}),
s[946]=a({parent:s[71],name:"performance",flags:4,mods:64,cat:0,meta:{dom:true},id:946,valuetype:s[947]}),
s[948]=a({parent:s[947],name:"onresourcetimingbufferfull",flags:4,mods:0,cat:0,meta:{dom:true},id:948}),
s[949]=a({parent:s[947],name:"timeOrigin",flags:4,mods:64,cat:0,meta:{dom:true},id:949}),
s[950]=a({parent:s[947],name:"clearMarks",flags:8192,mods:0,cat:0,meta:{dom:true},id:950}),
s[951]=a({parent:s[947],name:"clearMeasures",flags:8192,mods:0,cat:0,meta:{dom:true},id:951}),
s[952]=a({parent:s[947],name:"clearResourceTimings",flags:8192,mods:0,cat:0,meta:{dom:true},id:952}),
s[953]=a({parent:s[947],name:"getEntries",flags:8192,mods:0,cat:0,meta:{dom:true},id:953}),
s[954]=a({parent:s[947],name:"getEntriesByName",flags:8192,mods:0,cat:0,meta:{dom:true},id:954}),
s[955]=a({parent:s[947],name:"getEntriesByType",flags:8192,mods:0,cat:0,meta:{dom:true},id:955}),
s[956]=a({parent:s[947],name:"mark",flags:8192,mods:0,cat:0,meta:{dom:true},id:956}),
s[957]=a({parent:s[947],name:"measure",flags:8192,mods:0,cat:0,meta:{dom:true},id:957}),
s[958]=a({parent:s[947],name:"now",flags:8192,mods:0,cat:0,meta:{dom:true},id:958}),
s[959]=a({parent:s[947],name:"setResourceTimingBufferSize",flags:8192,mods:0,cat:0,meta:{dom:true},id:959}),
s[960]=a({parent:s[947],name:"toJSON",flags:8192,mods:0,cat:0,meta:{dom:true},id:960}),
s[961]=a({parent:s[947],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:961}),
s[962]=a({parent:s[947],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:962}),
s[963]=a({parent:s[71],name:"atob",flags:8192,mods:0,cat:0,meta:{dom:true},id:963}),
s[964]=a({parent:s[71],name:"btoa",flags:8192,mods:0,cat:0,meta:{dom:true},id:964}),
s[965]=a({parent:s[71],name:"clearInterval",flags:8192,mods:0,cat:0,meta:{dom:true},id:965}),
s[966]=a({parent:s[71],name:"clearTimeout",flags:8192,mods:0,cat:0,meta:{dom:true},id:966}),
s[967]=a({parent:s[71],name:"createImageBitmap",flags:8192,mods:0,cat:0,meta:{dom:true},id:967}),
s[968]=a({parent:s[71],name:"fetch",flags:8192,mods:0,cat:0,meta:{dom:true},id:968}),
s[969]=a({parent:s[71],name:"queueMicrotask",flags:8192,mods:0,cat:0,meta:{dom:true},id:969}),
s[970]=a({parent:s[71],name:"setInterval",flags:8192,mods:0,cat:0,meta:{dom:true},id:970}),
s[971]=a({parent:s[71],name:"setTimeout",flags:8192,mods:0,cat:0,meta:{dom:true},id:971}),
s[972]=a({parent:s[71],name:"sessionStorage",flags:4,mods:786496,cat:0,meta:{dom:true},id:972,valuetype:s[906]}),
s[973]=a({parent:s[1],name:"ImbaEvents",flags:64,mods:786432,cat:0,meta:{},id:973}),
s[974]=a({parent:s[973],name:"abort",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>The loading of a resource has been aborted.</p>\n",imba:true},id:974,valuetype:s[2]}),
s[976]=a({parent:s[1],name:"AnimationEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events providing information related to animations.</p>\n",dom:true},id:976}),
s[975]=a({parent:s[973],name:"animationcancel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:975,valuetype:s[976]}),
s[977]=a({parent:s[976],name:"animationName",flags:4,mods:64,cat:0,meta:{dom:true},id:977}),
s[978]=a({parent:s[976],name:"elapsedTime",flags:4,mods:64,cat:0,meta:{dom:true},id:978}),
s[979]=a({parent:s[976],name:"pseudoElement",flags:4,mods:64,cat:0,meta:{dom:true},id:979}),
s[980]=a({parent:s[973],name:"animationend",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>A CSS animation has completed.</p>\n",imba:true},id:980,valuetype:s[976]}),
s[981]=a({parent:s[973],name:"animationiteration",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>A CSS animation is repeated.</p>\n",imba:true},id:981,valuetype:s[976]}),
s[982]=a({parent:s[973],name:"animationstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>A CSS animation has started.</p>\n",imba:true},id:982,valuetype:s[976]}),
s[984]=a({parent:s[1],name:"MouseEvent",inherits:s[46],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.</p>\n",dom:true},id:984}),
s[983]=a({parent:s[973],name:"auxclick",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:983,valuetype:s[984]}),
s[985]=a({parent:s[984],name:"altKey",flags:4,mods:64,cat:0,meta:{dom:true},id:985}),
s[986]=a({parent:s[984],name:"button",flags:4,mods:64,cat:0,meta:{dom:true},id:986}),
s[987]=a({parent:s[984],name:"buttons",flags:4,mods:64,cat:0,meta:{dom:true},id:987}),
s[988]=a({parent:s[984],name:"clientX",flags:4,mods:64,cat:0,meta:{dom:true},id:988}),
s[989]=a({parent:s[984],name:"clientY",flags:4,mods:64,cat:0,meta:{dom:true},id:989}),
s[990]=a({parent:s[984],name:"ctrlKey",flags:4,mods:64,cat:0,meta:{dom:true},id:990}),
s[991]=a({parent:s[984],name:"metaKey",flags:4,mods:64,cat:0,meta:{dom:true},id:991}),
s[992]=a({parent:s[984],name:"movementX",flags:4,mods:64,cat:0,meta:{dom:true},id:992}),
s[993]=a({parent:s[984],name:"movementY",flags:4,mods:64,cat:0,meta:{dom:true},id:993}),
s[994]=a({parent:s[984],name:"offsetX",flags:4,mods:64,cat:0,meta:{dom:true},id:994}),
s[995]=a({parent:s[984],name:"offsetY",flags:4,mods:64,cat:0,meta:{dom:true},id:995}),
s[996]=a({parent:s[984],name:"pageX",flags:4,mods:64,cat:0,meta:{dom:true},id:996}),
s[997]=a({parent:s[984],name:"pageY",flags:4,mods:64,cat:0,meta:{dom:true},id:997}),
s[998]=a({parent:s[984],name:"relatedTarget",flags:4,mods:64,cat:0,meta:{dom:true},id:998,valuetype:s[8]}),
s[999]=a({parent:s[984],name:"screenX",flags:4,mods:64,cat:0,meta:{dom:true},id:999}),
s[1000]=a({parent:s[984],name:"screenY",flags:4,mods:64,cat:0,meta:{dom:true},id:1000}),
s[1001]=a({parent:s[984],name:"shiftKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1001}),
s[1002]=a({parent:s[984],name:"x",flags:4,mods:64,cat:0,meta:{dom:true},id:1002}),
s[1003]=a({parent:s[984],name:"y",flags:4,mods:64,cat:0,meta:{dom:true},id:1003}),
s[1004]=a({parent:s[984],name:"getModifierState",flags:8192,mods:0,cat:0,meta:{dom:true},id:1004}),
s[1005]=a({parent:s[984],name:"@ctrl",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if ctrlKey is pressed</p>\n"},id:1005}),
s[1006]=a({parent:s[984],name:"@alt",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if altKey is pressed</p>\n"},id:1006}),
s[1007]=a({parent:s[984],name:"@shift",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if shiftKey is pressed</p>\n"},id:1007}),
s[1008]=a({parent:s[984],name:"@meta",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if metaKey is pressed</p>\n"},id:1008}),
s[1009]=a({parent:s[984],name:"@mod",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if metaKey (on mac) or ctrlKey (other platforms) is pressed",desc:"<p>Apple uses the โ key while others use the Ctrl key for many keyboard shortcuts\nand features like (โ or Ctrl)+click for opening a link in a new tab.\nThis modifier unifies the logic and is essentially an alias for <code>.meta</code> on mac,\nand <code>.ctrl</code> for all other platforms.</p>\n"},id:1009}),
s[1010]=a({parent:s[984],name:"@middle",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if middle button is pressed</p>\n"},id:1010}),
s[1011]=a({parent:s[984],name:"@left",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if left/primary button is pressed</p>\n"},id:1011}),
s[1012]=a({parent:s[984],name:"@right",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if right button is pressed</p>\n"},id:1012}),
s[1014]=a({parent:s[1],name:"FocusEvent",inherits:s[46],flags:65,mods:262144,cat:0,meta:{desc:"<p>Focus-related events like focus, blur, focusin, or focusout.</p>\n",dom:true},id:1014}),
s[1013]=a({parent:s[973],name:"blur",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>An element has lost focus (does not bubble).</p>\n",imba:true},id:1013,valuetype:s[1014]}),
s[1015]=a({parent:s[1014],name:"relatedTarget",flags:4,mods:64,cat:0,meta:{dom:true},id:1015,valuetype:s[8]}),
s[1016]=a({parent:s[973],name:"cancel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1016,valuetype:s[2]}),
s[1017]=a({parent:s[973],name:"canplay",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</p>\n",imba:true},id:1017,valuetype:s[2]}),
s[1018]=a({parent:s[973],name:"canplaythrough",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>The user agent can play the media up to its end without having to stop for further buffering of content.</p>\n",imba:true},id:1018,valuetype:s[2]}),
s[1019]=a({parent:s[973],name:"change",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>The change event is fired for <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements when a change to the element&#39;s value is committed by the user.</p>\n",imba:true},id:1019,valuetype:s[2]}),
s[1020]=a({parent:s[973],name:"click",kind:"event",flags:536870912,mods:262144,cat:0,meta:{desc:"<p>A pointing device button has been pressed and released on an element.</p>\n",imba:true},id:1020,valuetype:s[984]}),
s[1021]=a({parent:s[973],name:"close",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1021,valuetype:s[2]}),
s[1022]=a({parent:s[973],name:"contextmenu",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1022,valuetype:s[984]}),
s[1023]=a({parent:s[973],name:"cuechange",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1023,valuetype:s[2]}),
s[1024]=a({parent:s[973],name:"dblclick",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1024,valuetype:s[984]}),
s[1026]=a({parent:s[1],name:"DragEvent",inherits:s[984],flags:65,mods:262144,cat:0,meta:{desc:"<p>A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.</p>\n",dom:true},id:1026}),
s[1025]=a({parent:s[973],name:"drag",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1025,valuetype:s[1026]}),
s[1028]=a({parent:s[1],name:"DataTransfer",flags:65,mods:0,cat:0,meta:{desc:"<p>Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.</p>\n",dom:true},id:1028}),
s[1027]=a({parent:s[1026],name:"dataTransfer",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the DataTransfer object for the event.</p>\n",dom:true},id:1027,valuetype:s[1028]}),
s[1029]=a({parent:s[1028],name:"dropEffect",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the kind of operation that is currently selected. If the kind of operation isn&#39;t one of those that is allowed by the effectAllowed attribute, then the operation will fail.</p>\n<p>Can be set, to change the selected operation.</p>\n<p>The possible values are &quot;none&quot;, &quot;copy&quot;, &quot;link&quot;, and &quot;move&quot;.</p>\n",dom:true},id:1029}),
s[1030]=a({parent:s[1028],name:"effectAllowed",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the kinds of operations that are to be allowed.</p>\n<p>Can be set (during the dragstart event), to change the allowed operations.</p>\n<p>The possible values are &quot;none&quot;, &quot;copy&quot;, &quot;copyLink&quot;, &quot;copyMove&quot;, &quot;link&quot;, &quot;linkMove&quot;, &quot;move&quot;, &quot;all&quot;, and &quot;uninitialized&quot;,</p>\n",dom:true},id:1030}),
s[1032]=a({parent:s[1],name:"FileList",flags:65,mods:0,cat:0,meta:{desc:"<p>An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It&#39;s also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.</p>\n",dom:true},id:1032}),
s[1031]=a({parent:s[1028],name:"files",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a FileList of the files being dragged, if any.</p>\n",dom:true},id:1031,valuetype:s[1032]}),
s[1033]=a({parent:s[1032],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:1033}),
s[1034]=a({parent:s[1032],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:1034}),
s[1036]=a({parent:s[1],name:"DataTransferItemList",flags:65,mods:0,cat:0,meta:{desc:"<p>A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.</p>\n",dom:true},id:1036}),
s[1035]=a({parent:s[1028],name:"items",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a DataTransferItemList object, with the drag data.</p>\n",dom:true},id:1035,valuetype:s[1036]}),
s[1037]=a({parent:s[1036],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of items in the drag data store.</p>\n",dom:true},id:1037}),
s[1038]=a({parent:s[1036],name:"add",flags:8192,mods:0,cat:0,meta:{desc:"<p>Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also.</p>\n",dom:true},id:1038}),
s[1039]=a({parent:s[1036],name:"clear",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes all the entries in the drag data store.</p>\n",dom:true},id:1039}),
s[1040]=a({parent:s[1036],name:"remove",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the indexth entry in the drag data store.</p>\n",dom:true},id:1040}),
s[1041]=a({parent:s[1028],name:"types",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a frozen array listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string &quot;Files&quot;.</p>\n",dom:true},id:1041,valuetype:s[284]}),
s[1042]=a({parent:s[1028],name:"clearData",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the data of the specified formats. Removes all data if the argument is omitted.</p>\n",dom:true},id:1042}),
s[1043]=a({parent:s[1028],name:"getData",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the specified data. If there is no such data, returns the empty string.</p>\n",dom:true},id:1043}),
s[1044]=a({parent:s[1028],name:"setData",flags:8192,mods:0,cat:0,meta:{desc:"<p>Adds the specified data.</p>\n",dom:true},id:1044}),
s[1045]=a({parent:s[1028],name:"setDragImage",flags:8192,mods:0,cat:0,meta:{desc:"<p>Uses the given element to update the drag feedback, replacing any previously specified feedback.</p>\n",dom:true},id:1045}),
s[1046]=a({parent:s[973],name:"dragend",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1046,valuetype:s[1026]}),
s[1047]=a({parent:s[973],name:"dragenter",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1047,valuetype:s[1026]}),
s[1048]=a({parent:s[973],name:"dragleave",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1048,valuetype:s[1026]}),
s[1049]=a({parent:s[973],name:"dragover",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1049,valuetype:s[1026]}),
s[1050]=a({parent:s[973],name:"dragstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1050,valuetype:s[1026]}),
s[1051]=a({parent:s[973],name:"drop",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summaryz:"Fires when an element or text selection is dropped on a valid drop target.",imba:true},id:1051,valuetype:s[1026]}),
s[1052]=a({parent:s[973],name:"durationchange",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1052,valuetype:s[2]}),
s[1053]=a({parent:s[973],name:"emptied",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1053,valuetype:s[2]}),
s[1054]=a({parent:s[973],name:"ended",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1054,valuetype:s[2]}),
s[1056]=a({parent:s[1],name:"ErrorEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events providing information related to errors in scripts or in files.</p>\n",dom:true},id:1056}),
s[1055]=a({parent:s[973],name:"error",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1055,valuetype:s[1056]}),
s[1057]=a({parent:s[1056],name:"colno",flags:4,mods:64,cat:0,meta:{dom:true},id:1057}),
s[1058]=a({parent:s[1056],name:"error",flags:4,mods:64,cat:0,meta:{dom:true},id:1058}),
s[1059]=a({parent:s[1056],name:"filename",flags:4,mods:64,cat:0,meta:{dom:true},id:1059}),
s[1060]=a({parent:s[1056],name:"lineno",flags:4,mods:64,cat:0,meta:{dom:true},id:1060}),
s[1061]=a({parent:s[1056],name:"message",flags:4,mods:64,cat:0,meta:{dom:true},id:1061}),
s[1062]=a({parent:s[973],name:"focus",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1062,valuetype:s[1014]}),
s[1063]=a({parent:s[973],name:"focusin",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1063,valuetype:s[1014]}),
s[1064]=a({parent:s[973],name:"focusout",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1064,valuetype:s[1014]}),
s[1066]=a({parent:s[215],name:"HotkeyEvent",inherits:s[2],flags:32,mods:294912,cat:0,meta:{},id:1066}),
s[1065]=a({parent:s[973],name:"hotkey",kind:"event",flags:536870912,mods:294912,cat:0,meta:{summary:"Fired when the supplied keycombo is pressed anywhere in the document.",detail:"(combo)"},id:1065,valuetype:s[1066]}),
s[1067]=a({parent:s[1066],name:"@options",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{param:{text:"pattern",kind:"parameterName"},see:"https"},id:1067}),
s[1068]=a({parent:s[1066],name:"@global",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Trigger even if outside of the originating hotkey group</p>\n"},id:1068}),
s[1069]=a({parent:s[1066],name:"@passive",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Allow subsequent hotkey handlers for the same combo\nand don&#39;t automatically prevent default behaviour of originating\nkeyboard event</p>\n"},id:1069}),
s[1070]=a({parent:s[1066],name:"@force",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Also trigger when input,textarea or a contenteditable is focused</p>\n"},id:1070}),
s[1071]=a({parent:s[1066],name:"@repeat",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Allow the handler to trigger multiple times while user\nkeeps pressing the key combination.</p>\n"},id:1071}),
s[1073]=a({parent:s[1],name:"KeyboardEvent",inherits:s[46],flags:65,mods:262144,cat:0,meta:{desc:"<p>KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.</p>\n",dom:true},id:1073}),
s[1072]=a({parent:s[1066],name:"originalEvent",flags:4,mods:294976,cat:0,meta:{desc:"<p>The KeyboardEvent responsible for this HotkeyEvent</p>\n"},id:1072,valuetype:s[1073]}),
s[1074]=a({parent:s[1073],name:"altKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1074}),
s[1075]=a({parent:s[1073],name:"code",flags:4,mods:64,cat:0,meta:{dom:true},id:1075}),
s[1076]=a({parent:s[1073],name:"ctrlKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1076}),
s[1077]=a({parent:s[1073],name:"isComposing",flags:4,mods:64,cat:0,meta:{dom:true},id:1077}),
s[1078]=a({parent:s[1073],name:"key",flags:4,mods:64,cat:0,meta:{dom:true},id:1078}),
s[1079]=a({parent:s[1073],name:"location",flags:4,mods:64,cat:0,meta:{dom:true},id:1079}),
s[1080]=a({parent:s[1073],name:"metaKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1080}),
s[1081]=a({parent:s[1073],name:"repeat",flags:4,mods:64,cat:0,meta:{dom:true},id:1081}),
s[1082]=a({parent:s[1073],name:"shiftKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1082}),
s[1083]=a({parent:s[1073],name:"getModifierState",flags:8192,mods:0,cat:0,meta:{dom:true},id:1083}),
s[1084]=a({parent:s[1073],name:"DOM_KEY_LOCATION_LEFT",flags:4,mods:131136,cat:0,meta:{dom:true},id:1084}),
s[1085]=a({parent:s[1073],name:"DOM_KEY_LOCATION_NUMPAD",flags:4,mods:131136,cat:0,meta:{dom:true},id:1085}),
s[1086]=a({parent:s[1073],name:"DOM_KEY_LOCATION_RIGHT",flags:4,mods:131136,cat:0,meta:{dom:true},id:1086}),
s[1087]=a({parent:s[1073],name:"DOM_KEY_LOCATION_STANDARD",flags:4,mods:131136,cat:0,meta:{dom:true},id:1087}),
s[1088]=a({parent:s[1073],name:"@enter",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if enter key is pressed</p>\n"},id:1088}),
s[1089]=a({parent:s[1073],name:"@left",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if left key is pressed</p>\n"},id:1089}),
s[1090]=a({parent:s[1073],name:"@right",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if right key is pressed</p>\n"},id:1090}),
s[1091]=a({parent:s[1073],name:"@up",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if up key is pressed</p>\n"},id:1091}),
s[1092]=a({parent:s[1073],name:"@down",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if down key is pressed</p>\n"},id:1092}),
s[1093]=a({parent:s[1073],name:"@tab",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if tab key is pressed</p>\n"},id:1093}),
s[1094]=a({parent:s[1073],name:"@esc",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if esc key is pressed</p>\n"},id:1094}),
s[1095]=a({parent:s[1073],name:"@space",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if space key is pressed</p>\n"},id:1095}),
s[1096]=a({parent:s[1073],name:"@del",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{desc:"<p>Handle if del key is pressed</p>\n"},id:1096}),
s[1097]=a({parent:s[1073],name:"@key",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(code)",desc:"<p>Handle if keyCode == code</p>\n"},id:1097}),
s[1098]=a({parent:s[1066],name:"combo",flags:4,mods:32832,cat:0,meta:{desc:"<p>The combo for the event</p>\n"},id:1098}),
s[1099]=a({parent:s[973],name:"input",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1099,valuetype:s[2]}),
s[1100]=a({parent:s[973],name:"invalid",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1100,valuetype:s[2]}),
s[1101]=a({parent:s[973],name:"intersect",kind:"event",flags:536870912,mods:294912,cat:0,meta:{summary:"Fired when the element appears in the viewport (or another element).",Syntax:true,Parameters:true},id:1101,valuetype:s[250]}),
s[1102]=a({parent:s[973],name:"keydown",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1102,valuetype:s[1073]}),
s[1103]=a({parent:s[973],name:"keypress",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1103,valuetype:s[1073]}),
s[1104]=a({parent:s[973],name:"keyup",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1104,valuetype:s[1073]}),
s[1105]=a({parent:s[973],name:"load",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1105,valuetype:s[2]}),
s[1106]=a({parent:s[973],name:"loadeddata",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1106,valuetype:s[2]}),
s[1107]=a({parent:s[973],name:"loadedmetadata",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1107,valuetype:s[2]}),
s[1108]=a({parent:s[973],name:"loadstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1108,valuetype:s[2]}),
s[1109]=a({parent:s[973],name:"mousedown",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1109,valuetype:s[984]}),
s[1110]=a({parent:s[973],name:"mouseenter",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1110,valuetype:s[984]}),
s[1111]=a({parent:s[973],name:"mouseleave",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1111,valuetype:s[984]}),
s[1112]=a({parent:s[973],name:"mousemove",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1112,valuetype:s[984]}),
s[1113]=a({parent:s[973],name:"mouseout",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1113,valuetype:s[984]}),
s[1114]=a({parent:s[973],name:"mouseover",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1114,valuetype:s[984]}),
s[1115]=a({parent:s[973],name:"mouseup",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1115,valuetype:s[984]}),
s[1116]=a({parent:s[973],name:"pause",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1116,valuetype:s[2]}),
s[1117]=a({parent:s[973],name:"play",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1117,valuetype:s[2]}),
s[1118]=a({parent:s[973],name:"playing",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1118,valuetype:s[2]}),
s[1120]=a({parent:s[1],name:"PointerEvent",inherits:s[984],flags:65,mods:262144,cat:0,meta:{desc:"<p>The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.</p>\n",dom:true},id:1120}),
s[1119]=a({parent:s[973],name:"pointercancel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"A browser fires this event if it concludes the pointer will no longer be able to generate events (for example the related device is deactivated).",imba:true},id:1119,valuetype:s[1120]}),
s[1121]=a({parent:s[1120],name:"height",flags:4,mods:64,cat:0,meta:{dom:true},id:1121}),
s[1122]=a({parent:s[1120],name:"isPrimary",flags:4,mods:64,cat:0,meta:{dom:true},id:1122}),
s[1123]=a({parent:s[1120],name:"pointerId",flags:4,mods:64,cat:0,meta:{dom:true},id:1123}),
s[1124]=a({parent:s[1120],name:"pointerType",flags:4,mods:64,cat:0,meta:{dom:true},id:1124}),
s[1125]=a({parent:s[1120],name:"pressure",flags:4,mods:64,cat:0,meta:{dom:true},id:1125}),
s[1126]=a({parent:s[1120],name:"tangentialPressure",flags:4,mods:64,cat:0,meta:{dom:true},id:1126}),
s[1127]=a({parent:s[1120],name:"tiltX",flags:4,mods:64,cat:0,meta:{dom:true},id:1127}),
s[1128]=a({parent:s[1120],name:"tiltY",flags:4,mods:64,cat:0,meta:{dom:true},id:1128}),
s[1129]=a({parent:s[1120],name:"twist",flags:4,mods:64,cat:0,meta:{dom:true},id:1129}),
s[1130]=a({parent:s[1120],name:"width",flags:4,mods:64,cat:0,meta:{dom:true},id:1130}),
s[1131]=a({parent:s[1120],name:"getCoalescedEvents",flags:8192,mods:0,cat:0,meta:{dom:true},id:1131}),
s[1132]=a({parent:s[1120],name:"getPredictedEvents",flags:8192,mods:0,cat:0,meta:{dom:true},id:1132}),
s[1133]=a({parent:s[1120],name:"@mouse",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if the event was generated by a mouse device."},id:1133}),
s[1134]=a({parent:s[1120],name:"@pen",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if the event was generated by a pen or stylus device."},id:1134}),
s[1135]=a({parent:s[1120],name:"@touch",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{summary:"Handle if the event was generated by a touch, such as a finger."},id:1135}),
s[1136]=a({parent:s[1120],name:"@pressure",kind:"modifier",flags:268435456,mods:32768,cat:0,meta:{detail:"(threshold=0.5)",desc:"<p>Only when pressure is at least amount (defaults to 0.5)</p>\n"},id:1136}),
s[1137]=a({parent:s[973],name:"pointerdown",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer becomes active buttons state.",imba:true},id:1137,valuetype:s[1120]}),
s[1138]=a({parent:s[973],name:"pointerenter",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown).",imba:true},id:1138,valuetype:s[1120]}),
s[1139]=a({parent:s[973],name:"pointerleave",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer.",imba:true},id:1139,valuetype:s[1120]}),
s[1140]=a({parent:s[973],name:"pointermove",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer changes coordinates. This event is also used if the change in pointer state can not be reported by other events.",imba:true},id:1140,valuetype:s[1120]}),
s[1141]=a({parent:s[973],name:"pointerout",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired for several reasons including: pointer is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer.",imba:true},id:1141,valuetype:s[1120]}),
s[1142]=a({parent:s[973],name:"pointerover",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer is moved into an element's hit test boundaries.",imba:true},id:1142,valuetype:s[1120]}),
s[1143]=a({parent:s[973],name:"pointerup",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when a pointer is no longer active buttons state.",imba:true},id:1143,valuetype:s[1120]}),
s[1144]=a({parent:s[973],name:"gotpointercapture",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired when an element receives pointer capture.",imba:true},id:1144,valuetype:s[1120]}),
s[1145]=a({parent:s[973],name:"lostpointercapture",kind:"event",flags:536870912,mods:262144,cat:0,meta:{summary:"Fired after pointer capture is released for a pointer.",imba:true},id:1145,valuetype:s[1120]}),
s[1147]=a({parent:s[1],name:"ProgressEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).</p>\n",dom:true},id:1147}),
s[1146]=a({parent:s[973],name:"progress",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1146,valuetype:s[1147]}),
s[1148]=a({parent:s[1147],name:"lengthComputable",flags:4,mods:64,cat:0,meta:{dom:true},id:1148}),
s[1149]=a({parent:s[1147],name:"loaded",flags:4,mods:64,cat:0,meta:{dom:true},id:1149}),
s[1150]=a({parent:s[1147],name:"target",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the object to which event is dispatched (its target).</p>\n",dom:true},id:1150}),
s[1151]=a({parent:s[1147],name:"total",flags:4,mods:64,cat:0,meta:{dom:true},id:1151}),
s[1152]=a({parent:s[973],name:"ratechange",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1152,valuetype:s[2]}),
s[1153]=a({parent:s[973],name:"reset",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1153,valuetype:s[2]}),
s[1154]=a({parent:s[973],name:"resize",kind:"event",flags:536870912,mods:294912,cat:0,meta:{summary:"Fired when element is resized."},id:1154,valuetype:s[277]}),
s[1155]=a({parent:s[973],name:"scroll",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1155,valuetype:s[2]}),
s[1157]=a({parent:s[1],name:"SecurityPolicyViolationEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.</p>\n",dom:true},id:1157}),
s[1156]=a({parent:s[973],name:"securitypolicyviolation",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1156,valuetype:s[1157]}),
s[1158]=a({parent:s[1157],name:"blockedURI",flags:4,mods:64,cat:0,meta:{dom:true},id:1158}),
s[1159]=a({parent:s[1157],name:"columnNumber",flags:4,mods:64,cat:0,meta:{dom:true},id:1159}),
s[1160]=a({parent:s[1157],name:"disposition",flags:4,mods:64,cat:0,meta:{dom:true},id:1160}),
s[1161]=a({parent:s[1157],name:"documentURI",flags:4,mods:64,cat:0,meta:{dom:true},id:1161}),
s[1162]=a({parent:s[1157],name:"effectiveDirective",flags:4,mods:64,cat:0,meta:{dom:true},id:1162}),
s[1163]=a({parent:s[1157],name:"lineNumber",flags:4,mods:64,cat:0,meta:{dom:true},id:1163}),
s[1164]=a({parent:s[1157],name:"originalPolicy",flags:4,mods:64,cat:0,meta:{dom:true},id:1164}),
s[1165]=a({parent:s[1157],name:"referrer",flags:4,mods:64,cat:0,meta:{dom:true},id:1165}),
s[1166]=a({parent:s[1157],name:"sample",flags:4,mods:64,cat:0,meta:{dom:true},id:1166}),
s[1167]=a({parent:s[1157],name:"sourceFile",flags:4,mods:64,cat:0,meta:{dom:true},id:1167}),
s[1168]=a({parent:s[1157],name:"statusCode",flags:4,mods:64,cat:0,meta:{dom:true},id:1168}),
s[1169]=a({parent:s[1157],name:"violatedDirective",flags:4,mods:64,cat:0,meta:{dom:true},id:1169}),
s[1170]=a({parent:s[973],name:"seeked",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1170,valuetype:s[2]}),
s[1171]=a({parent:s[973],name:"seeking",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1171,valuetype:s[2]}),
s[1172]=a({parent:s[973],name:"select",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1172,valuetype:s[2]}),
s[1173]=a({parent:s[973],name:"selectionchange",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1173,valuetype:s[2]}),
s[1174]=a({parent:s[973],name:"selectstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1174,valuetype:s[2]}),
s[1175]=a({parent:s[973],name:"stalled",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1175,valuetype:s[2]}),
s[1176]=a({parent:s[973],name:"submit",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1176,valuetype:s[2]}),
s[1177]=a({parent:s[973],name:"suspend",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1177,valuetype:s[2]}),
s[1178]=a({parent:s[973],name:"timeupdate",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1178,valuetype:s[2]}),
s[1179]=a({parent:s[973],name:"toggle",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1179,valuetype:s[2]}),
s[1180]=a({parent:s[973],name:"touch",kind:"event",flags:536870912,mods:32768,cat:0,meta:{summary:"Normalized handler for pointerdown->move->up with powerful custom modifiers."},id:1180,valuetype:s[216]}),
s[1182]=a({parent:s[1],name:"TouchEvent",inherits:s[46],flags:65,mods:262144,cat:0,meta:{desc:"<p>An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.</p>\n",dom:true},id:1182}),
s[1181]=a({parent:s[973],name:"touchcancel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1181,valuetype:s[1182]}),
s[1183]=a({parent:s[1182],name:"altKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1183}),
s[1185]=a({parent:s[1],name:"TouchList",flags:65,mods:0,cat:0,meta:{desc:"<p>A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.</p>\n",dom:true},id:1185}),
s[1184]=a({parent:s[1182],name:"changedTouches",flags:4,mods:64,cat:0,meta:{dom:true},id:1184,valuetype:s[1185]}),
s[1186]=a({parent:s[1185],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:1186}),
s[1187]=a({parent:s[1185],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:1187}),
s[1188]=a({parent:s[1182],name:"ctrlKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1188}),
s[1189]=a({parent:s[1182],name:"metaKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1189}),
s[1190]=a({parent:s[1182],name:"shiftKey",flags:4,mods:64,cat:0,meta:{dom:true},id:1190}),
s[1191]=a({parent:s[1182],name:"targetTouches",flags:4,mods:64,cat:0,meta:{dom:true},id:1191,valuetype:s[1185]}),
s[1192]=a({parent:s[1182],name:"touches",flags:4,mods:64,cat:0,meta:{dom:true},id:1192,valuetype:s[1185]}),
s[1193]=a({parent:s[973],name:"touchend",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1193,valuetype:s[1182]}),
s[1194]=a({parent:s[973],name:"touchmove",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1194,valuetype:s[1182]}),
s[1195]=a({parent:s[973],name:"touchstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1195,valuetype:s[1182]}),
s[1197]=a({parent:s[1],name:"TransitionEvent",inherits:s[2],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events providing information related to transitions.</p>\n",dom:true},id:1197}),
s[1196]=a({parent:s[973],name:"transitioncancel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1196,valuetype:s[1197]}),
s[1198]=a({parent:s[1197],name:"elapsedTime",flags:4,mods:64,cat:0,meta:{dom:true},id:1198}),
s[1199]=a({parent:s[1197],name:"propertyName",flags:4,mods:64,cat:0,meta:{dom:true},id:1199}),
s[1200]=a({parent:s[1197],name:"pseudoElement",flags:4,mods:64,cat:0,meta:{dom:true},id:1200}),
s[1201]=a({parent:s[973],name:"transitionend",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1201,valuetype:s[1197]}),
s[1202]=a({parent:s[973],name:"transitionrun",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1202,valuetype:s[1197]}),
s[1203]=a({parent:s[973],name:"transitionstart",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1203,valuetype:s[1197]}),
s[1204]=a({parent:s[973],name:"volumechange",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1204,valuetype:s[2]}),
s[1205]=a({parent:s[973],name:"waiting",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1205,valuetype:s[2]}),
s[1207]=a({parent:s[1],name:"WheelEvent",inherits:s[984],flags:65,mods:262144,cat:0,meta:{desc:"<p>Events that occur due to the user moving a mouse wheel or similar input device.</p>\n",dom:true},id:1207}),
s[1206]=a({parent:s[973],name:"wheel",kind:"event",flags:536870912,mods:262144,cat:0,meta:{imba:true},id:1206,valuetype:s[1207]}),
s[1208]=a({parent:s[1207],name:"deltaMode",flags:4,mods:64,cat:0,meta:{dom:true},id:1208}),
s[1209]=a({parent:s[1207],name:"deltaX",flags:4,mods:64,cat:0,meta:{dom:true},id:1209}),
s[1210]=a({parent:s[1207],name:"deltaY",flags:4,mods:64,cat:0,meta:{dom:true},id:1210}),
s[1211]=a({parent:s[1207],name:"deltaZ",flags:4,mods:64,cat:0,meta:{dom:true},id:1211}),
s[1212]=a({parent:s[1207],name:"DOM_DELTA_LINE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1212}),
s[1213]=a({parent:s[1207],name:"DOM_DELTA_PAGE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1213}),
s[1214]=a({parent:s[1207],name:"DOM_DELTA_PIXEL",flags:4,mods:131136,cat:0,meta:{dom:true},id:1214}),
s[1215]=a({parent:s[1],name:"HTMLElementTagNameMap",flags:64,mods:0,cat:0,meta:{},id:1215}),
s[1217]=a({parent:s[1],name:"HTMLHyperlinkElementUtils",flags:64,mods:0,cat:0,meta:{},id:1217}),
s[1229]=a({parent:s[1],name:"HTMLAnchorElement",inherits:s[478],implements:[s[1217]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.</p>\n",dom:true},id:1229}),
s[1216]=a({parent:s[1215],name:"a",flags:4,mods:524288,cat:0,meta:{dom:true},id:1216,valuetype:s[1229]}),
s[1218]=a({parent:s[1217],name:"hash",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s fragment (includes leading &quot;#&quot; if non-empty).</p>\n<p>Can be set, to change the URL&#39;s fragment (ignores leading &quot;#&quot;).</p>\n",dom:true},id:1218}),
s[1219]=a({parent:s[1217],name:"host",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s host and port (if different from the default port for the scheme).</p>\n<p>Can be set, to change the URL&#39;s host and port.</p>\n",dom:true},id:1219}),
s[1220]=a({parent:s[1217],name:"hostname",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s host.</p>\n<p>Can be set, to change the URL&#39;s host.</p>\n",dom:true},id:1220}),
s[1221]=a({parent:s[1217],name:"href",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL.</p>\n<p>Can be set, to change the URL.</p>\n",dom:true},id:1221}),
s[1222]=a({parent:s[1217],name:"origin",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s origin.</p>\n",dom:true},id:1222}),
s[1223]=a({parent:s[1217],name:"password",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s password.</p>\n<p>Can be set, to change the URL&#39;s password.</p>\n",dom:true},id:1223}),
s[1224]=a({parent:s[1217],name:"pathname",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s path.</p>\n<p>Can be set, to change the URL&#39;s path.</p>\n",dom:true},id:1224}),
s[1225]=a({parent:s[1217],name:"port",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s port.</p>\n<p>Can be set, to change the URL&#39;s port.</p>\n",dom:true},id:1225}),
s[1226]=a({parent:s[1217],name:"protocol",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s scheme.</p>\n<p>Can be set, to change the URL&#39;s scheme.</p>\n",dom:true},id:1226}),
s[1227]=a({parent:s[1217],name:"search",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s query (includes leading &quot;?&quot; if non-empty).</p>\n<p>Can be set, to change the URL&#39;s query (ignores leading &quot;?&quot;).</p>\n",dom:true},id:1227}),
s[1228]=a({parent:s[1217],name:"username",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the hyperlink&#39;s URL&#39;s username.</p>\n<p>Can be set, to change the URL&#39;s username.</p>\n",dom:true},id:1228}),
s[1230]=a({parent:s[1229],name:"download",flags:4,mods:0,cat:0,meta:{dom:true},id:1230}),
s[1231]=a({parent:s[1229],name:"hreflang",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the language code of the object.</p>\n",dom:true},id:1231}),
s[1232]=a({parent:s[1229],name:"ping",flags:4,mods:0,cat:0,meta:{dom:true},id:1232}),
s[1233]=a({parent:s[1229],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1233}),
s[1234]=a({parent:s[1229],name:"rel",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the relationship between the object and the destination of the link.</p>\n",dom:true},id:1234}),
s[1235]=a({parent:s[1229],name:"relList",flags:4,mods:64,cat:0,meta:{dom:true},id:1235,valuetype:s[115]}),
s[1236]=a({parent:s[1229],name:"target",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the window or frame at which to target content.</p>\n",dom:true},id:1236}),
s[1237]=a({parent:s[1229],name:"text",flags:4,mods:0,cat:0,meta:{desc:"<p>Retrieves or sets the text of the object as a string.</p>\n",dom:true},id:1237}),
s[1238]=a({parent:s[1229],name:"type",flags:4,mods:0,cat:0,meta:{dom:true},id:1238}),
s[1239]=a({parent:s[1215],name:"abbr",flags:4,mods:524288,cat:0,meta:{dom:true},id:1239,valuetype:s[478]}),
s[1240]=a({parent:s[1215],name:"address",flags:4,mods:524288,cat:0,meta:{dom:true},id:1240,valuetype:s[478]}),
s[1242]=a({parent:s[1],name:"HTMLAreaElement",inherits:s[478],implements:[s[1217]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.</p>\n",dom:true},id:1242}),
s[1241]=a({parent:s[1215],name:"area",flags:4,mods:524288,cat:0,meta:{dom:true},id:1241,valuetype:s[1242]}),
s[1243]=a({parent:s[1242],name:"alt",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a text alternative to the graphic.</p>\n",dom:true},id:1243}),
s[1244]=a({parent:s[1242],name:"coords",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the coordinates of the object.</p>\n",dom:true},id:1244}),
s[1245]=a({parent:s[1242],name:"download",flags:4,mods:0,cat:0,meta:{dom:true},id:1245}),
s[1246]=a({parent:s[1242],name:"ping",flags:4,mods:0,cat:0,meta:{dom:true},id:1246}),
s[1247]=a({parent:s[1242],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1247}),
s[1248]=a({parent:s[1242],name:"rel",flags:4,mods:0,cat:0,meta:{dom:true},id:1248}),
s[1249]=a({parent:s[1242],name:"relList",flags:4,mods:64,cat:0,meta:{dom:true},id:1249,valuetype:s[115]}),
s[1250]=a({parent:s[1242],name:"shape",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the shape of the object.</p>\n",dom:true},id:1250}),
s[1251]=a({parent:s[1242],name:"target",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the window or frame at which to target content.</p>\n",dom:true},id:1251}),
s[1252]=a({parent:s[1215],name:"article",flags:4,mods:524288,cat:0,meta:{dom:true},id:1252,valuetype:s[478]}),
s[1253]=a({parent:s[1215],name:"aside",flags:4,mods:524288,cat:0,meta:{dom:true},id:1253,valuetype:s[478]}),
s[1255]=a({parent:s[1],name:"HTMLMediaElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</p>\n",dom:true},id:1255}),
s[1334]=a({parent:s[1],name:"HTMLAudioElement",inherits:s[1255],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.</p>\n",dom:true},id:1334}),
s[1254]=a({parent:s[1215],name:"audio",flags:4,mods:524288,cat:0,meta:{dom:true},id:1254,valuetype:s[1334]}),
s[1256]=a({parent:s[1255],name:"autoplay",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a value that indicates whether to start playing the media automatically.</p>\n",dom:true},id:1256}),
s[1258]=a({parent:s[1],name:"TimeRanges",flags:65,mods:0,cat:0,meta:{desc:"<p>Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.</p>\n",dom:true},id:1258}),
s[1257]=a({parent:s[1255],name:"buffered",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets a collection of buffered time ranges.</p>\n",dom:true},id:1257,valuetype:s[1258]}),
s[1259]=a({parent:s[1258],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of ranges in the object.</p>\n",dom:true},id:1259}),
s[1260]=a({parent:s[1258],name:"end",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the time for the end of the range with the given index.</p>\n<p>Throws an &quot;IndexSizeError&quot; DOMException if the index is out of range.</p>\n",dom:true},id:1260}),
s[1261]=a({parent:s[1258],name:"start",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the time for the start of the range with the given index.</p>\n<p>Throws an &quot;IndexSizeError&quot; DOMException if the index is out of range.</p>\n",dom:true},id:1261}),
s[1262]=a({parent:s[1255],name:"controls",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).</p>\n",dom:true},id:1262}),
s[1263]=a({parent:s[1255],name:"crossOrigin",flags:4,mods:0,cat:0,meta:{dom:true},id:1263}),
s[1264]=a({parent:s[1255],name:"currentSrc",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.</p>\n",dom:true},id:1264}),
s[1265]=a({parent:s[1255],name:"currentTime",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the current playback position, in seconds.</p>\n",dom:true},id:1265}),
s[1266]=a({parent:s[1255],name:"defaultMuted",flags:4,mods:0,cat:0,meta:{dom:true},id:1266}),
s[1267]=a({parent:s[1255],name:"defaultPlaybackRate",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.</p>\n",dom:true},id:1267}),
s[1268]=a({parent:s[1255],name:"disableRemotePlayback",flags:4,mods:0,cat:0,meta:{dom:true},id:1268}),
s[1269]=a({parent:s[1255],name:"duration",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.</p>\n",dom:true},id:1269}),
s[1270]=a({parent:s[1255],name:"ended",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets information about whether the playback has ended or not.</p>\n",dom:true},id:1270}),
s[1272]=a({parent:s[1],name:"MediaError",flags:65,mods:0,cat:0,meta:{desc:"<p>An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.</p>\n",dom:true},id:1272}),
s[1271]=a({parent:s[1255],name:"error",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns an object representing the current error state of the audio or video element.</p>\n",dom:true},id:1271,valuetype:s[1272]}),
s[1273]=a({parent:s[1272],name:"code",flags:4,mods:64,cat:0,meta:{dom:true},id:1273}),
s[1274]=a({parent:s[1272],name:"message",flags:4,mods:64,cat:0,meta:{dom:true},id:1274}),
s[1275]=a({parent:s[1272],name:"MEDIA_ERR_ABORTED",flags:4,mods:131136,cat:0,meta:{dom:true},id:1275}),
s[1276]=a({parent:s[1272],name:"MEDIA_ERR_DECODE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1276}),
s[1277]=a({parent:s[1272],name:"MEDIA_ERR_NETWORK",flags:4,mods:131136,cat:0,meta:{dom:true},id:1277}),
s[1278]=a({parent:s[1272],name:"MEDIA_ERR_SRC_NOT_SUPPORTED",flags:4,mods:131136,cat:0,meta:{dom:true},id:1278}),
s[1279]=a({parent:s[1255],name:"loop",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a flag to specify whether playback should restart after it completes.</p>\n",dom:true},id:1279}),
s[1281]=a({parent:s[1],name:"MediaKeys",flags:65,mods:0,cat:0,meta:{desc:"<p>This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</p>\n",dom:true},id:1281}),
s[1280]=a({parent:s[1255],name:"mediaKeys",flags:4,mods:64,cat:0,meta:{dom:true},id:1280,valuetype:s[1281]}),
s[1282]=a({parent:s[1281],name:"createSession",flags:8192,mods:0,cat:0,meta:{dom:true},id:1282}),
s[1283]=a({parent:s[1281],name:"setServerCertificate",flags:8192,mods:0,cat:0,meta:{dom:true},id:1283}),
s[1284]=a({parent:s[1255],name:"muted",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.</p>\n",dom:true},id:1284}),
s[1285]=a({parent:s[1255],name:"networkState",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the current network activity for the element.</p>\n",dom:true},id:1285}),
s[1286]=a({parent:s[1255],name:"onencrypted",flags:4,mods:0,cat:0,meta:{dom:true},id:1286}),
s[1287]=a({parent:s[1255],name:"onwaitingforkey",flags:4,mods:0,cat:0,meta:{dom:true},id:1287}),
s[1288]=a({parent:s[1255],name:"paused",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets a flag that specifies whether playback is paused.</p>\n",dom:true},id:1288}),
s[1289]=a({parent:s[1255],name:"playbackRate",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.</p>\n",dom:true},id:1289}),
s[1290]=a({parent:s[1255],name:"played",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets TimeRanges for the current media resource that has been played.</p>\n",dom:true},id:1290,valuetype:s[1258]}),
s[1291]=a({parent:s[1255],name:"preload",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the current playback position, in seconds.</p>\n",dom:true},id:1291}),
s[1292]=a({parent:s[1255],name:"readyState",flags:4,mods:64,cat:0,meta:{dom:true},id:1292}),
s[1294]=a({parent:s[1],name:"RemotePlayback",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:1294}),
s[1293]=a({parent:s[1255],name:"remote",flags:4,mods:64,cat:0,meta:{dom:true},id:1293,valuetype:s[1294]}),
s[1295]=a({parent:s[1294],name:"onconnect",flags:4,mods:0,cat:0,meta:{dom:true},id:1295}),
s[1296]=a({parent:s[1294],name:"onconnecting",flags:4,mods:0,cat:0,meta:{dom:true},id:1296}),
s[1297]=a({parent:s[1294],name:"ondisconnect",flags:4,mods:0,cat:0,meta:{dom:true},id:1297}),
s[1298]=a({parent:s[1294],name:"state",flags:4,mods:64,cat:0,meta:{dom:true},id:1298}),
s[1299]=a({parent:s[1294],name:"cancelWatchAvailability",flags:8192,mods:0,cat:0,meta:{dom:true},id:1299}),
s[1300]=a({parent:s[1294],name:"prompt",flags:8192,mods:0,cat:0,meta:{dom:true},id:1300}),
s[1301]=a({parent:s[1294],name:"watchAvailability",flags:8192,mods:0,cat:0,meta:{dom:true},id:1301}),
s[1302]=a({parent:s[1294],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:1302}),
s[1303]=a({parent:s[1294],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:1303}),
s[1304]=a({parent:s[1255],name:"seekable",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.</p>\n",dom:true},id:1304,valuetype:s[1258]}),
s[1305]=a({parent:s[1255],name:"seeking",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.</p>\n",dom:true},id:1305}),
s[1306]=a({parent:s[1255],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>The address or URL of the a media resource that is to be considered.</p>\n",dom:true},id:1306}),
s[1307]=a({parent:s[1255],name:"srcObject",flags:4,mods:0,cat:0,meta:{dom:true},id:1307}),
s[1309]=a({parent:s[1],name:"TextTrackList",inherits:s[8],flags:65,mods:0,cat:0,meta:{dom:true},id:1309}),
s[1308]=a({parent:s[1255],name:"textTracks",flags:4,mods:64,cat:0,meta:{dom:true},id:1308,valuetype:s[1309]}),
s[1310]=a({parent:s[1309],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:1310}),
s[1311]=a({parent:s[1309],name:"onaddtrack",flags:4,mods:0,cat:0,meta:{dom:true},id:1311}),
s[1312]=a({parent:s[1309],name:"onchange",flags:4,mods:0,cat:0,meta:{dom:true},id:1312}),
s[1313]=a({parent:s[1309],name:"onremovetrack",flags:4,mods:0,cat:0,meta:{dom:true},id:1313}),
s[1314]=a({parent:s[1309],name:"getTrackById",flags:8192,mods:0,cat:0,meta:{dom:true},id:1314}),
s[1315]=a({parent:s[1309],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:1315}),
s[1316]=a({parent:s[1309],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:1316}),
s[1317]=a({parent:s[1255],name:"volume",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the volume level for audio portions of the media element.</p>\n",dom:true},id:1317}),
s[1318]=a({parent:s[1255],name:"addTextTrack",flags:8192,mods:0,cat:0,meta:{dom:true},id:1318}),
s[1319]=a({parent:s[1255],name:"canPlayType",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a string that specifies whether the client can play a given media resource type.</p>\n",dom:true},id:1319}),
s[1320]=a({parent:s[1255],name:"fastSeek",flags:8192,mods:0,cat:0,meta:{dom:true},id:1320}),
s[1321]=a({parent:s[1255],name:"load",flags:8192,mods:0,cat:0,meta:{desc:"<p>Resets the audio or video object and loads a new media resource.</p>\n",dom:true},id:1321}),
s[1322]=a({parent:s[1255],name:"pause",flags:8192,mods:0,cat:0,meta:{desc:"<p>Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.</p>\n",dom:true},id:1322}),
s[1323]=a({parent:s[1255],name:"play",flags:8192,mods:0,cat:0,meta:{desc:"<p>Loads and starts playback of a media resource.</p>\n",dom:true},id:1323}),
s[1324]=a({parent:s[1255],name:"setMediaKeys",flags:8192,mods:0,cat:0,meta:{dom:true},id:1324}),
s[1325]=a({parent:s[1255],name:"HAVE_CURRENT_DATA",flags:4,mods:131136,cat:0,meta:{dom:true},id:1325}),
s[1326]=a({parent:s[1255],name:"HAVE_ENOUGH_DATA",flags:4,mods:131136,cat:0,meta:{dom:true},id:1326}),
s[1327]=a({parent:s[1255],name:"HAVE_FUTURE_DATA",flags:4,mods:131136,cat:0,meta:{dom:true},id:1327}),
s[1328]=a({parent:s[1255],name:"HAVE_METADATA",flags:4,mods:131136,cat:0,meta:{dom:true},id:1328}),
s[1329]=a({parent:s[1255],name:"HAVE_NOTHING",flags:4,mods:131136,cat:0,meta:{dom:true},id:1329}),
s[1330]=a({parent:s[1255],name:"NETWORK_EMPTY",flags:4,mods:131136,cat:0,meta:{dom:true},id:1330}),
s[1331]=a({parent:s[1255],name:"NETWORK_IDLE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1331}),
s[1332]=a({parent:s[1255],name:"NETWORK_LOADING",flags:4,mods:131136,cat:0,meta:{dom:true},id:1332}),
s[1333]=a({parent:s[1255],name:"NETWORK_NO_SOURCE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1333}),
s[1335]=a({parent:s[1215],name:"b",flags:4,mods:524288,cat:0,meta:{dom:true},id:1335,valuetype:s[478]}),
s[1337]=a({parent:s[1],name:"HTMLBaseElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.</p>\n",dom:true},id:1337}),
s[1336]=a({parent:s[1215],name:"base",flags:4,mods:524288,cat:0,meta:{dom:true},id:1336,valuetype:s[1337]}),
s[1338]=a({parent:s[1337],name:"href",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the baseline URL on which relative links are based.</p>\n",dom:true},id:1338}),
s[1339]=a({parent:s[1337],name:"target",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the window or frame at which to target content.</p>\n",dom:true},id:1339}),
s[1340]=a({parent:s[1215],name:"bdi",flags:4,mods:524288,cat:0,meta:{dom:true},id:1340,valuetype:s[478]}),
s[1341]=a({parent:s[1215],name:"bdo",flags:4,mods:524288,cat:0,meta:{dom:true},id:1341,valuetype:s[478]}),
s[1343]=a({parent:s[1],name:"HTMLQuoteElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.</p>\n",dom:true},id:1343}),
s[1342]=a({parent:s[1215],name:"blockquote",flags:4,mods:524288,cat:0,meta:{dom:true},id:1342,valuetype:s[1343]}),
s[1344]=a({parent:s[1343],name:"cite",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves reference information about the object.</p>\n",dom:true},id:1344}),
s[1346]=a({parent:s[1],name:"HTMLBodyElement",inherits:s[478],implements:[s[50]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.</p>\n",dom:true},id:1346}),
s[1345]=a({parent:s[1215],name:"body",flags:4,mods:524288,cat:0,meta:{dom:true},id:1345,valuetype:s[1346]}),
s[1348]=a({parent:s[1],name:"HTMLBRElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>A HTML line break element (<br>). It inherits from HTMLElement.</p>\n",dom:true},id:1348}),
s[1347]=a({parent:s[1215],name:"br",flags:4,mods:524288,cat:0,meta:{dom:true},id:1347,valuetype:s[1348]}),
s[1350]=a({parent:s[1],name:"HTMLButtonElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.</p>\n",dom:true},id:1350}),
s[1349]=a({parent:s[1215],name:"button",flags:4,mods:524288,cat:0,meta:{dom:true},id:1349,valuetype:s[1350]}),
s[1351]=a({parent:s[1350],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1351}),
s[1353]=a({parent:s[1],name:"HTMLFormElement",inherits:s[478],flags:65,mods:786432,cat:0,meta:{desc:"<p>A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.</p>\n",dom:true},id:1353}),
s[1352]=a({parent:s[1350],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1352,valuetype:s[1353]}),
s[1354]=a({parent:s[1353],name:"acceptCharset",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.</p>\n",dom:true},id:1354}),
s[1355]=a({parent:s[1353],name:"action",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the URL to which the form content is sent for processing.</p>\n",dom:true},id:1355}),
s[1356]=a({parent:s[1353],name:"autocomplete",flags:4,mods:0,cat:0,meta:{desc:"<p>Specifies whether autocomplete is applied to an editable text field.</p>\n",dom:true},id:1356}),
s[1358]=a({parent:s[1],name:"HTMLFormControlsCollection",inherits:s[150],flags:65,mods:0,cat:0,meta:{desc:"<p>A collection of HTML form control elements.</p>\n",dom:true},id:1358}),
s[1357]=a({parent:s[1353],name:"elements",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection, in source order, of all controls in a given form.</p>\n",dom:true},id:1357,valuetype:s[1358]}),
s[1359]=a({parent:s[1358],name:"namedItem",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the item with ID or name name from the collection.</p>\n<p>If there are multiple matching items, then a RadioNodeList object containing all those elements is returned.</p>\n",dom:true},id:1359}),
s[1360]=a({parent:s[1353],name:"encoding",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the MIME encoding for the form.</p>\n",dom:true},id:1360}),
s[1361]=a({parent:s[1353],name:"enctype",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the encoding type for the form.</p>\n",dom:true},id:1361}),
s[1362]=a({parent:s[1353],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Sets or retrieves the number of objects in a collection.</p>\n",dom:true},id:1362}),
s[1363]=a({parent:s[1353],name:"method",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves how to send the form data to the server.</p>\n",dom:true},id:1363}),
s[1364]=a({parent:s[1353],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1364}),
s[1365]=a({parent:s[1353],name:"noValidate",flags:4,mods:0,cat:0,meta:{desc:"<p>Designates a form that is not validated when submitted.</p>\n",dom:true},id:1365}),
s[1366]=a({parent:s[1353],name:"target",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the window or frame at which to target content.</p>\n",dom:true},id:1366}),
s[1367]=a({parent:s[1353],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1367}),
s[1368]=a({parent:s[1353],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1368}),
s[1369]=a({parent:s[1353],name:"requestSubmit",flags:8192,mods:0,cat:0,meta:{dom:true},id:1369}),
s[1370]=a({parent:s[1353],name:"reset",flags:8192,mods:0,cat:0,meta:{desc:"<p>Fires when the user resets a form.</p>\n",dom:true},id:1370}),
s[1371]=a({parent:s[1353],name:"submit",flags:8192,mods:0,cat:0,meta:{desc:"<p>Fires when a FORM is about to be submitted.</p>\n",dom:true},id:1371}),
s[1372]=a({parent:s[1350],name:"formAction",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the action attribute (where the data on a form is sent) on the parent form element.</p>\n",dom:true},id:1372}),
s[1373]=a({parent:s[1350],name:"formEnctype",flags:4,mods:0,cat:0,meta:{desc:"<p>Used to override the encoding (formEnctype attribute) specified on the form element.</p>\n",dom:true},id:1373}),
s[1374]=a({parent:s[1350],name:"formMethod",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the submit method attribute previously specified on a form element.</p>\n",dom:true},id:1374}),
s[1375]=a({parent:s[1350],name:"formNoValidate",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a &quot;save draft&quot;-type submit option.</p>\n",dom:true},id:1375}),
s[1376]=a({parent:s[1350],name:"formTarget",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the target attribute on a form element.</p>\n",dom:true},id:1376}),
s[1377]=a({parent:s[1350],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1377,valuetype:s[88]}),
s[1378]=a({parent:s[1350],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1378}),
s[1379]=a({parent:s[1350],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets the classification and default behavior of the button.</p>\n",dom:true},id:1379}),
s[1380]=a({parent:s[1350],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1380}),
s[1382]=a({parent:s[1],name:"ValidityState",flags:65,mods:0,cat:0,meta:{desc:"<p>The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element&#39;s value fails to validate, if it&#39;s not valid.</p>\n",dom:true},id:1382}),
s[1381]=a({parent:s[1350],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1381,valuetype:s[1382]}),
s[1383]=a({parent:s[1382],name:"badInput",flags:4,mods:64,cat:0,meta:{dom:true},id:1383}),
s[1384]=a({parent:s[1382],name:"customError",flags:4,mods:64,cat:0,meta:{dom:true},id:1384}),
s[1385]=a({parent:s[1382],name:"patternMismatch",flags:4,mods:64,cat:0,meta:{dom:true},id:1385}),
s[1386]=a({parent:s[1382],name:"rangeOverflow",flags:4,mods:64,cat:0,meta:{dom:true},id:1386}),
s[1387]=a({parent:s[1382],name:"rangeUnderflow",flags:4,mods:64,cat:0,meta:{dom:true},id:1387}),
s[1388]=a({parent:s[1382],name:"stepMismatch",flags:4,mods:64,cat:0,meta:{dom:true},id:1388}),
s[1389]=a({parent:s[1382],name:"tooLong",flags:4,mods:64,cat:0,meta:{dom:true},id:1389}),
s[1390]=a({parent:s[1382],name:"tooShort",flags:4,mods:64,cat:0,meta:{dom:true},id:1390}),
s[1391]=a({parent:s[1382],name:"typeMismatch",flags:4,mods:64,cat:0,meta:{dom:true},id:1391}),
s[1392]=a({parent:s[1382],name:"valid",flags:4,mods:64,cat:0,meta:{dom:true},id:1392}),
s[1393]=a({parent:s[1382],name:"valueMissing",flags:4,mods:64,cat:0,meta:{dom:true},id:1393}),
s[1394]=a({parent:s[1350],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the default or selected value of the control.</p>\n",dom:true},id:1394}),
s[1395]=a({parent:s[1350],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1395}),
s[1396]=a({parent:s[1350],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1396}),
s[1397]=a({parent:s[1350],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1397}),
s[1398]=a({parent:s[1350],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1398}),
s[1400]=a({parent:s[1],name:"HTMLCanvasElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.</p>\n",dom:true},id:1400}),
s[1399]=a({parent:s[1215],name:"canvas",flags:4,mods:524288,cat:0,meta:{dom:true},id:1399,valuetype:s[1400]}),
s[1401]=a({parent:s[1400],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the height of a canvas element on a document.</p>\n",dom:true},id:1401}),
s[1402]=a({parent:s[1400],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the width of a canvas element on a document.</p>\n",dom:true},id:1402}),
s[1403]=a({parent:s[1400],name:"captureStream",flags:8192,mods:0,cat:0,meta:{dom:true},id:1403}),
s[1404]=a({parent:s[1400],name:"getContext",flags:8192,mods:0,cat:0,meta:{param:{text:"contextId",kind:"parameterName"},desc:"<p>Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.</p>\n",dom:true},id:1404}),
s[1405]=a({parent:s[1400],name:"toBlob",flags:8192,mods:0,cat:0,meta:{dom:true},id:1405}),
s[1406]=a({parent:s[1400],name:"toDataURL",flags:8192,mods:0,cat:0,meta:{param:{text:"type",kind:"parameterName"},desc:"<p>Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.</p>\n",dom:true},id:1406}),
s[1408]=a({parent:s[1],name:"HTMLTableCaptionElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.</p>\n",dom:true},id:1408}),
s[1407]=a({parent:s[1215],name:"caption",flags:4,mods:524288,cat:0,meta:{dom:true},id:1407,valuetype:s[1408]}),
s[1409]=a({parent:s[1215],name:"cite",flags:4,mods:524288,cat:0,meta:{dom:true},id:1409,valuetype:s[478]}),
s[1410]=a({parent:s[1215],name:"code",flags:4,mods:524288,cat:0,meta:{dom:true},id:1410,valuetype:s[478]}),
s[1412]=a({parent:s[1],name:"HTMLTableColElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.</p>\n",dom:true},id:1412}),
s[1411]=a({parent:s[1215],name:"col",flags:4,mods:524288,cat:0,meta:{dom:true},id:1411,valuetype:s[1412]}),
s[1413]=a({parent:s[1412],name:"span",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the number of columns in the group.</p>\n",dom:true},id:1413}),
s[1414]=a({parent:s[1215],name:"colgroup",flags:4,mods:524288,cat:0,meta:{dom:true},id:1414,valuetype:s[1412]}),
s[1416]=a({parent:s[1],name:"HTMLDataElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.</p>\n",dom:true},id:1416}),
s[1415]=a({parent:s[1215],name:"data",flags:4,mods:524288,cat:0,meta:{dom:true},id:1415,valuetype:s[1416]}),
s[1417]=a({parent:s[1416],name:"value",flags:4,mods:0,cat:0,meta:{dom:true},id:1417}),
s[1419]=a({parent:s[1],name:"HTMLDataListElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.</p>\n",dom:true},id:1419}),
s[1418]=a({parent:s[1215],name:"datalist",flags:4,mods:524288,cat:0,meta:{dom:true},id:1418,valuetype:s[1419]}),
s[1420]=a({parent:s[1419],name:"options",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns an HTMLCollection of the option elements of the datalist element.</p>\n",dom:true},id:1420,valuetype:s[592]}),
s[1421]=a({parent:s[1215],name:"dd",flags:4,mods:524288,cat:0,meta:{dom:true},id:1421,valuetype:s[478]}),
s[1423]=a({parent:s[1],name:"HTMLModElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.</p>\n",dom:true},id:1423}),
s[1422]=a({parent:s[1215],name:"del",flags:4,mods:524288,cat:0,meta:{dom:true},id:1422,valuetype:s[1423]}),
s[1424]=a({parent:s[1423],name:"cite",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves reference information about the object.</p>\n",dom:true},id:1424}),
s[1425]=a({parent:s[1423],name:"dateTime",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the date and time of a modification to the object.</p>\n",dom:true},id:1425}),
s[1427]=a({parent:s[1],name:"HTMLDetailsElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{dom:true},id:1427}),
s[1426]=a({parent:s[1215],name:"details",flags:4,mods:524288,cat:0,meta:{dom:true},id:1426,valuetype:s[1427]}),
s[1428]=a({parent:s[1427],name:"open",flags:4,mods:0,cat:0,meta:{dom:true},id:1428}),
s[1429]=a({parent:s[1215],name:"dfn",flags:4,mods:524288,cat:0,meta:{dom:true},id:1429,valuetype:s[478]}),
s[1430]=a({parent:s[1215],name:"dialog",flags:4,mods:524288,cat:0,meta:{dom:true},id:1430,valuetype:null}),
s[1431]=a({parent:s[1215],name:"dir",flags:4,mods:524288,cat:0,meta:{dom:true},id:1431,valuetype:null}),
s[1433]=a({parent:s[1],name:"HTMLDivElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.</p>\n",dom:true},id:1433}),
s[1432]=a({parent:s[1215],name:"div",flags:4,mods:524288,cat:0,meta:{dom:true},id:1432,valuetype:s[1433]}),
s[1435]=a({parent:s[1],name:"HTMLDListElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.</p>\n",dom:true},id:1435}),
s[1434]=a({parent:s[1215],name:"dl",flags:4,mods:524288,cat:0,meta:{dom:true},id:1434,valuetype:s[1435]}),
s[1436]=a({parent:s[1215],name:"dt",flags:4,mods:524288,cat:0,meta:{dom:true},id:1436,valuetype:s[478]}),
s[1437]=a({parent:s[1215],name:"em",flags:4,mods:524288,cat:0,meta:{dom:true},id:1437,valuetype:s[478]}),
s[1439]=a({parent:s[1],name:"HTMLEmbedElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.</p>\n",dom:true},id:1439}),
s[1438]=a({parent:s[1215],name:"embed",flags:4,mods:524288,cat:0,meta:{dom:true},id:1438,valuetype:s[1439]}),
s[1440]=a({parent:s[1439],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the height of the object.</p>\n",dom:true},id:1440}),
s[1441]=a({parent:s[1439],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a URL to be loaded by the object.</p>\n",dom:true},id:1441}),
s[1442]=a({parent:s[1439],name:"type",flags:4,mods:0,cat:0,meta:{dom:true},id:1442}),
s[1443]=a({parent:s[1439],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1443}),
s[1444]=a({parent:s[1439],name:"getSVGDocument",flags:8192,mods:0,cat:0,meta:{dom:true},id:1444}),
s[1446]=a({parent:s[1],name:"HTMLFieldSetElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.</p>\n",dom:true},id:1446}),
s[1445]=a({parent:s[1215],name:"fieldset",flags:4,mods:524288,cat:0,meta:{dom:true},id:1445,valuetype:s[1446]}),
s[1447]=a({parent:s[1446],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1447}),
s[1448]=a({parent:s[1446],name:"elements",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns an HTMLCollection of the form controls in the element.</p>\n",dom:true},id:1448,valuetype:s[153]}),
s[1449]=a({parent:s[1446],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1449,valuetype:s[1353]}),
s[1450]=a({parent:s[1446],name:"name",flags:4,mods:0,cat:0,meta:{dom:true},id:1450}),
s[1451]=a({parent:s[1446],name:"type",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the string &quot;fieldset&quot;.</p>\n",dom:true},id:1451}),
s[1452]=a({parent:s[1446],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1452}),
s[1453]=a({parent:s[1446],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1453,valuetype:s[1382]}),
s[1454]=a({parent:s[1446],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1454}),
s[1455]=a({parent:s[1446],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1455}),
s[1456]=a({parent:s[1446],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1456}),
s[1457]=a({parent:s[1446],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1457}),
s[1458]=a({parent:s[1215],name:"figcaption",flags:4,mods:524288,cat:0,meta:{dom:true},id:1458,valuetype:s[478]}),
s[1459]=a({parent:s[1215],name:"figure",flags:4,mods:524288,cat:0,meta:{dom:true},id:1459,valuetype:s[478]}),
s[1460]=a({parent:s[1215],name:"font",flags:4,mods:524288,cat:0,meta:{dom:true},id:1460,valuetype:null}),
s[1461]=a({parent:s[1215],name:"footer",flags:4,mods:524288,cat:0,meta:{dom:true},id:1461,valuetype:s[478]}),
s[1462]=a({parent:s[1215],name:"form",flags:4,mods:786432,cat:0,meta:{dom:true},id:1462,valuetype:s[1353]}),
s[1463]=a({parent:s[1215],name:"frame",flags:4,mods:524288,cat:0,meta:{dom:true},id:1463,valuetype:null}),
s[1464]=a({parent:s[1215],name:"frameset",flags:4,mods:524288,cat:0,meta:{dom:true},id:1464,valuetype:null}),
s[1466]=a({parent:s[1],name:"HTMLHeadingElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>The different heading elements. It inherits methods and properties from the HTMLElement interface.</p>\n",dom:true},id:1466}),
s[1465]=a({parent:s[1215],name:"h1",flags:4,mods:524288,cat:0,meta:{dom:true},id:1465,valuetype:s[1466]}),
s[1467]=a({parent:s[1215],name:"h2",flags:4,mods:524288,cat:0,meta:{dom:true},id:1467,valuetype:s[1466]}),
s[1468]=a({parent:s[1215],name:"h3",flags:4,mods:524288,cat:0,meta:{dom:true},id:1468,valuetype:s[1466]}),
s[1469]=a({parent:s[1215],name:"h4",flags:4,mods:524288,cat:0,meta:{dom:true},id:1469,valuetype:s[1466]}),
s[1470]=a({parent:s[1215],name:"h5",flags:4,mods:524288,cat:0,meta:{dom:true},id:1470,valuetype:s[1466]}),
s[1471]=a({parent:s[1215],name:"h6",flags:4,mods:524288,cat:0,meta:{dom:true},id:1471,valuetype:s[1466]}),
s[1472]=a({parent:s[1215],name:"head",flags:4,mods:524288,cat:0,meta:{dom:true},id:1472,valuetype:s[598]}),
s[1473]=a({parent:s[1215],name:"header",flags:4,mods:524288,cat:0,meta:{dom:true},id:1473,valuetype:s[478]}),
s[1474]=a({parent:s[1215],name:"hgroup",flags:4,mods:524288,cat:0,meta:{dom:true},id:1474,valuetype:s[478]}),
s[1476]=a({parent:s[1],name:"HTMLHRElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.</p>\n",dom:true},id:1476}),
s[1475]=a({parent:s[1215],name:"hr",flags:4,mods:524288,cat:0,meta:{dom:true},id:1475,valuetype:s[1476]}),
s[1478]=a({parent:s[1],name:"HTMLHtmlElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.</p>\n",dom:true},id:1478}),
s[1477]=a({parent:s[1215],name:"html",flags:4,mods:524288,cat:0,meta:{dom:true},id:1477,valuetype:s[1478]}),
s[1479]=a({parent:s[1215],name:"i",flags:4,mods:524288,cat:0,meta:{dom:true},id:1479,valuetype:s[478]}),
s[1481]=a({parent:s[1],name:"HTMLIFrameElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.</p>\n",dom:true},id:1481}),
s[1480]=a({parent:s[1215],name:"iframe",flags:4,mods:524288,cat:0,meta:{dom:true},id:1480,valuetype:s[1481]}),
s[1482]=a({parent:s[1481],name:"allow",flags:4,mods:0,cat:0,meta:{dom:true},id:1482}),
s[1483]=a({parent:s[1481],name:"allowFullscreen",flags:4,mods:0,cat:0,meta:{dom:true},id:1483}),
s[1484]=a({parent:s[1481],name:"contentDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Retrieves the document object of the page or frame.</p>\n",dom:true},id:1484,valuetype:s[567]}),
s[1485]=a({parent:s[1481],name:"contentWindow",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the object of the specified.</p>\n",dom:true},id:1485,valuetype:s[71]}),
s[1486]=a({parent:s[1481],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the height of the object.</p>\n",dom:true},id:1486}),
s[1487]=a({parent:s[1481],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the frame name.</p>\n",dom:true},id:1487}),
s[1488]=a({parent:s[1481],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1488}),
s[1489]=a({parent:s[1481],name:"sandbox",flags:4,mods:64,cat:0,meta:{dom:true},id:1489,valuetype:s[115]}),
s[1490]=a({parent:s[1481],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a URL to be loaded by the object.</p>\n",dom:true},id:1490}),
s[1491]=a({parent:s[1481],name:"srcdoc",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrives the content of the page that is to contain.</p>\n",dom:true},id:1491}),
s[1492]=a({parent:s[1481],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1492}),
s[1493]=a({parent:s[1481],name:"getSVGDocument",flags:8192,mods:0,cat:0,meta:{dom:true},id:1493}),
s[1495]=a({parent:s[1],name:"HTMLImageElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods for manipulating <img> elements.</p>\n",dom:true},id:1495}),
s[1494]=a({parent:s[1215],name:"img",flags:4,mods:524288,cat:0,meta:{dom:true},id:1494,valuetype:s[1495]}),
s[1496]=a({parent:s[1495],name:"alt",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a text alternative to the graphic.</p>\n",dom:true},id:1496}),
s[1497]=a({parent:s[1495],name:"complete",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves whether the object is fully loaded.</p>\n",dom:true},id:1497}),
s[1498]=a({parent:s[1495],name:"crossOrigin",flags:4,mods:0,cat:0,meta:{dom:true},id:1498}),
s[1499]=a({parent:s[1495],name:"currentSrc",flags:4,mods:64,cat:0,meta:{dom:true},id:1499}),
s[1500]=a({parent:s[1495],name:"decoding",flags:4,mods:0,cat:0,meta:{dom:true},id:1500}),
s[1501]=a({parent:s[1495],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the height of the object.</p>\n",dom:true},id:1501}),
s[1502]=a({parent:s[1495],name:"isMap",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves whether the image is a server-side image map.</p>\n",dom:true},id:1502}),
s[1503]=a({parent:s[1495],name:"loading",flags:4,mods:0,cat:0,meta:{dom:true},id:1503}),
s[1504]=a({parent:s[1495],name:"naturalHeight",flags:4,mods:64,cat:0,meta:{desc:"<p>The original height of the image resource before sizing.</p>\n",dom:true},id:1504}),
s[1505]=a({parent:s[1495],name:"naturalWidth",flags:4,mods:64,cat:0,meta:{desc:"<p>The original width of the image resource before sizing.</p>\n",dom:true},id:1505}),
s[1506]=a({parent:s[1495],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1506}),
s[1507]=a({parent:s[1495],name:"sizes",flags:4,mods:0,cat:0,meta:{dom:true},id:1507}),
s[1508]=a({parent:s[1495],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>The address or URL of the a media resource that is to be considered.</p>\n",dom:true},id:1508}),
s[1509]=a({parent:s[1495],name:"srcset",flags:4,mods:0,cat:0,meta:{dom:true},id:1509}),
s[1510]=a({parent:s[1495],name:"useMap",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.</p>\n",dom:true},id:1510}),
s[1511]=a({parent:s[1495],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1511}),
s[1512]=a({parent:s[1495],name:"x",flags:4,mods:64,cat:0,meta:{dom:true},id:1512}),
s[1513]=a({parent:s[1495],name:"y",flags:4,mods:64,cat:0,meta:{dom:true},id:1513}),
s[1514]=a({parent:s[1495],name:"decode",flags:8192,mods:0,cat:0,meta:{dom:true},id:1514}),
s[1516]=a({parent:s[1],name:"HTMLInputElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.</p>\n",dom:true},id:1516}),
s[1515]=a({parent:s[1215],name:"input",flags:4,mods:524288,cat:0,meta:{dom:true},id:1515,valuetype:s[1516]}),
s[1517]=a({parent:s[1516],name:"accept",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a comma-separated list of content types.</p>\n",dom:true},id:1517}),
s[1518]=a({parent:s[1516],name:"alt",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a text alternative to the graphic.</p>\n",dom:true},id:1518}),
s[1519]=a({parent:s[1516],name:"autocomplete",flags:4,mods:0,cat:0,meta:{desc:"<p>Specifies whether autocomplete is applied to an editable text field.</p>\n",dom:true},id:1519}),
s[1520]=a({parent:s[1516],name:"capture",flags:4,mods:0,cat:0,meta:{dom:true},id:1520}),
s[1521]=a({parent:s[1516],name:"checked",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the state of the check box or radio button.</p>\n",dom:true},id:1521}),
s[1522]=a({parent:s[1516],name:"defaultChecked",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the state of the check box or radio button.</p>\n",dom:true},id:1522}),
s[1523]=a({parent:s[1516],name:"defaultValue",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the initial contents of the object.</p>\n",dom:true},id:1523}),
s[1524]=a({parent:s[1516],name:"dirName",flags:4,mods:0,cat:0,meta:{dom:true},id:1524}),
s[1525]=a({parent:s[1516],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1525}),
s[1526]=a({parent:s[1516],name:"files",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns a FileList object on a file type input object.</p>\n",dom:true},id:1526,valuetype:s[1032]}),
s[1527]=a({parent:s[1516],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1527,valuetype:s[1353]}),
s[1528]=a({parent:s[1516],name:"formAction",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the action attribute (where the data on a form is sent) on the parent form element.</p>\n",dom:true},id:1528}),
s[1529]=a({parent:s[1516],name:"formEnctype",flags:4,mods:0,cat:0,meta:{desc:"<p>Used to override the encoding (formEnctype attribute) specified on the form element.</p>\n",dom:true},id:1529}),
s[1530]=a({parent:s[1516],name:"formMethod",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the submit method attribute previously specified on a form element.</p>\n",dom:true},id:1530}),
s[1531]=a({parent:s[1516],name:"formNoValidate",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a &quot;save draft&quot;-type submit option.</p>\n",dom:true},id:1531}),
s[1532]=a({parent:s[1516],name:"formTarget",flags:4,mods:0,cat:0,meta:{desc:"<p>Overrides the target attribute on a form element.</p>\n",dom:true},id:1532}),
s[1533]=a({parent:s[1516],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the height of the object.</p>\n",dom:true},id:1533}),
s[1534]=a({parent:s[1516],name:"indeterminate",flags:4,mods:0,cat:0,meta:{desc:"<p>When set, overrides the rendering of checkbox controls so that the current value is not visible.</p>\n",dom:true},id:1534}),
s[1535]=a({parent:s[1516],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1535,valuetype:s[88]}),
s[1536]=a({parent:s[1516],name:"list",flags:4,mods:524352,cat:0,meta:{desc:"<p>Specifies the ID of a pre-defined datalist of options for an input element.</p>\n",dom:true},id:1536,valuetype:s[478]}),
s[1537]=a({parent:s[1516],name:"max",flags:4,mods:0,cat:0,meta:{desc:"<p>Defines the maximum acceptable value for an input element with type=&quot;number&quot;.When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.</p>\n",dom:true},id:1537}),
s[1538]=a({parent:s[1516],name:"maxLength",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the maximum number of characters that the user can enter in a text control.</p>\n",dom:true},id:1538}),
s[1539]=a({parent:s[1516],name:"min",flags:4,mods:0,cat:0,meta:{desc:"<p>Defines the minimum acceptable value for an input element with type=&quot;number&quot;. When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.</p>\n",dom:true},id:1539}),
s[1540]=a({parent:s[1516],name:"minLength",flags:4,mods:0,cat:0,meta:{dom:true},id:1540}),
s[1541]=a({parent:s[1516],name:"multiple",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.</p>\n",dom:true},id:1541}),
s[1542]=a({parent:s[1516],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1542}),
s[1543]=a({parent:s[1516],name:"pattern",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a string containing a regular expression that the user&#39;s input must match.</p>\n",dom:true},id:1543}),
s[1544]=a({parent:s[1516],name:"placeholder",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.</p>\n",dom:true},id:1544}),
s[1545]=a({parent:s[1516],name:"readOnly",flags:4,mods:0,cat:0,meta:{dom:true},id:1545}),
s[1546]=a({parent:s[1516],name:"required",flags:4,mods:0,cat:0,meta:{desc:"<p>When present, marks an element that can&#39;t be submitted without a value.</p>\n",dom:true},id:1546}),
s[1547]=a({parent:s[1516],name:"selectionDirection",flags:4,mods:0,cat:0,meta:{dom:true},id:1547}),
s[1548]=a({parent:s[1516],name:"selectionEnd",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the end position or offset of a text selection.</p>\n",dom:true},id:1548}),
s[1549]=a({parent:s[1516],name:"selectionStart",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the starting position or offset of a text selection.</p>\n",dom:true},id:1549}),
s[1550]=a({parent:s[1516],name:"size",flags:4,mods:0,cat:0,meta:{dom:true},id:1550}),
s[1551]=a({parent:s[1516],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>The address or URL of the a media resource that is to be considered.</p>\n",dom:true},id:1551}),
s[1552]=a({parent:s[1516],name:"step",flags:4,mods:0,cat:0,meta:{desc:"<p>Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.</p>\n",dom:true},id:1552}),
s[1553]=a({parent:s[1516],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the content type of the object.</p>\n",dom:true},id:1553}),
s[1554]=a({parent:s[1516],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1554}),
s[1555]=a({parent:s[1516],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1555,valuetype:s[1382]}),
s[1556]=a({parent:s[1516],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the value of the data at the cursor&#39;s current position.</p>\n",dom:true},id:1556}),
s[1558]=a({parent:s[1],name:"Date",flags:65,mods:0,cat:0,meta:{desc:"<p>Enables basic storage and retrieval of dates and times.</p>\n"},id:1558}),
s[1557]=a({parent:s[1516],name:"valueAsDate",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns a Date object representing the form control&#39;s value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an &quot;InvalidStateError&quot; DOMException if the control isn&#39;t date- or time-based.</p>\n",dom:true},id:1557,valuetype:s[1558]}),
s[1559]=a({parent:s[1558],name:"toDateString",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a date as a string value.</p>\n"},id:1559}),
s[1560]=a({parent:s[1558],name:"toTimeString",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a time as a string value.</p>\n"},id:1560}),
s[1561]=a({parent:s[1558],name:"toLocaleDateString",flags:8192,mods:0,cat:0,meta:{param:{text:"options",kind:"parameterName"},desc:"<p>Returns a date as a string value appropriate to the host environment&#39;s current locale.\nConverts a date to a string by using the current or specified locale.</p>\n"},id:1561}),
s[1562]=a({parent:s[1558],name:"toLocaleTimeString",flags:8192,mods:0,cat:0,meta:{param:{text:"options",kind:"parameterName"},desc:"<p>Returns a time as a string value appropriate to the host environment&#39;s current locale.\nConverts a time to a string by using the current or specified locale.</p>\n"},id:1562}),
s[1563]=a({parent:s[1558],name:"getTime",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the time value in milliseconds.</p>\n"},id:1563}),
s[1564]=a({parent:s[1558],name:"getFullYear",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the year, using local time.</p>\n"},id:1564}),
s[1565]=a({parent:s[1558],name:"getUTCFullYear",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the year using Universal Coordinated Time (UTC).</p>\n"},id:1565}),
s[1566]=a({parent:s[1558],name:"getMonth",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the month, using local time.</p>\n"},id:1566}),
s[1567]=a({parent:s[1558],name:"getUTCMonth",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the month of a Date object using Universal Coordinated Time (UTC).</p>\n"},id:1567}),
s[1568]=a({parent:s[1558],name:"getDate",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the day-of-the-month, using local time.</p>\n"},id:1568}),
s[1569]=a({parent:s[1558],name:"getUTCDate",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the day-of-the-month, using Universal Coordinated Time (UTC).</p>\n"},id:1569}),
s[1570]=a({parent:s[1558],name:"getDay",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the day of the week, using local time.</p>\n"},id:1570}),
s[1571]=a({parent:s[1558],name:"getUTCDay",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the day of the week using Universal Coordinated Time (UTC).</p>\n"},id:1571}),
s[1572]=a({parent:s[1558],name:"getHours",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the hours in a date, using local time.</p>\n"},id:1572}),
s[1573]=a({parent:s[1558],name:"getUTCHours",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the hours value in a Date object using Universal Coordinated Time (UTC).</p>\n"},id:1573}),
s[1574]=a({parent:s[1558],name:"getMinutes",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the minutes of a Date object, using local time.</p>\n"},id:1574}),
s[1575]=a({parent:s[1558],name:"getUTCMinutes",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the minutes of a Date object using Universal Coordinated Time (UTC).</p>\n"},id:1575}),
s[1576]=a({parent:s[1558],name:"getSeconds",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the seconds of a Date object, using local time.</p>\n"},id:1576}),
s[1577]=a({parent:s[1558],name:"getUTCSeconds",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the seconds of a Date object using Universal Coordinated Time (UTC).</p>\n"},id:1577}),
s[1578]=a({parent:s[1558],name:"getMilliseconds",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the milliseconds of a Date, using local time.</p>\n"},id:1578}),
s[1579]=a({parent:s[1558],name:"getUTCMilliseconds",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).</p>\n"},id:1579}),
s[1580]=a({parent:s[1558],name:"getTimezoneOffset",flags:8192,mods:0,cat:0,meta:{desc:"<p>Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).</p>\n"},id:1580}),
s[1581]=a({parent:s[1558],name:"setTime",flags:8192,mods:0,cat:0,meta:{param:{text:"time",kind:"parameterName"},desc:"<p>Sets the date and time value in the Date object.</p>\n"},id:1581}),
s[1582]=a({parent:s[1558],name:"setMilliseconds",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the milliseconds value in the Date object using local time.</p>\n"},id:1582}),
s[1583]=a({parent:s[1558],name:"setUTCMilliseconds",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1583}),
s[1584]=a({parent:s[1558],name:"setSeconds",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the seconds value in the Date object using local time.</p>\n"},id:1584}),
s[1585]=a({parent:s[1558],name:"setUTCSeconds",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the seconds value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1585}),
s[1586]=a({parent:s[1558],name:"setMinutes",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the minutes value in the Date object using local time.</p>\n"},id:1586}),
s[1587]=a({parent:s[1558],name:"setUTCMinutes",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the minutes value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1587}),
s[1588]=a({parent:s[1558],name:"setHours",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the hour value in the Date object using local time.</p>\n"},id:1588}),
s[1589]=a({parent:s[1558],name:"setUTCHours",flags:8192,mods:0,cat:0,meta:{param:{text:"ms",kind:"parameterName"},desc:"<p>Sets the hours value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1589}),
s[1590]=a({parent:s[1558],name:"setDate",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the numeric day-of-the-month value of the Date object using local time.</p>\n"},id:1590}),
s[1591]=a({parent:s[1558],name:"setUTCDate",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1591}),
s[1592]=a({parent:s[1558],name:"setMonth",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the month value in the Date object using local time.</p>\n"},id:1592}),
s[1593]=a({parent:s[1558],name:"setUTCMonth",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the month value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1593}),
s[1594]=a({parent:s[1558],name:"setFullYear",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the year of the Date object using local time.</p>\n"},id:1594}),
s[1595]=a({parent:s[1558],name:"setUTCFullYear",flags:8192,mods:0,cat:0,meta:{param:{text:"date",kind:"parameterName"},desc:"<p>Sets the year value in the Date object using Universal Coordinated Time (UTC).</p>\n"},id:1595}),
s[1596]=a({parent:s[1558],name:"toUTCString",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a date converted to a string using Universal Coordinated Time (UTC).</p>\n"},id:1596}),
s[1597]=a({parent:s[1558],name:"toISOString",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a date as a string value in ISO format.</p>\n"},id:1597}),
s[1598]=a({parent:s[1558],name:"toJSON",flags:8192,mods:0,cat:0,meta:{desc:"<p>Used by the JSON.stringify method to enable the transformation of an object&#39;s data for JavaScript Object Notation (JSON) serialization.</p>\n"},id:1598}),
s[1599]=a({parent:s[1516],name:"valueAsNumber",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the input field value as a number.</p>\n",dom:true},id:1599}),
s[1600]=a({parent:s[1516],name:"webkitEntries",flags:4,mods:64,cat:0,meta:{dom:true},id:1600,valuetype:s[284]}),
s[1601]=a({parent:s[1516],name:"webkitdirectory",flags:4,mods:0,cat:0,meta:{dom:true},id:1601}),
s[1602]=a({parent:s[1516],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1602}),
s[1603]=a({parent:s[1516],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1603}),
s[1604]=a({parent:s[1516],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1604}),
s[1605]=a({parent:s[1516],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1605}),
s[1606]=a({parent:s[1516],name:"select",flags:8192,mods:0,cat:0,meta:{desc:"<p>Makes the selection equal to the current object.</p>\n",dom:true},id:1606}),
s[1607]=a({parent:s[1516],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1607}),
s[1608]=a({parent:s[1516],name:"setRangeText",flags:8192,mods:0,cat:0,meta:{dom:true},id:1608}),
s[1609]=a({parent:s[1516],name:"setSelectionRange",flags:8192,mods:0,cat:0,meta:{param:{text:"direction",kind:"parameterName"},desc:"<p>Sets the start and end positions of a selection in a text field.</p>\n",dom:true},id:1609}),
s[1610]=a({parent:s[1516],name:"stepDown",flags:8192,mods:0,cat:0,meta:{param:{text:"n",kind:"parameterName"},desc:"<p>Decrements a range input control&#39;s value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control&#39;s step value multiplied by the parameter&#39;s value.</p>\n",dom:true},id:1610}),
s[1611]=a({parent:s[1516],name:"stepUp",flags:8192,mods:0,cat:0,meta:{param:{text:"n",kind:"parameterName"},desc:"<p>Increments a range input control&#39;s value by the value given by the Step attribute. If the optional parameter is used, will increment the input control&#39;s value by that value.</p>\n",dom:true},id:1611}),
s[1612]=a({parent:s[1215],name:"ins",flags:4,mods:524288,cat:0,meta:{dom:true},id:1612,valuetype:s[1423]}),
s[1613]=a({parent:s[1215],name:"kbd",flags:4,mods:524288,cat:0,meta:{dom:true},id:1613,valuetype:s[478]}),
s[1615]=a({parent:s[1],name:"HTMLLabelElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.</p>\n",dom:true},id:1615}),
s[1614]=a({parent:s[1215],name:"label",flags:4,mods:524288,cat:0,meta:{dom:true},id:1614,valuetype:s[1615]}),
s[1616]=a({parent:s[1615],name:"control",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the form control that is associated with this element.</p>\n",dom:true},id:1616,valuetype:s[478]}),
s[1617]=a({parent:s[1615],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1617,valuetype:s[1353]}),
s[1618]=a({parent:s[1615],name:"htmlFor",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the object to which the given label object is assigned.</p>\n",dom:true},id:1618}),
s[1620]=a({parent:s[1],name:"HTMLLegendElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.</p>\n",dom:true},id:1620}),
s[1619]=a({parent:s[1215],name:"legend",flags:4,mods:524288,cat:0,meta:{dom:true},id:1619,valuetype:s[1620]}),
s[1621]=a({parent:s[1620],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1621,valuetype:s[1353]}),
s[1623]=a({parent:s[1],name:"HTMLLIElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.</p>\n",dom:true},id:1623}),
s[1622]=a({parent:s[1215],name:"li",flags:4,mods:524288,cat:0,meta:{dom:true},id:1622,valuetype:s[1623]}),
s[1624]=a({parent:s[1623],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value of a list item.</p>\n",dom:true},id:1624}),
s[1626]=a({parent:s[1],name:"LinkStyle",flags:64,mods:0,cat:0,meta:{},id:1626}),
s[1664]=a({parent:s[1],name:"HTMLLinkElement",inherits:s[478],implements:[s[1626]],flags:65,mods:524288,cat:0,meta:{desc:"<p>Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.</p>\n",dom:true},id:1664}),
s[1625]=a({parent:s[1215],name:"link",flags:4,mods:524288,cat:0,meta:{dom:true},id:1625,valuetype:s[1664]}),
s[1628]=a({parent:s[1],name:"StyleSheet",flags:65,mods:0,cat:0,meta:{desc:"<p>A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.</p>\n",dom:true},id:1628}),
s[1642]=a({parent:s[1],name:"CSSStyleSheet",inherits:s[1628],flags:65,mods:0,cat:0,meta:{desc:"<p>A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.</p>\n",dom:true},id:1642}),
s[1627]=a({parent:s[1626],name:"sheet",flags:4,mods:64,cat:0,meta:{dom:true},id:1627,valuetype:s[1642]}),
s[1629]=a({parent:s[1628],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1629}),
s[1630]=a({parent:s[1628],name:"href",flags:4,mods:64,cat:0,meta:{dom:true},id:1630}),
s[1632]=a({parent:s[1],name:"MediaList",flags:65,mods:0,cat:0,meta:{dom:true},id:1632}),
s[1631]=a({parent:s[1628],name:"media",flags:4,mods:64,cat:0,meta:{dom:true},id:1631,valuetype:s[1632]}),
s[1633]=a({parent:s[1632],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:1633}),
s[1634]=a({parent:s[1632],name:"mediaText",flags:4,mods:0,cat:0,meta:{dom:true},id:1634}),
s[1635]=a({parent:s[1632],name:"appendMedium",flags:8192,mods:0,cat:0,meta:{dom:true},id:1635}),
s[1636]=a({parent:s[1632],name:"deleteMedium",flags:8192,mods:0,cat:0,meta:{dom:true},id:1636}),
s[1637]=a({parent:s[1632],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:1637}),
s[1638]=a({parent:s[1628],name:"ownerNode",flags:4,mods:524352,cat:0,meta:{dom:true},id:1638}),
s[1639]=a({parent:s[1628],name:"parentStyleSheet",flags:4,mods:64,cat:0,meta:{dom:true},id:1639,valuetype:s[1642]}),
s[1640]=a({parent:s[1628],name:"title",flags:4,mods:64,cat:0,meta:{dom:true},id:1640}),
s[1641]=a({parent:s[1628],name:"type",flags:4,mods:64,cat:0,meta:{dom:true},id:1641}),
s[1644]=a({parent:s[1],name:"CSSRuleList",flags:65,mods:0,cat:0,meta:{desc:"<p>A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.</p>\n",dom:true},id:1644}),
s[1643]=a({parent:s[1642],name:"cssRules",flags:4,mods:64,cat:0,meta:{dom:true},id:1643,valuetype:s[1644]}),
s[1645]=a({parent:s[1644],name:"length",flags:4,mods:64,cat:0,meta:{dom:true},id:1645}),
s[1646]=a({parent:s[1644],name:"item",flags:8192,mods:0,cat:0,meta:{dom:true},id:1646}),
s[1648]=a({parent:s[1],name:"CSSRule",flags:65,mods:0,cat:0,meta:{desc:"<p>A single CSS rule. There are several types of rules, listed in the Type constants section below.</p>\n",dom:true},id:1648}),
s[1647]=a({parent:s[1642],name:"ownerRule",flags:4,mods:64,cat:0,meta:{dom:true},id:1647,valuetype:s[1648]}),
s[1649]=a({parent:s[1648],name:"cssText",flags:4,mods:0,cat:0,meta:{dom:true},id:1649}),
s[1650]=a({parent:s[1648],name:"parentRule",flags:4,mods:64,cat:0,meta:{dom:true},id:1650,valuetype:s[1648]}),
s[1651]=a({parent:s[1648],name:"parentStyleSheet",flags:4,mods:64,cat:0,meta:{dom:true},id:1651,valuetype:s[1642]}),
s[1652]=a({parent:s[1648],name:"CHARSET_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1652}),
s[1653]=a({parent:s[1648],name:"FONT_FACE_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1653}),
s[1654]=a({parent:s[1648],name:"IMPORT_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1654}),
s[1655]=a({parent:s[1648],name:"KEYFRAMES_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1655}),
s[1656]=a({parent:s[1648],name:"KEYFRAME_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1656}),
s[1657]=a({parent:s[1648],name:"MEDIA_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1657}),
s[1658]=a({parent:s[1648],name:"NAMESPACE_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1658}),
s[1659]=a({parent:s[1648],name:"PAGE_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1659}),
s[1660]=a({parent:s[1648],name:"STYLE_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1660}),
s[1661]=a({parent:s[1648],name:"SUPPORTS_RULE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1661}),
s[1662]=a({parent:s[1642],name:"deleteRule",flags:8192,mods:0,cat:0,meta:{dom:true},id:1662}),
s[1663]=a({parent:s[1642],name:"insertRule",flags:8192,mods:0,cat:0,meta:{dom:true},id:1663}),
s[1665]=a({parent:s[1664],name:"as",flags:4,mods:0,cat:0,meta:{dom:true},id:1665}),
s[1666]=a({parent:s[1664],name:"crossOrigin",flags:4,mods:0,cat:0,meta:{dom:true},id:1666}),
s[1667]=a({parent:s[1664],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1667}),
s[1668]=a({parent:s[1664],name:"href",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a destination URL or an anchor point.</p>\n",dom:true},id:1668}),
s[1669]=a({parent:s[1664],name:"hreflang",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the language code of the object.</p>\n",dom:true},id:1669}),
s[1670]=a({parent:s[1664],name:"imageSizes",flags:4,mods:0,cat:0,meta:{dom:true},id:1670}),
s[1671]=a({parent:s[1664],name:"imageSrcset",flags:4,mods:0,cat:0,meta:{dom:true},id:1671}),
s[1672]=a({parent:s[1664],name:"integrity",flags:4,mods:0,cat:0,meta:{dom:true},id:1672}),
s[1673]=a({parent:s[1664],name:"media",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the media type.</p>\n",dom:true},id:1673}),
s[1674]=a({parent:s[1664],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1674}),
s[1675]=a({parent:s[1664],name:"rel",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the relationship between the object and the destination of the link.</p>\n",dom:true},id:1675}),
s[1676]=a({parent:s[1664],name:"relList",flags:4,mods:64,cat:0,meta:{dom:true},id:1676,valuetype:s[115]}),
s[1677]=a({parent:s[1664],name:"sizes",flags:4,mods:64,cat:0,meta:{dom:true},id:1677,valuetype:s[115]}),
s[1678]=a({parent:s[1664],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the MIME type of the object.</p>\n",dom:true},id:1678}),
s[1679]=a({parent:s[1215],name:"main",flags:4,mods:524288,cat:0,meta:{dom:true},id:1679,valuetype:s[478]}),
s[1681]=a({parent:s[1],name:"HTMLMapElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.</p>\n",dom:true},id:1681}),
s[1680]=a({parent:s[1215],name:"map",flags:4,mods:524288,cat:0,meta:{dom:true},id:1680,valuetype:s[1681]}),
s[1682]=a({parent:s[1681],name:"areas",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of the area objects defined for the given map object.</p>\n",dom:true},id:1682,valuetype:s[153]}),
s[1683]=a({parent:s[1681],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1683}),
s[1684]=a({parent:s[1215],name:"mark",flags:4,mods:524288,cat:0,meta:{dom:true},id:1684,valuetype:s[478]}),
s[1685]=a({parent:s[1215],name:"marquee",flags:4,mods:524288,cat:0,meta:{dom:true},id:1685,valuetype:null}),
s[1687]=a({parent:s[1],name:"HTMLMenuElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{dom:true},id:1687}),
s[1686]=a({parent:s[1215],name:"menu",flags:4,mods:524288,cat:0,meta:{dom:true},id:1686,valuetype:s[1687]}),
s[1689]=a({parent:s[1],name:"HTMLMetaElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.</p>\n",dom:true},id:1689}),
s[1688]=a({parent:s[1215],name:"meta",flags:4,mods:524288,cat:0,meta:{dom:true},id:1688,valuetype:s[1689]}),
s[1690]=a({parent:s[1689],name:"content",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets meta-information to associate with httpEquiv or name.</p>\n",dom:true},id:1690}),
s[1691]=a({parent:s[1689],name:"httpEquiv",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.</p>\n",dom:true},id:1691}),
s[1692]=a({parent:s[1689],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value specified in the content attribute of the meta object.</p>\n",dom:true},id:1692}),
s[1694]=a({parent:s[1],name:"HTMLMeterElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.</p>\n",dom:true},id:1694}),
s[1693]=a({parent:s[1215],name:"meter",flags:4,mods:524288,cat:0,meta:{dom:true},id:1693,valuetype:s[1694]}),
s[1695]=a({parent:s[1694],name:"high",flags:4,mods:0,cat:0,meta:{dom:true},id:1695}),
s[1696]=a({parent:s[1694],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1696,valuetype:s[88]}),
s[1697]=a({parent:s[1694],name:"low",flags:4,mods:0,cat:0,meta:{dom:true},id:1697}),
s[1698]=a({parent:s[1694],name:"max",flags:4,mods:0,cat:0,meta:{dom:true},id:1698}),
s[1699]=a({parent:s[1694],name:"min",flags:4,mods:0,cat:0,meta:{dom:true},id:1699}),
s[1700]=a({parent:s[1694],name:"optimum",flags:4,mods:0,cat:0,meta:{dom:true},id:1700}),
s[1701]=a({parent:s[1694],name:"value",flags:4,mods:0,cat:0,meta:{dom:true},id:1701}),
s[1702]=a({parent:s[1215],name:"nav",flags:4,mods:524288,cat:0,meta:{dom:true},id:1702,valuetype:s[478]}),
s[1703]=a({parent:s[1215],name:"noscript",flags:4,mods:524288,cat:0,meta:{dom:true},id:1703,valuetype:s[478]}),
s[1705]=a({parent:s[1],name:"HTMLObjectElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.</p>\n",dom:true},id:1705}),
s[1704]=a({parent:s[1215],name:"object",flags:4,mods:524288,cat:0,meta:{dom:true},id:1704,valuetype:s[1705]}),
s[1706]=a({parent:s[1705],name:"contentDocument",flags:4,mods:524352,cat:0,meta:{desc:"<p>Retrieves the document object of the page or frame.</p>\n",dom:true},id:1706,valuetype:s[567]}),
s[1707]=a({parent:s[1705],name:"contentWindow",flags:4,mods:64,cat:0,meta:{dom:true},id:1707,valuetype:s[71]}),
s[1708]=a({parent:s[1705],name:"data",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the URL that references the data of the object.</p>\n",dom:true},id:1708}),
s[1709]=a({parent:s[1705],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1709,valuetype:s[1353]}),
s[1710]=a({parent:s[1705],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the height of the object.</p>\n",dom:true},id:1710}),
s[1711]=a({parent:s[1705],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1711}),
s[1712]=a({parent:s[1705],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the MIME type of the object.</p>\n",dom:true},id:1712}),
s[1713]=a({parent:s[1705],name:"useMap",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.</p>\n",dom:true},id:1713}),
s[1714]=a({parent:s[1705],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1714}),
s[1715]=a({parent:s[1705],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1715,valuetype:s[1382]}),
s[1716]=a({parent:s[1705],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1716}),
s[1717]=a({parent:s[1705],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1717}),
s[1718]=a({parent:s[1705],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1718}),
s[1719]=a({parent:s[1705],name:"getSVGDocument",flags:8192,mods:0,cat:0,meta:{dom:true},id:1719}),
s[1720]=a({parent:s[1705],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1720}),
s[1721]=a({parent:s[1705],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1721}),
s[1723]=a({parent:s[1],name:"HTMLOListElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.</p>\n",dom:true},id:1723}),
s[1722]=a({parent:s[1215],name:"ol",flags:4,mods:524288,cat:0,meta:{dom:true},id:1722,valuetype:s[1723]}),
s[1724]=a({parent:s[1723],name:"reversed",flags:4,mods:0,cat:0,meta:{dom:true},id:1724}),
s[1725]=a({parent:s[1723],name:"start",flags:4,mods:0,cat:0,meta:{desc:"<p>The starting number.</p>\n",dom:true},id:1725}),
s[1726]=a({parent:s[1723],name:"type",flags:4,mods:0,cat:0,meta:{dom:true},id:1726}),
s[1728]=a({parent:s[1],name:"HTMLOptGroupElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.</p>\n",dom:true},id:1728}),
s[1727]=a({parent:s[1215],name:"optgroup",flags:4,mods:524288,cat:0,meta:{dom:true},id:1727,valuetype:s[1728]}),
s[1729]=a({parent:s[1728],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1729}),
s[1730]=a({parent:s[1728],name:"label",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a value that you can use to implement your own label functionality for the object.</p>\n",dom:true},id:1730}),
s[1732]=a({parent:s[1],name:"HTMLOptionElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<option> elements and inherits all classes and methods of the HTMLElement interface.",dom:true},id:1732}),
s[1731]=a({parent:s[1215],name:"option",flags:4,mods:524288,cat:0,meta:{dom:true},id:1731,valuetype:s[1732]}),
s[1733]=a({parent:s[1732],name:"defaultSelected",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the status of an option.</p>\n",dom:true},id:1733}),
s[1734]=a({parent:s[1732],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1734}),
s[1735]=a({parent:s[1732],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1735,valuetype:s[1353]}),
s[1736]=a({parent:s[1732],name:"index",flags:4,mods:64,cat:0,meta:{desc:"<p>Sets or retrieves the ordinal position of an option in a list box.</p>\n",dom:true},id:1736}),
s[1737]=a({parent:s[1732],name:"label",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a value that you can use to implement your own label functionality for the object.</p>\n",dom:true},id:1737}),
s[1738]=a({parent:s[1732],name:"selected",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves whether the option in the list box is the default item.</p>\n",dom:true},id:1738}),
s[1739]=a({parent:s[1732],name:"text",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the text string specified by the option tag.</p>\n",dom:true},id:1739}),
s[1740]=a({parent:s[1732],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value which is returned to the server when the form control is submitted.</p>\n",dom:true},id:1740}),
s[1742]=a({parent:s[1],name:"HTMLOutputElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.</p>\n",dom:true},id:1742}),
s[1741]=a({parent:s[1215],name:"output",flags:4,mods:524288,cat:0,meta:{dom:true},id:1741,valuetype:s[1742]}),
s[1743]=a({parent:s[1742],name:"defaultValue",flags:4,mods:0,cat:0,meta:{dom:true},id:1743}),
s[1744]=a({parent:s[1742],name:"form",flags:4,mods:786496,cat:0,meta:{dom:true},id:1744,valuetype:s[1353]}),
s[1745]=a({parent:s[1742],name:"htmlFor",flags:4,mods:64,cat:0,meta:{dom:true},id:1745,valuetype:s[115]}),
s[1746]=a({parent:s[1742],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1746,valuetype:s[88]}),
s[1747]=a({parent:s[1742],name:"name",flags:4,mods:0,cat:0,meta:{dom:true},id:1747}),
s[1748]=a({parent:s[1742],name:"type",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the string &quot;output&quot;.</p>\n",dom:true},id:1748}),
s[1749]=a({parent:s[1742],name:"validationMessage",flags:4,mods:64,cat:0,meta:{dom:true},id:1749}),
s[1750]=a({parent:s[1742],name:"validity",flags:4,mods:64,cat:0,meta:{dom:true},id:1750,valuetype:s[1382]}),
s[1751]=a({parent:s[1742],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the element&#39;s current value.</p>\n<p>Can be set, to change the value.</p>\n",dom:true},id:1751}),
s[1752]=a({parent:s[1742],name:"willValidate",flags:4,mods:64,cat:0,meta:{dom:true},id:1752}),
s[1753]=a({parent:s[1742],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1753}),
s[1754]=a({parent:s[1742],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1754}),
s[1755]=a({parent:s[1742],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1755}),
s[1757]=a({parent:s[1],name:"HTMLParagraphElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.</p>\n",dom:true},id:1757}),
s[1756]=a({parent:s[1215],name:"p",flags:4,mods:524288,cat:0,meta:{dom:true},id:1756,valuetype:s[1757]}),
s[1759]=a({parent:s[1],name:"HTMLParamElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.</p>\n",dom:true},id:1759}),
s[1758]=a({parent:s[1215],name:"param",flags:4,mods:524288,cat:0,meta:{dom:true},id:1758,valuetype:s[1759]}),
s[1760]=a({parent:s[1759],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of an input parameter for an element.</p>\n",dom:true},id:1760}),
s[1761]=a({parent:s[1759],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value of an input parameter for an element.</p>\n",dom:true},id:1761}),
s[1763]=a({parent:s[1],name:"HTMLPictureElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>A <picture> HTML element. It doesn&#39;t implement specific properties or methods.</p>\n",dom:true},id:1763}),
s[1762]=a({parent:s[1215],name:"picture",flags:4,mods:524288,cat:0,meta:{dom:true},id:1762,valuetype:s[1763]}),
s[1765]=a({parent:s[1],name:"HTMLPreElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).</p>\n",dom:true},id:1765}),
s[1764]=a({parent:s[1215],name:"pre",flags:4,mods:524288,cat:0,meta:{dom:true},id:1764,valuetype:s[1765]}),
s[1767]=a({parent:s[1],name:"HTMLProgressElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.</p>\n",dom:true},id:1767}),
s[1766]=a({parent:s[1215],name:"progress",flags:4,mods:524288,cat:0,meta:{dom:true},id:1766,valuetype:s[1767]}),
s[1768]=a({parent:s[1767],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1768,valuetype:s[88]}),
s[1769]=a({parent:s[1767],name:"max",flags:4,mods:0,cat:0,meta:{desc:"<p>Defines the maximum, or &quot;done&quot; value for a progress element.</p>\n",dom:true},id:1769}),
s[1770]=a({parent:s[1767],name:"position",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).</p>\n",dom:true},id:1770}),
s[1771]=a({parent:s[1767],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.</p>\n",dom:true},id:1771}),
s[1772]=a({parent:s[1215],name:"q",flags:4,mods:524288,cat:0,meta:{dom:true},id:1772,valuetype:s[1343]}),
s[1773]=a({parent:s[1215],name:"rp",flags:4,mods:524288,cat:0,meta:{dom:true},id:1773,valuetype:s[478]}),
s[1774]=a({parent:s[1215],name:"rt",flags:4,mods:524288,cat:0,meta:{dom:true},id:1774,valuetype:s[478]}),
s[1775]=a({parent:s[1215],name:"ruby",flags:4,mods:524288,cat:0,meta:{dom:true},id:1775,valuetype:s[478]}),
s[1776]=a({parent:s[1215],name:"s",flags:4,mods:524288,cat:0,meta:{dom:true},id:1776,valuetype:s[478]}),
s[1777]=a({parent:s[1215],name:"samp",flags:4,mods:524288,cat:0,meta:{dom:true},id:1777,valuetype:s[478]}),
s[1779]=a({parent:s[1],name:"HTMLScriptElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).</p>\n",dom:true},id:1779}),
s[1778]=a({parent:s[1215],name:"script",flags:4,mods:524288,cat:0,meta:{dom:true},id:1778,valuetype:s[1779]}),
s[1780]=a({parent:s[1779],name:"async",flags:4,mods:0,cat:0,meta:{dom:true},id:1780}),
s[1781]=a({parent:s[1779],name:"crossOrigin",flags:4,mods:0,cat:0,meta:{dom:true},id:1781}),
s[1782]=a({parent:s[1779],name:"defer",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the status of the script.</p>\n",dom:true},id:1782}),
s[1783]=a({parent:s[1779],name:"integrity",flags:4,mods:0,cat:0,meta:{dom:true},id:1783}),
s[1784]=a({parent:s[1779],name:"noModule",flags:4,mods:0,cat:0,meta:{dom:true},id:1784}),
s[1785]=a({parent:s[1779],name:"referrerPolicy",flags:4,mods:0,cat:0,meta:{dom:true},id:1785}),
s[1786]=a({parent:s[1779],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>Retrieves the URL to an external file that contains the source code or data.</p>\n",dom:true},id:1786}),
s[1787]=a({parent:s[1779],name:"text",flags:4,mods:0,cat:0,meta:{desc:"<p>Retrieves or sets the text of the object as a string.</p>\n",dom:true},id:1787}),
s[1788]=a({parent:s[1779],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the MIME type for the associated scripting engine.</p>\n",dom:true},id:1788}),
s[1789]=a({parent:s[1215],name:"section",flags:4,mods:524288,cat:0,meta:{dom:true},id:1789,valuetype:s[478]}),
s[1791]=a({parent:s[1],name:"HTMLSelectElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.</p>\n",dom:true},id:1791}),
s[1790]=a({parent:s[1215],name:"select",flags:4,mods:524288,cat:0,meta:{dom:true},id:1790,valuetype:s[1791]}),
s[1792]=a({parent:s[1791],name:"autocomplete",flags:4,mods:0,cat:0,meta:{dom:true},id:1792}),
s[1793]=a({parent:s[1791],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1793}),
s[1794]=a({parent:s[1791],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1794,valuetype:s[1353]}),
s[1795]=a({parent:s[1791],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1795,valuetype:s[88]}),
s[1796]=a({parent:s[1791],name:"length",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the number of objects in a collection.</p>\n",dom:true},id:1796}),
s[1797]=a({parent:s[1791],name:"multiple",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.</p>\n",dom:true},id:1797}),
s[1798]=a({parent:s[1791],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1798}),
s[1800]=a({parent:s[1],name:"HTMLOptionsCollection",inherits:s[592],flags:65,mods:0,cat:0,meta:{desc:"<p>HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the &quot;options&quot; property of select.</p>\n",dom:true},id:1800}),
s[1799]=a({parent:s[1791],name:"options",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns an HTMLOptionsCollection of the list of options.</p>\n",dom:true},id:1799,valuetype:s[1800]}),
s[1801]=a({parent:s[1800],name:"length",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the number of elements in the collection.</p>\n<p>When set to a smaller number, truncates the number of option elements in the corresponding container.</p>\n<p>When set to a greater number, adds new blank option elements to that container.</p>\n",dom:true},id:1801}),
s[1802]=a({parent:s[1800],name:"selectedIndex",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the index of the first selected item, if any, or โ1 if there is no selected item.</p>\n<p>Can be set, to change the selection.</p>\n",dom:true},id:1802}),
s[1803]=a({parent:s[1800],name:"add",flags:8192,mods:0,cat:0,meta:{desc:"<p>Inserts element before the node given by before.</p>\n<p>The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.</p>\n<p>If before is omitted, null, or a number out of range, then element will be added at the end of the list.</p>\n<p>This method will throw a &quot;HierarchyRequestError&quot; DOMException if element is an ancestor of the element into which it is to be inserted.</p>\n",dom:true},id:1803}),
s[1804]=a({parent:s[1800],name:"remove",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the item with index index from the collection.</p>\n",dom:true},id:1804}),
s[1805]=a({parent:s[1791],name:"required",flags:4,mods:0,cat:0,meta:{desc:"<p>When present, marks an element that can&#39;t be submitted without a value.</p>\n",dom:true},id:1805}),
s[1806]=a({parent:s[1791],name:"selectedIndex",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the index of the selected option in a select object.</p>\n",dom:true},id:1806}),
s[1807]=a({parent:s[1791],name:"selectedOptions",flags:4,mods:64,cat:0,meta:{dom:true},id:1807,valuetype:s[592]}),
s[1808]=a({parent:s[1791],name:"size",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the number of rows in the list box.</p>\n",dom:true},id:1808}),
s[1809]=a({parent:s[1791],name:"type",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the type of select control based on the value of the MULTIPLE attribute.</p>\n",dom:true},id:1809}),
s[1810]=a({parent:s[1791],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1810}),
s[1811]=a({parent:s[1791],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1811,valuetype:s[1382]}),
s[1812]=a({parent:s[1791],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value which is returned to the server when the form control is submitted.</p>\n",dom:true},id:1812}),
s[1813]=a({parent:s[1791],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1813}),
s[1814]=a({parent:s[1791],name:"add",flags:8192,mods:0,cat:0,meta:{param:{text:"before",kind:"parameterName"},desc:"<p>Adds an element to the areas, controlRange, or options collection.</p>\n",dom:true},id:1814}),
s[1815]=a({parent:s[1791],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1815}),
s[1816]=a({parent:s[1791],name:"item",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Retrieves a select object or an object from an options collection.</p>\n",dom:true},id:1816}),
s[1817]=a({parent:s[1791],name:"namedItem",flags:8192,mods:0,cat:0,meta:{param:{text:"namedItem",kind:"parameterName"},desc:"<p>Retrieves a select object or an object from an options collection.</p>\n",dom:true},id:1817}),
s[1818]=a({parent:s[1791],name:"remove",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Removes an element from the collection.</p>\n",dom:true},id:1818}),
s[1819]=a({parent:s[1791],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1819}),
s[1820]=a({parent:s[1791],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1820}),
s[1821]=a({parent:s[1215],name:"slot",flags:4,mods:524288,cat:0,meta:{dom:true},id:1821,valuetype:s[474]}),
s[1822]=a({parent:s[1215],name:"small",flags:4,mods:524288,cat:0,meta:{dom:true},id:1822,valuetype:s[478]}),
s[1824]=a({parent:s[1],name:"HTMLSourceElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.</p>\n",dom:true},id:1824}),
s[1823]=a({parent:s[1215],name:"source",flags:4,mods:524288,cat:0,meta:{dom:true},id:1823,valuetype:s[1824]}),
s[1825]=a({parent:s[1824],name:"media",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the intended media type of the media source.</p>\n",dom:true},id:1825}),
s[1826]=a({parent:s[1824],name:"sizes",flags:4,mods:0,cat:0,meta:{dom:true},id:1826}),
s[1827]=a({parent:s[1824],name:"src",flags:4,mods:0,cat:0,meta:{desc:"<p>The address or URL of the a media resource that is to be considered.</p>\n",dom:true},id:1827}),
s[1828]=a({parent:s[1824],name:"srcset",flags:4,mods:0,cat:0,meta:{dom:true},id:1828}),
s[1829]=a({parent:s[1824],name:"type",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the MIME type of a media resource.</p>\n",dom:true},id:1829}),
s[1831]=a({parent:s[1],name:"HTMLSpanElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.</p>\n",dom:true},id:1831}),
s[1830]=a({parent:s[1215],name:"span",flags:4,mods:524288,cat:0,meta:{dom:true},id:1830,valuetype:s[1831]}),
s[1832]=a({parent:s[1215],name:"strong",flags:4,mods:524288,cat:0,meta:{dom:true},id:1832,valuetype:s[478]}),
s[1834]=a({parent:s[1],name:"HTMLStyleElement",inherits:s[478],implements:[s[1626]],flags:65,mods:524288,cat:0,meta:{desc:"<p>A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.</p>\n",dom:true},id:1834}),
s[1833]=a({parent:s[1215],name:"style",flags:4,mods:524288,cat:0,meta:{dom:true},id:1833,valuetype:s[1834]}),
s[1835]=a({parent:s[1834],name:"media",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the media type.</p>\n",dom:true},id:1835}),
s[1836]=a({parent:s[1834],name:"src",flags:4,mods:32768,cat:0,meta:{desc:"<p>The supplied path will be run through the imba bundler</p>\n"},id:1836}),
s[1837]=a({parent:s[1215],name:"sub",flags:4,mods:524288,cat:0,meta:{dom:true},id:1837,valuetype:s[478]}),
s[1838]=a({parent:s[1215],name:"summary",flags:4,mods:524288,cat:0,meta:{dom:true},id:1838,valuetype:s[478]}),
s[1839]=a({parent:s[1215],name:"sup",flags:4,mods:524288,cat:0,meta:{dom:true},id:1839,valuetype:s[478]}),
s[1841]=a({parent:s[1],name:"HTMLTableElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.</p>\n",dom:true},id:1841}),
s[1840]=a({parent:s[1215],name:"table",flags:4,mods:524288,cat:0,meta:{dom:true},id:1840,valuetype:s[1841]}),
s[1842]=a({parent:s[1841],name:"caption",flags:4,mods:524288,cat:0,meta:{desc:"<p>Retrieves the caption object of a table.</p>\n",dom:true},id:1842,valuetype:s[1408]}),
s[1843]=a({parent:s[1841],name:"rows",flags:4,mods:64,cat:0,meta:{desc:"<p>Sets or retrieves the number of horizontal rows contained in the object.</p>\n",dom:true},id:1843,valuetype:s[592]}),
s[1844]=a({parent:s[1841],name:"tBodies",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.</p>\n",dom:true},id:1844,valuetype:s[592]}),
s[1846]=a({parent:s[1],name:"HTMLTableSectionElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.</p>\n",dom:true},id:1846}),
s[1845]=a({parent:s[1841],name:"tFoot",flags:4,mods:524288,cat:0,meta:{desc:"<p>Retrieves the tFoot object of the table.</p>\n",dom:true},id:1845,valuetype:s[1846]}),
s[1847]=a({parent:s[1846],name:"rows",flags:4,mods:64,cat:0,meta:{desc:"<p>Sets or retrieves the number of horizontal rows contained in the object.</p>\n",dom:true},id:1847,valuetype:s[592]}),
s[1848]=a({parent:s[1846],name:"deleteRow",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Removes the specified row (tr) from the element and from the rows collection.</p>\n",dom:true},id:1848}),
s[1849]=a({parent:s[1846],name:"insertRow",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Creates a new row (tr) in the table, and adds the row to the rows collection.</p>\n",dom:true},id:1849}),
s[1850]=a({parent:s[1841],name:"tHead",flags:4,mods:524288,cat:0,meta:{desc:"<p>Retrieves the tHead object of the table.</p>\n",dom:true},id:1850,valuetype:s[1846]}),
s[1851]=a({parent:s[1841],name:"createCaption",flags:8192,mods:0,cat:0,meta:{desc:"<p>Creates an empty caption element in the table.</p>\n",dom:true},id:1851}),
s[1852]=a({parent:s[1841],name:"createTBody",flags:8192,mods:0,cat:0,meta:{desc:"<p>Creates an empty tBody element in the table.</p>\n",dom:true},id:1852}),
s[1853]=a({parent:s[1841],name:"createTFoot",flags:8192,mods:0,cat:0,meta:{desc:"<p>Creates an empty tFoot element in the table.</p>\n",dom:true},id:1853}),
s[1854]=a({parent:s[1841],name:"createTHead",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the tHead element object if successful, or null otherwise.</p>\n",dom:true},id:1854}),
s[1855]=a({parent:s[1841],name:"deleteCaption",flags:8192,mods:0,cat:0,meta:{desc:"<p>Deletes the caption element and its contents from the table.</p>\n",dom:true},id:1855}),
s[1856]=a({parent:s[1841],name:"deleteRow",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Removes the specified row (tr) from the element and from the rows collection.</p>\n",dom:true},id:1856}),
s[1857]=a({parent:s[1841],name:"deleteTFoot",flags:8192,mods:0,cat:0,meta:{desc:"<p>Deletes the tFoot element and its contents from the table.</p>\n",dom:true},id:1857}),
s[1858]=a({parent:s[1841],name:"deleteTHead",flags:8192,mods:0,cat:0,meta:{desc:"<p>Deletes the tHead element and its contents from the table.</p>\n",dom:true},id:1858}),
s[1859]=a({parent:s[1841],name:"insertRow",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Creates a new row (tr) in the table, and adds the row to the rows collection.</p>\n",dom:true},id:1859}),
s[1860]=a({parent:s[1215],name:"tbody",flags:4,mods:524288,cat:0,meta:{dom:true},id:1860,valuetype:s[1846]}),
s[1862]=a({parent:s[1],name:"HTMLTableCellElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.</p>\n",dom:true},id:1862}),
s[1861]=a({parent:s[1215],name:"td",flags:4,mods:524288,cat:0,meta:{dom:true},id:1861,valuetype:s[1862]}),
s[1863]=a({parent:s[1862],name:"abbr",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves abbreviated text for the object.</p>\n",dom:true},id:1863}),
s[1864]=a({parent:s[1862],name:"cellIndex",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the position of the object in the cells collection of a row.</p>\n",dom:true},id:1864}),
s[1865]=a({parent:s[1862],name:"colSpan",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the number columns in the table that the object should span.</p>\n",dom:true},id:1865}),
s[1866]=a({parent:s[1862],name:"headers",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves a list of header cells that provide information for the object.</p>\n",dom:true},id:1866}),
s[1867]=a({parent:s[1862],name:"rowSpan",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves how many rows in a table the cell should span.</p>\n",dom:true},id:1867}),
s[1868]=a({parent:s[1862],name:"scope",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the group of cells in a table to which the object&#39;s information applies.</p>\n",dom:true},id:1868}),
s[1870]=a({parent:s[1],name:"HTMLTemplateElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Enables access to the contents of an HTML <template> element.</p>\n",dom:true},id:1870}),
s[1869]=a({parent:s[1215],name:"template",flags:4,mods:524288,cat:0,meta:{dom:true},id:1869,valuetype:s[1870]}),
s[1871]=a({parent:s[1870],name:"content",flags:4,mods:524352,cat:0,meta:{desc:"<p>Returns the template contents (a DocumentFragment).</p>\n",dom:true},id:1871,valuetype:s[145]}),
s[1873]=a({parent:s[1],name:"HTMLTextAreaElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods for manipulating the layout and presentation of <textarea> elements.</p>\n",dom:true},id:1873}),
s[1872]=a({parent:s[1215],name:"textarea",flags:4,mods:524288,cat:0,meta:{dom:true},id:1872,valuetype:s[1873]}),
s[1874]=a({parent:s[1873],name:"autocomplete",flags:4,mods:0,cat:0,meta:{dom:true},id:1874}),
s[1875]=a({parent:s[1873],name:"cols",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the width of the object.</p>\n",dom:true},id:1875}),
s[1876]=a({parent:s[1873],name:"defaultValue",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the initial contents of the object.</p>\n",dom:true},id:1876}),
s[1877]=a({parent:s[1873],name:"dirName",flags:4,mods:0,cat:0,meta:{dom:true},id:1877}),
s[1878]=a({parent:s[1873],name:"disabled",flags:4,mods:0,cat:0,meta:{dom:true},id:1878}),
s[1879]=a({parent:s[1873],name:"form",flags:4,mods:786496,cat:0,meta:{desc:"<p>Retrieves a reference to the form that the object is embedded in.</p>\n",dom:true},id:1879,valuetype:s[1353]}),
s[1880]=a({parent:s[1873],name:"labels",flags:4,mods:64,cat:0,meta:{dom:true},id:1880,valuetype:s[88]}),
s[1881]=a({parent:s[1873],name:"maxLength",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the maximum number of characters that the user can enter in a text control.</p>\n",dom:true},id:1881}),
s[1882]=a({parent:s[1873],name:"minLength",flags:4,mods:0,cat:0,meta:{dom:true},id:1882}),
s[1883]=a({parent:s[1873],name:"name",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the name of the object.</p>\n",dom:true},id:1883}),
s[1884]=a({parent:s[1873],name:"placeholder",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.</p>\n",dom:true},id:1884}),
s[1885]=a({parent:s[1873],name:"readOnly",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the value indicated whether the content of the object is read-only.</p>\n",dom:true},id:1885}),
s[1886]=a({parent:s[1873],name:"required",flags:4,mods:0,cat:0,meta:{desc:"<p>When present, marks an element that can&#39;t be submitted without a value.</p>\n",dom:true},id:1886}),
s[1887]=a({parent:s[1873],name:"rows",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves the number of horizontal rows contained in the object.</p>\n",dom:true},id:1887}),
s[1888]=a({parent:s[1873],name:"selectionDirection",flags:4,mods:0,cat:0,meta:{dom:true},id:1888}),
s[1889]=a({parent:s[1873],name:"selectionEnd",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the end position or offset of a text selection.</p>\n",dom:true},id:1889}),
s[1890]=a({parent:s[1873],name:"selectionStart",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the starting position or offset of a text selection.</p>\n",dom:true},id:1890}),
s[1891]=a({parent:s[1873],name:"textLength",flags:4,mods:64,cat:0,meta:{dom:true},id:1891}),
s[1892]=a({parent:s[1873],name:"type",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the type of control.</p>\n",dom:true},id:1892}),
s[1893]=a({parent:s[1873],name:"validationMessage",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as &quot;this is a required field&quot;. The result is that the user sees validation messages without actually submitting.</p>\n",dom:true},id:1893}),
s[1894]=a({parent:s[1873],name:"validity",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns a  ValidityState object that represents the validity states of an element.</p>\n",dom:true},id:1894,valuetype:s[1382]}),
s[1895]=a({parent:s[1873],name:"value",flags:4,mods:0,cat:0,meta:{desc:"<p>Retrieves or sets the text in the entry field of the textArea element.</p>\n",dom:true},id:1895}),
s[1896]=a({parent:s[1873],name:"willValidate",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns whether an element will successfully validate based on forms validation rules and constraints.</p>\n",dom:true},id:1896}),
s[1897]=a({parent:s[1873],name:"wrap",flags:4,mods:0,cat:0,meta:{desc:"<p>Sets or retrieves how to handle wordwrapping in the object.</p>\n",dom:true},id:1897}),
s[1898]=a({parent:s[1873],name:"checkValidity",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns whether a form will validate when it is submitted, without having to submit it.</p>\n",dom:true},id:1898}),
s[1899]=a({parent:s[1873],name:"reportValidity",flags:8192,mods:0,cat:0,meta:{dom:true},id:1899}),
s[1900]=a({parent:s[1873],name:"select",flags:8192,mods:0,cat:0,meta:{desc:"<p>Highlights the input area of a form element.</p>\n",dom:true},id:1900}),
s[1901]=a({parent:s[1873],name:"setCustomValidity",flags:8192,mods:0,cat:0,meta:{param:{text:"error",kind:"parameterName"},desc:"<p>Sets a custom error message that is displayed when a form is submitted.</p>\n",dom:true},id:1901}),
s[1902]=a({parent:s[1873],name:"setRangeText",flags:8192,mods:0,cat:0,meta:{dom:true},id:1902}),
s[1903]=a({parent:s[1873],name:"setSelectionRange",flags:8192,mods:0,cat:0,meta:{param:{text:"direction",kind:"parameterName"},desc:"<p>Sets the start and end positions of a selection in a text field.</p>\n",dom:true},id:1903}),
s[1904]=a({parent:s[1215],name:"tfoot",flags:4,mods:524288,cat:0,meta:{dom:true},id:1904,valuetype:s[1846]}),
s[1905]=a({parent:s[1215],name:"th",flags:4,mods:524288,cat:0,meta:{dom:true},id:1905,valuetype:s[1862]}),
s[1906]=a({parent:s[1215],name:"thead",flags:4,mods:524288,cat:0,meta:{dom:true},id:1906,valuetype:s[1846]}),
s[1908]=a({parent:s[1],name:"HTMLTimeElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.</p>\n",dom:true},id:1908}),
s[1907]=a({parent:s[1215],name:"time",flags:4,mods:524288,cat:0,meta:{dom:true},id:1907,valuetype:s[1908]}),
s[1909]=a({parent:s[1908],name:"dateTime",flags:4,mods:0,cat:0,meta:{dom:true},id:1909}),
s[1911]=a({parent:s[1],name:"HTMLTitleElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.</p>\n",dom:true},id:1911}),
s[1910]=a({parent:s[1215],name:"title",flags:4,mods:524288,cat:0,meta:{dom:true},id:1910,valuetype:s[1911]}),
s[1912]=a({parent:s[1911],name:"text",flags:4,mods:0,cat:0,meta:{desc:"<p>Retrieves or sets the text of the object as a string.</p>\n",dom:true},id:1912}),
s[1914]=a({parent:s[1],name:"HTMLTableRowElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.</p>\n",dom:true},id:1914}),
s[1913]=a({parent:s[1215],name:"tr",flags:4,mods:524288,cat:0,meta:{dom:true},id:1913,valuetype:s[1914]}),
s[1915]=a({parent:s[1914],name:"cells",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves a collection of all cells in the table row.</p>\n",dom:true},id:1915,valuetype:s[592]}),
s[1916]=a({parent:s[1914],name:"rowIndex",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the position of the object in the rows collection for the table.</p>\n",dom:true},id:1916}),
s[1917]=a({parent:s[1914],name:"sectionRowIndex",flags:4,mods:64,cat:0,meta:{desc:"<p>Retrieves the position of the object in the collection.</p>\n",dom:true},id:1917}),
s[1918]=a({parent:s[1914],name:"deleteCell",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Removes the specified cell from the table row, as well as from the cells collection.</p>\n",dom:true},id:1918}),
s[1919]=a({parent:s[1914],name:"insertCell",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Creates a new cell in the table row, and adds the cell to the cells collection.</p>\n",dom:true},id:1919}),
s[1921]=a({parent:s[1],name:"HTMLTrackElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>The HTMLTrackElement</p>\n",dom:true},id:1921}),
s[1920]=a({parent:s[1215],name:"track",flags:4,mods:524288,cat:0,meta:{dom:true},id:1920,valuetype:s[1921]}),
s[1922]=a({parent:s[1921],name:"default",flags:4,mods:0,cat:0,meta:{dom:true},id:1922}),
s[1923]=a({parent:s[1921],name:"kind",flags:4,mods:0,cat:0,meta:{dom:true},id:1923}),
s[1924]=a({parent:s[1921],name:"label",flags:4,mods:0,cat:0,meta:{dom:true},id:1924}),
s[1925]=a({parent:s[1921],name:"readyState",flags:4,mods:64,cat:0,meta:{dom:true},id:1925}),
s[1926]=a({parent:s[1921],name:"src",flags:4,mods:0,cat:0,meta:{dom:true},id:1926}),
s[1927]=a({parent:s[1921],name:"srclang",flags:4,mods:0,cat:0,meta:{dom:true},id:1927}),
s[1929]=a({parent:s[1],name:"TextTrack",inherits:s[8],flags:65,mods:0,cat:0,meta:{desc:"<p>This interface also inherits properties from EventTarget.</p>\n",dom:true},id:1929}),
s[1928]=a({parent:s[1921],name:"track",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the TextTrack object corresponding to the text track of the track element.</p>\n",dom:true},id:1928,valuetype:s[1929]}),
s[1931]=a({parent:s[1],name:"TextTrackCueList",flags:65,mods:0,cat:0,meta:{dom:true},id:1931}),
s[1930]=a({parent:s[1929],name:"activeCues",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track cues from the text track list of cues that are currently active (i.e. that start before the current playback position and end after it), as a TextTrackCueList object.</p>\n",dom:true},id:1930,valuetype:s[1931]}),
s[1932]=a({parent:s[1931],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the number of cues in the list.</p>\n",dom:true},id:1932}),
s[1933]=a({parent:s[1931],name:"getCueById",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns the first text track cue (in text track cue order) with text track cue identifier id.</p>\n<p>Returns null if none of the cues have the given identifier or if the argument is the empty string.</p>\n",dom:true},id:1933}),
s[1934]=a({parent:s[1929],name:"cues",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track list of cues, as a TextTrackCueList object.</p>\n",dom:true},id:1934,valuetype:s[1931]}),
s[1935]=a({parent:s[1929],name:"id",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the ID of the given track.</p>\n<p>For in-band tracks, this is the ID that can be used with a fragment if the format supports media fragment syntax, and that can be used with the getTrackById() method.</p>\n<p>For TextTrack objects corresponding to track elements, this is the ID of the track element.</p>\n",dom:true},id:1935}),
s[1936]=a({parent:s[1929],name:"inBandMetadataTrackDispatchType",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track in-band metadata track dispatch type string.</p>\n",dom:true},id:1936}),
s[1937]=a({parent:s[1929],name:"kind",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track kind string.</p>\n",dom:true},id:1937}),
s[1938]=a({parent:s[1929],name:"label",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track label, if there is one, or the empty string otherwise (indicating that a custom label probably needs to be generated from the other attributes of the object if the object is exposed to the user).</p>\n",dom:true},id:1938}),
s[1939]=a({parent:s[1929],name:"language",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the text track language string.</p>\n",dom:true},id:1939}),
s[1940]=a({parent:s[1929],name:"mode",flags:4,mods:0,cat:0,meta:{desc:"<p>Returns the text track mode, represented by a string from the following list:</p>\n<p>Can be set, to change the mode.</p>\n",dom:true},id:1940}),
s[1941]=a({parent:s[1929],name:"oncuechange",flags:4,mods:0,cat:0,meta:{dom:true},id:1941}),
s[1942]=a({parent:s[1929],name:"addCue",flags:8192,mods:0,cat:0,meta:{desc:"<p>Adds the given cue to textTrack&#39;s text track list of cues.</p>\n",dom:true},id:1942}),
s[1943]=a({parent:s[1929],name:"removeCue",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the given cue from textTrack&#39;s text track list of cues.</p>\n",dom:true},id:1943}),
s[1944]=a({parent:s[1929],name:"addEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>If an AbortSignal is passed for options&#39;s signal, then the event listener will be removed when signal is aborted.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n",dom:true},id:1944}),
s[1945]=a({parent:s[1929],name:"removeEventListener",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n",dom:true},id:1945}),
s[1946]=a({parent:s[1921],name:"ERROR",flags:4,mods:131136,cat:0,meta:{dom:true},id:1946}),
s[1947]=a({parent:s[1921],name:"LOADED",flags:4,mods:131136,cat:0,meta:{dom:true},id:1947}),
s[1948]=a({parent:s[1921],name:"LOADING",flags:4,mods:131136,cat:0,meta:{dom:true},id:1948}),
s[1949]=a({parent:s[1921],name:"NONE",flags:4,mods:131136,cat:0,meta:{dom:true},id:1949}),
s[1950]=a({parent:s[1215],name:"u",flags:4,mods:524288,cat:0,meta:{dom:true},id:1950,valuetype:s[478]}),
s[1952]=a({parent:s[1],name:"HTMLUListElement",inherits:s[478],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.</p>\n",dom:true},id:1952}),
s[1951]=a({parent:s[1215],name:"ul",flags:4,mods:524288,cat:0,meta:{dom:true},id:1951,valuetype:s[1952]}),
s[1953]=a({parent:s[1215],name:"var",flags:4,mods:524288,cat:0,meta:{dom:true},id:1953,valuetype:s[478]}),
s[1955]=a({parent:s[1],name:"HTMLVideoElement",inherits:s[1255],flags:65,mods:524288,cat:0,meta:{desc:"<p>Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.</p>\n",dom:true},id:1955}),
s[1954]=a({parent:s[1215],name:"video",flags:4,mods:524288,cat:0,meta:{dom:true},id:1954,valuetype:s[1955]}),
s[1956]=a({parent:s[1955],name:"disablePictureInPicture",flags:4,mods:0,cat:0,meta:{dom:true},id:1956}),
s[1957]=a({parent:s[1955],name:"height",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the height of the video element.</p>\n",dom:true},id:1957}),
s[1958]=a({parent:s[1955],name:"onenterpictureinpicture",flags:4,mods:0,cat:0,meta:{dom:true},id:1958}),
s[1959]=a({parent:s[1955],name:"onleavepictureinpicture",flags:4,mods:0,cat:0,meta:{dom:true},id:1959}),
s[1960]=a({parent:s[1955],name:"playsInline",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins.</p>\n",dom:true},id:1960}),
s[1961]=a({parent:s[1955],name:"poster",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.</p>\n",dom:true},id:1961}),
s[1962]=a({parent:s[1955],name:"videoHeight",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.</p>\n",dom:true},id:1962}),
s[1963]=a({parent:s[1955],name:"videoWidth",flags:4,mods:64,cat:0,meta:{desc:"<p>Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.</p>\n",dom:true},id:1963}),
s[1964]=a({parent:s[1955],name:"width",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the width of the video element.</p>\n",dom:true},id:1964}),
s[1965]=a({parent:s[1955],name:"getVideoPlaybackQuality",flags:8192,mods:0,cat:0,meta:{dom:true},id:1965}),
s[1966]=a({parent:s[1955],name:"requestPictureInPicture",flags:8192,mods:0,cat:0,meta:{dom:true},id:1966}),
s[1967]=a({parent:s[1215],name:"wbr",flags:4,mods:524288,cat:0,meta:{dom:true},id:1967,valuetype:s[478]}),
s[1968]=a({parent:s[1],name:"css",flags:1536,mods:32770,cat:0,meta:{},id:1968}),
s[1969]=a({parent:s[1968],name:"_",flags:64,mods:131072,cat:0,meta:{},id:1969}),
s[1970]=a({parent:s[1968],name:"number",flags:384,mods:0,cat:16,meta:{},id:1970}),
s[1971]=a({parent:s[1968],name:"percentage",flags:384,mods:0,cat:16,meta:{},id:1971}),
s[1972]=a({parent:s[1968],name:"length",flags:384,mods:0,cat:16,meta:{},id:1972}),
s[1973]=a({parent:s[1968],name:"line-width",flags:384,mods:0,cat:16,meta:{},id:1973}),
s[1974]=a({parent:s[1968],name:"line-style",flags:384,mods:0,cat:16,meta:{},id:1974}),
s[1975]=a({parent:s[1968],name:"color",flags:384,mods:0,cat:16,meta:{},id:1975}),
s[1976]=a({parent:s[1975],name:"current",flags:8,mods:32768,cat:32,meta:{desc:"<p>The current color</p>\n"},id:1976}),
s[1977]=a({parent:s[1975],name:"transparent",flags:8,mods:32768,cat:32,meta:{desc:"<p>Clear</p>\n"},id:1977}),
s[1978]=a({parent:s[1975],name:"clear",flags:8,mods:32768,cat:32,meta:{desc:"<p>Clear</p>\n"},id:1978}),
s[1979]=a({parent:s[1975],name:"black",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,0%,1)"},id:1979}),
s[1980]=a({parent:s[1975],name:"white",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,100%,1)"},id:1980}),
s[1981]=a({parent:s[1975],name:"rose0",flags:8,mods:32768,cat:32,meta:{color:"hsla(355,100%,97%,1)"},id:1981}),
s[1982]=a({parent:s[1975],name:"rose1",flags:8,mods:32768,cat:32,meta:{color:"hsla(355,100%,94%,1)"},id:1982}),
s[1983]=a({parent:s[1975],name:"rose2",flags:8,mods:32768,cat:32,meta:{color:"hsla(352,96%,90%,1)"},id:1983}),
s[1984]=a({parent:s[1975],name:"rose3",flags:8,mods:32768,cat:32,meta:{color:"hsla(352,95%,81%,1)"},id:1984}),
s[1985]=a({parent:s[1975],name:"rose4",flags:8,mods:32768,cat:32,meta:{color:"hsla(351,94%,71%,1)"},id:1985}),
s[1986]=a({parent:s[1975],name:"rose5",flags:8,mods:32768,cat:32,meta:{color:"hsla(349,89%,60%,1)"},id:1986}),
s[1987]=a({parent:s[1975],name:"rose6",flags:8,mods:32768,cat:32,meta:{color:"hsla(346,77%,49%,1)"},id:1987}),
s[1988]=a({parent:s[1975],name:"rose7",flags:8,mods:32768,cat:32,meta:{color:"hsla(345,82%,40%,1)"},id:1988}),
s[1989]=a({parent:s[1975],name:"rose8",flags:8,mods:32768,cat:32,meta:{color:"hsla(343,79%,34%,1)"},id:1989}),
s[1990]=a({parent:s[1975],name:"rose9",flags:8,mods:32768,cat:32,meta:{color:"hsla(341,75%,30%,1)"},id:1990}),
s[1991]=a({parent:s[1975],name:"pink0",flags:8,mods:32768,cat:32,meta:{color:"hsla(327,73%,97%,1)"},id:1991}),
s[1992]=a({parent:s[1975],name:"pink1",flags:8,mods:32768,cat:32,meta:{color:"hsla(325,77%,94%,1)"},id:1992}),
s[1993]=a({parent:s[1975],name:"pink2",flags:8,mods:32768,cat:32,meta:{color:"hsla(325,84%,89%,1)"},id:1993}),
s[1994]=a({parent:s[1975],name:"pink3",flags:8,mods:32768,cat:32,meta:{color:"hsla(327,87%,81%,1)"},id:1994}),
s[1995]=a({parent:s[1975],name:"pink4",flags:8,mods:32768,cat:32,meta:{color:"hsla(328,85%,70%,1)"},id:1995}),
s[1996]=a({parent:s[1975],name:"pink5",flags:8,mods:32768,cat:32,meta:{color:"hsla(330,81%,60%,1)"},id:1996}),
s[1997]=a({parent:s[1975],name:"pink6",flags:8,mods:32768,cat:32,meta:{color:"hsla(333,71%,50%,1)"},id:1997}),
s[1998]=a({parent:s[1975],name:"pink7",flags:8,mods:32768,cat:32,meta:{color:"hsla(335,77%,41%,1)"},id:1998}),
s[1999]=a({parent:s[1975],name:"pink8",flags:8,mods:32768,cat:32,meta:{color:"hsla(335,74%,35%,1)"},id:1999}),
s[2000]=a({parent:s[1975],name:"pink9",flags:8,mods:32768,cat:32,meta:{color:"hsla(335,69%,30%,1)"},id:2000}),
s[2001]=a({parent:s[1975],name:"fuchsia0",flags:8,mods:32768,cat:32,meta:{color:"hsla(289,100%,97%,1)"},id:2001}),
s[2002]=a({parent:s[1975],name:"fuchsia1",flags:8,mods:32768,cat:32,meta:{color:"hsla(286,100%,95%,1)"},id:2002}),
s[2003]=a({parent:s[1975],name:"fuchsia2",flags:8,mods:32768,cat:32,meta:{color:"hsla(288,95%,90%,1)"},id:2003}),
s[2004]=a({parent:s[1975],name:"fuchsia3",flags:8,mods:32768,cat:32,meta:{color:"hsla(291,93%,82%,1)"},id:2004}),
s[2005]=a({parent:s[1975],name:"fuchsia4",flags:8,mods:32768,cat:32,meta:{color:"hsla(292,91%,72%,1)"},id:2005}),
s[2006]=a({parent:s[1975],name:"fuchsia5",flags:8,mods:32768,cat:32,meta:{color:"hsla(292,84%,60%,1)"},id:2006}),
s[2007]=a({parent:s[1975],name:"fuchsia6",flags:8,mods:32768,cat:32,meta:{color:"hsla(293,69%,48%,1)"},id:2007}),
s[2008]=a({parent:s[1975],name:"fuchsia7",flags:8,mods:32768,cat:32,meta:{color:"hsla(294,72%,39%,1)"},id:2008}),
s[2009]=a({parent:s[1975],name:"fuchsia8",flags:8,mods:32768,cat:32,meta:{color:"hsla(295,70%,32%,1)"},id:2009}),
s[2010]=a({parent:s[1975],name:"fuchsia9",flags:8,mods:32768,cat:32,meta:{color:"hsla(296,63%,28%,1)"},id:2010}),
s[2011]=a({parent:s[1975],name:"purple0",flags:8,mods:32768,cat:32,meta:{color:"hsla(269,100%,98%,1)"},id:2011}),
s[2012]=a({parent:s[1975],name:"purple1",flags:8,mods:32768,cat:32,meta:{color:"hsla(268,100%,95%,1)"},id:2012}),
s[2013]=a({parent:s[1975],name:"purple2",flags:8,mods:32768,cat:32,meta:{color:"hsla(268,100%,91%,1)"},id:2013}),
s[2014]=a({parent:s[1975],name:"purple3",flags:8,mods:32768,cat:32,meta:{color:"hsla(269,97%,85%,1)"},id:2014}),
s[2015]=a({parent:s[1975],name:"purple4",flags:8,mods:32768,cat:32,meta:{color:"hsla(270,95%,75%,1)"},id:2015}),
s[2016]=a({parent:s[1975],name:"purple5",flags:8,mods:32768,cat:32,meta:{color:"hsla(270,91%,65%,1)"},id:2016}),
s[2017]=a({parent:s[1975],name:"purple6",flags:8,mods:32768,cat:32,meta:{color:"hsla(271,81%,55%,1)"},id:2017}),
s[2018]=a({parent:s[1975],name:"purple7",flags:8,mods:32768,cat:32,meta:{color:"hsla(272,71%,47%,1)"},id:2018}),
s[2019]=a({parent:s[1975],name:"purple8",flags:8,mods:32768,cat:32,meta:{color:"hsla(272,67%,39%,1)"},id:2019}),
s[2020]=a({parent:s[1975],name:"purple9",flags:8,mods:32768,cat:32,meta:{color:"hsla(273,65%,31%,1)"},id:2020}),
s[2021]=a({parent:s[1975],name:"violet0",flags:8,mods:32768,cat:32,meta:{color:"hsla(250,100%,97%,1)"},id:2021}),
s[2022]=a({parent:s[1975],name:"violet1",flags:8,mods:32768,cat:32,meta:{color:"hsla(251,91%,95%,1)"},id:2022}),
s[2023]=a({parent:s[1975],name:"violet2",flags:8,mods:32768,cat:32,meta:{color:"hsla(250,95%,91%,1)"},id:2023}),
s[2024]=a({parent:s[1975],name:"violet3",flags:8,mods:32768,cat:32,meta:{color:"hsla(252,94%,85%,1)"},id:2024}),
s[2025]=a({parent:s[1975],name:"violet4",flags:8,mods:32768,cat:32,meta:{color:"hsla(255,91%,76%,1)"},id:2025}),
s[2026]=a({parent:s[1975],name:"violet5",flags:8,mods:32768,cat:32,meta:{color:"hsla(258,89%,66%,1)"},id:2026}),
s[2027]=a({parent:s[1975],name:"violet6",flags:8,mods:32768,cat:32,meta:{color:"hsla(262,83%,57%,1)"},id:2027}),
s[2028]=a({parent:s[1975],name:"violet7",flags:8,mods:32768,cat:32,meta:{color:"hsla(263,69%,50%,1)"},id:2028}),
s[2029]=a({parent:s[1975],name:"violet8",flags:8,mods:32768,cat:32,meta:{color:"hsla(263,69%,42%,1)"},id:2029}),
s[2030]=a({parent:s[1975],name:"violet9",flags:8,mods:32768,cat:32,meta:{color:"hsla(263,67%,34%,1)"},id:2030}),
s[2031]=a({parent:s[1975],name:"indigo0",flags:8,mods:32768,cat:32,meta:{color:"hsla(225,100%,96%,1)"},id:2031}),
s[2032]=a({parent:s[1975],name:"indigo1",flags:8,mods:32768,cat:32,meta:{color:"hsla(226,100%,93%,1)"},id:2032}),
s[2033]=a({parent:s[1975],name:"indigo2",flags:8,mods:32768,cat:32,meta:{color:"hsla(228,96%,88%,1)"},id:2033}),
s[2034]=a({parent:s[1975],name:"indigo3",flags:8,mods:32768,cat:32,meta:{color:"hsla(229,93%,81%,1)"},id:2034}),
s[2035]=a({parent:s[1975],name:"indigo4",flags:8,mods:32768,cat:32,meta:{color:"hsla(234,89%,73%,1)"},id:2035}),
s[2036]=a({parent:s[1975],name:"indigo5",flags:8,mods:32768,cat:32,meta:{color:"hsla(238,83%,66%,1)"},id:2036}),
s[2037]=a({parent:s[1975],name:"indigo6",flags:8,mods:32768,cat:32,meta:{color:"hsla(243,75%,58%,1)"},id:2037}),
s[2038]=a({parent:s[1975],name:"indigo7",flags:8,mods:32768,cat:32,meta:{color:"hsla(244,57%,50%,1)"},id:2038}),
s[2039]=a({parent:s[1975],name:"indigo8",flags:8,mods:32768,cat:32,meta:{color:"hsla(243,54%,41%,1)"},id:2039}),
s[2040]=a({parent:s[1975],name:"indigo9",flags:8,mods:32768,cat:32,meta:{color:"hsla(242,47%,34%,1)"},id:2040}),
s[2041]=a({parent:s[1975],name:"blue0",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,100%,96%,1)"},id:2041}),
s[2042]=a({parent:s[1975],name:"hue0",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,100%,96%,1)"},id:2042}),
s[2043]=a({parent:s[1975],name:"blue1",flags:8,mods:32768,cat:32,meta:{color:"hsla(214,94%,92%,1)"},id:2043}),
s[2044]=a({parent:s[1975],name:"hue1",flags:8,mods:32768,cat:32,meta:{color:"hsla(214,94%,92%,1)"},id:2044}),
s[2045]=a({parent:s[1975],name:"blue2",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,96%,87%,1)"},id:2045}),
s[2046]=a({parent:s[1975],name:"hue2",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,96%,87%,1)"},id:2046}),
s[2047]=a({parent:s[1975],name:"blue3",flags:8,mods:32768,cat:32,meta:{color:"hsla(211,96%,78%,1)"},id:2047}),
s[2048]=a({parent:s[1975],name:"hue3",flags:8,mods:32768,cat:32,meta:{color:"hsla(211,96%,78%,1)"},id:2048}),
s[2049]=a({parent:s[1975],name:"blue4",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,93%,67%,1)"},id:2049}),
s[2050]=a({parent:s[1975],name:"hue4",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,93%,67%,1)"},id:2050}),
s[2051]=a({parent:s[1975],name:"blue5",flags:8,mods:32768,cat:32,meta:{color:"hsla(217,91%,59%,1)"},id:2051}),
s[2052]=a({parent:s[1975],name:"hue5",flags:8,mods:32768,cat:32,meta:{color:"hsla(217,91%,59%,1)"},id:2052}),
s[2053]=a({parent:s[1975],name:"blue6",flags:8,mods:32768,cat:32,meta:{color:"hsla(221,83%,53%,1)"},id:2053}),
s[2054]=a({parent:s[1975],name:"hue6",flags:8,mods:32768,cat:32,meta:{color:"hsla(221,83%,53%,1)"},id:2054}),
s[2055]=a({parent:s[1975],name:"blue7",flags:8,mods:32768,cat:32,meta:{color:"hsla(224,76%,48%,1)"},id:2055}),
s[2056]=a({parent:s[1975],name:"hue7",flags:8,mods:32768,cat:32,meta:{color:"hsla(224,76%,48%,1)"},id:2056}),
s[2057]=a({parent:s[1975],name:"blue8",flags:8,mods:32768,cat:32,meta:{color:"hsla(225,70%,40%,1)"},id:2057}),
s[2058]=a({parent:s[1975],name:"hue8",flags:8,mods:32768,cat:32,meta:{color:"hsla(225,70%,40%,1)"},id:2058}),
s[2059]=a({parent:s[1975],name:"blue9",flags:8,mods:32768,cat:32,meta:{color:"hsla(224,64%,32%,1)"},id:2059}),
s[2060]=a({parent:s[1975],name:"hue9",flags:8,mods:32768,cat:32,meta:{color:"hsla(224,64%,32%,1)"},id:2060}),
s[2061]=a({parent:s[1975],name:"sky0",flags:8,mods:32768,cat:32,meta:{color:"hsla(204,100%,97%,1)"},id:2061}),
s[2062]=a({parent:s[1975],name:"sky1",flags:8,mods:32768,cat:32,meta:{color:"hsla(204,93%,93%,1)"},id:2062}),
s[2063]=a({parent:s[1975],name:"sky2",flags:8,mods:32768,cat:32,meta:{color:"hsla(200,94%,86%,1)"},id:2063}),
s[2064]=a({parent:s[1975],name:"sky3",flags:8,mods:32768,cat:32,meta:{color:"hsla(199,95%,73%,1)"},id:2064}),
s[2065]=a({parent:s[1975],name:"sky4",flags:8,mods:32768,cat:32,meta:{color:"hsla(198,93%,59%,1)"},id:2065}),
s[2066]=a({parent:s[1975],name:"sky5",flags:8,mods:32768,cat:32,meta:{color:"hsla(198,88%,48%,1)"},id:2066}),
s[2067]=a({parent:s[1975],name:"sky6",flags:8,mods:32768,cat:32,meta:{color:"hsla(200,98%,39%,1)"},id:2067}),
s[2068]=a({parent:s[1975],name:"sky7",flags:8,mods:32768,cat:32,meta:{color:"hsla(201,96%,32%,1)"},id:2068}),
s[2069]=a({parent:s[1975],name:"sky8",flags:8,mods:32768,cat:32,meta:{color:"hsla(200,89%,27%,1)"},id:2069}),
s[2070]=a({parent:s[1975],name:"sky9",flags:8,mods:32768,cat:32,meta:{color:"hsla(202,80%,23%,1)"},id:2070}),
s[2071]=a({parent:s[1975],name:"cyan0",flags:8,mods:32768,cat:32,meta:{color:"hsla(183,100%,96%,1)"},id:2071}),
s[2072]=a({parent:s[1975],name:"cyan1",flags:8,mods:32768,cat:32,meta:{color:"hsla(185,95%,90%,1)"},id:2072}),
s[2073]=a({parent:s[1975],name:"cyan2",flags:8,mods:32768,cat:32,meta:{color:"hsla(186,93%,81%,1)"},id:2073}),
s[2074]=a({parent:s[1975],name:"cyan3",flags:8,mods:32768,cat:32,meta:{color:"hsla(186,92%,69%,1)"},id:2074}),
s[2075]=a({parent:s[1975],name:"cyan4",flags:8,mods:32768,cat:32,meta:{color:"hsla(187,85%,53%,1)"},id:2075}),
s[2076]=a({parent:s[1975],name:"cyan5",flags:8,mods:32768,cat:32,meta:{color:"hsla(188,94%,42%,1)"},id:2076}),
s[2077]=a({parent:s[1975],name:"cyan6",flags:8,mods:32768,cat:32,meta:{color:"hsla(191,91%,36%,1)"},id:2077}),
s[2078]=a({parent:s[1975],name:"cyan7",flags:8,mods:32768,cat:32,meta:{color:"hsla(192,82%,30%,1)"},id:2078}),
s[2079]=a({parent:s[1975],name:"cyan8",flags:8,mods:32768,cat:32,meta:{color:"hsla(194,69%,27%,1)"},id:2079}),
s[2080]=a({parent:s[1975],name:"cyan9",flags:8,mods:32768,cat:32,meta:{color:"hsla(196,63%,23%,1)"},id:2080}),
s[2081]=a({parent:s[1975],name:"teal0",flags:8,mods:32768,cat:32,meta:{color:"hsla(166,76%,96%,1)"},id:2081}),
s[2082]=a({parent:s[1975],name:"teal1",flags:8,mods:32768,cat:32,meta:{color:"hsla(167,85%,89%,1)"},id:2082}),
s[2083]=a({parent:s[1975],name:"teal2",flags:8,mods:32768,cat:32,meta:{color:"hsla(168,83%,78%,1)"},id:2083}),
s[2084]=a({parent:s[1975],name:"teal3",flags:8,mods:32768,cat:32,meta:{color:"hsla(170,76%,64%,1)"},id:2084}),
s[2085]=a({parent:s[1975],name:"teal4",flags:8,mods:32768,cat:32,meta:{color:"hsla(172,66%,50%,1)"},id:2085}),
s[2086]=a({parent:s[1975],name:"teal5",flags:8,mods:32768,cat:32,meta:{color:"hsla(173,80%,40%,1)"},id:2086}),
s[2087]=a({parent:s[1975],name:"teal6",flags:8,mods:32768,cat:32,meta:{color:"hsla(174,83%,31%,1)"},id:2087}),
s[2088]=a({parent:s[1975],name:"teal7",flags:8,mods:32768,cat:32,meta:{color:"hsla(175,77%,26%,1)"},id:2088}),
s[2089]=a({parent:s[1975],name:"teal8",flags:8,mods:32768,cat:32,meta:{color:"hsla(176,69%,21%,1)"},id:2089}),
s[2090]=a({parent:s[1975],name:"teal9",flags:8,mods:32768,cat:32,meta:{color:"hsla(175,60%,19%,1)"},id:2090}),
s[2091]=a({parent:s[1975],name:"emerald0",flags:8,mods:32768,cat:32,meta:{color:"hsla(151,80%,95%,1)"},id:2091}),
s[2092]=a({parent:s[1975],name:"emerald1",flags:8,mods:32768,cat:32,meta:{color:"hsla(149,80%,89%,1)"},id:2092}),
s[2093]=a({parent:s[1975],name:"emerald2",flags:8,mods:32768,cat:32,meta:{color:"hsla(152,75%,80%,1)"},id:2093}),
s[2094]=a({parent:s[1975],name:"emerald3",flags:8,mods:32768,cat:32,meta:{color:"hsla(156,71%,66%,1)"},id:2094}),
s[2095]=a({parent:s[1975],name:"emerald4",flags:8,mods:32768,cat:32,meta:{color:"hsla(158,64%,51%,1)"},id:2095}),
s[2096]=a({parent:s[1975],name:"emerald5",flags:8,mods:32768,cat:32,meta:{color:"hsla(160,84%,39%,1)"},id:2096}),
s[2097]=a({parent:s[1975],name:"emerald6",flags:8,mods:32768,cat:32,meta:{color:"hsla(161,93%,30%,1)"},id:2097}),
s[2098]=a({parent:s[1975],name:"emerald7",flags:8,mods:32768,cat:32,meta:{color:"hsla(162,93%,24%,1)"},id:2098}),
s[2099]=a({parent:s[1975],name:"emerald8",flags:8,mods:32768,cat:32,meta:{color:"hsla(163,88%,19%,1)"},id:2099}),
s[2100]=a({parent:s[1975],name:"emerald9",flags:8,mods:32768,cat:32,meta:{color:"hsla(164,85%,16%,1)"},id:2100}),
s[2101]=a({parent:s[1975],name:"green0",flags:8,mods:32768,cat:32,meta:{color:"hsla(138,76%,96%,1)"},id:2101}),
s[2102]=a({parent:s[1975],name:"green1",flags:8,mods:32768,cat:32,meta:{color:"hsla(140,84%,92%,1)"},id:2102}),
s[2103]=a({parent:s[1975],name:"green2",flags:8,mods:32768,cat:32,meta:{color:"hsla(141,78%,85%,1)"},id:2103}),
s[2104]=a({parent:s[1975],name:"green3",flags:8,mods:32768,cat:32,meta:{color:"hsla(141,76%,73%,1)"},id:2104}),
s[2105]=a({parent:s[1975],name:"green4",flags:8,mods:32768,cat:32,meta:{color:"hsla(141,69%,58%,1)"},id:2105}),
s[2106]=a({parent:s[1975],name:"green5",flags:8,mods:32768,cat:32,meta:{color:"hsla(142,70%,45%,1)"},id:2106}),
s[2107]=a({parent:s[1975],name:"green6",flags:8,mods:32768,cat:32,meta:{color:"hsla(142,76%,36%,1)"},id:2107}),
s[2108]=a({parent:s[1975],name:"green7",flags:8,mods:32768,cat:32,meta:{color:"hsla(142,71%,29%,1)"},id:2108}),
s[2109]=a({parent:s[1975],name:"green8",flags:8,mods:32768,cat:32,meta:{color:"hsla(142,64%,24%,1)"},id:2109}),
s[2110]=a({parent:s[1975],name:"green9",flags:8,mods:32768,cat:32,meta:{color:"hsla(143,61%,20%,1)"},id:2110}),
s[2111]=a({parent:s[1975],name:"lime0",flags:8,mods:32768,cat:32,meta:{color:"hsla(78,92%,95%,1)"},id:2111}),
s[2112]=a({parent:s[1975],name:"lime1",flags:8,mods:32768,cat:32,meta:{color:"hsla(79,89%,89%,1)"},id:2112}),
s[2113]=a({parent:s[1975],name:"lime2",flags:8,mods:32768,cat:32,meta:{color:"hsla(80,88%,79%,1)"},id:2113}),
s[2114]=a({parent:s[1975],name:"lime3",flags:8,mods:32768,cat:32,meta:{color:"hsla(81,84%,67%,1)"},id:2114}),
s[2115]=a({parent:s[1975],name:"lime4",flags:8,mods:32768,cat:32,meta:{color:"hsla(82,77%,55%,1)"},id:2115}),
s[2116]=a({parent:s[1975],name:"lime5",flags:8,mods:32768,cat:32,meta:{color:"hsla(83,80%,44%,1)"},id:2116}),
s[2117]=a({parent:s[1975],name:"lime6",flags:8,mods:32768,cat:32,meta:{color:"hsla(84,85%,34%,1)"},id:2117}),
s[2118]=a({parent:s[1975],name:"lime7",flags:8,mods:32768,cat:32,meta:{color:"hsla(85,78%,27%,1)"},id:2118}),
s[2119]=a({parent:s[1975],name:"lime8",flags:8,mods:32768,cat:32,meta:{color:"hsla(86,68%,22%,1)"},id:2119}),
s[2120]=a({parent:s[1975],name:"lime9",flags:8,mods:32768,cat:32,meta:{color:"hsla(87,61%,20%,1)"},id:2120}),
s[2121]=a({parent:s[1975],name:"yellow0",flags:8,mods:32768,cat:32,meta:{color:"hsla(54,91%,95%,1)"},id:2121}),
s[2122]=a({parent:s[1975],name:"yellow1",flags:8,mods:32768,cat:32,meta:{color:"hsla(54,96%,88%,1)"},id:2122}),
s[2123]=a({parent:s[1975],name:"yellow2",flags:8,mods:32768,cat:32,meta:{color:"hsla(52,98%,76%,1)"},id:2123}),
s[2124]=a({parent:s[1975],name:"yellow3",flags:8,mods:32768,cat:32,meta:{color:"hsla(50,97%,63%,1)"},id:2124}),
s[2125]=a({parent:s[1975],name:"yellow4",flags:8,mods:32768,cat:32,meta:{color:"hsla(47,95%,53%,1)"},id:2125}),
s[2126]=a({parent:s[1975],name:"yellow5",flags:8,mods:32768,cat:32,meta:{color:"hsla(45,93%,47%,1)"},id:2126}),
s[2127]=a({parent:s[1975],name:"yellow6",flags:8,mods:32768,cat:32,meta:{color:"hsla(40,96%,40%,1)"},id:2127}),
s[2128]=a({parent:s[1975],name:"yellow7",flags:8,mods:32768,cat:32,meta:{color:"hsla(35,91%,32%,1)"},id:2128}),
s[2129]=a({parent:s[1975],name:"yellow8",flags:8,mods:32768,cat:32,meta:{color:"hsla(31,80%,28%,1)"},id:2129}),
s[2130]=a({parent:s[1975],name:"yellow9",flags:8,mods:32768,cat:32,meta:{color:"hsla(28,72%,25%,1)"},id:2130}),
s[2131]=a({parent:s[1975],name:"amber0",flags:8,mods:32768,cat:32,meta:{color:"hsla(47,100%,96%,1)"},id:2131}),
s[2132]=a({parent:s[1975],name:"amber1",flags:8,mods:32768,cat:32,meta:{color:"hsla(47,96%,88%,1)"},id:2132}),
s[2133]=a({parent:s[1975],name:"amber2",flags:8,mods:32768,cat:32,meta:{color:"hsla(48,96%,76%,1)"},id:2133}),
s[2134]=a({parent:s[1975],name:"amber3",flags:8,mods:32768,cat:32,meta:{color:"hsla(45,96%,64%,1)"},id:2134}),
s[2135]=a({parent:s[1975],name:"amber4",flags:8,mods:32768,cat:32,meta:{color:"hsla(43,96%,56%,1)"},id:2135}),
s[2136]=a({parent:s[1975],name:"amber5",flags:8,mods:32768,cat:32,meta:{color:"hsla(37,92%,50%,1)"},id:2136}),
s[2137]=a({parent:s[1975],name:"amber6",flags:8,mods:32768,cat:32,meta:{color:"hsla(32,94%,43%,1)"},id:2137}),
s[2138]=a({parent:s[1975],name:"amber7",flags:8,mods:32768,cat:32,meta:{color:"hsla(25,90%,37%,1)"},id:2138}),
s[2139]=a({parent:s[1975],name:"amber8",flags:8,mods:32768,cat:32,meta:{color:"hsla(22,82%,31%,1)"},id:2139}),
s[2140]=a({parent:s[1975],name:"amber9",flags:8,mods:32768,cat:32,meta:{color:"hsla(21,77%,26%,1)"},id:2140}),
s[2141]=a({parent:s[1975],name:"orange0",flags:8,mods:32768,cat:32,meta:{color:"hsla(33,100%,96%,1)"},id:2141}),
s[2142]=a({parent:s[1975],name:"orange1",flags:8,mods:32768,cat:32,meta:{color:"hsla(34,100%,91%,1)"},id:2142}),
s[2143]=a({parent:s[1975],name:"orange2",flags:8,mods:32768,cat:32,meta:{color:"hsla(32,97%,83%,1)"},id:2143}),
s[2144]=a({parent:s[1975],name:"orange3",flags:8,mods:32768,cat:32,meta:{color:"hsla(30,97%,72%,1)"},id:2144}),
s[2145]=a({parent:s[1975],name:"orange4",flags:8,mods:32768,cat:32,meta:{color:"hsla(27,95%,60%,1)"},id:2145}),
s[2146]=a({parent:s[1975],name:"orange5",flags:8,mods:32768,cat:32,meta:{color:"hsla(24,94%,53%,1)"},id:2146}),
s[2147]=a({parent:s[1975],name:"orange6",flags:8,mods:32768,cat:32,meta:{color:"hsla(20,90%,48%,1)"},id:2147}),
s[2148]=a({parent:s[1975],name:"orange7",flags:8,mods:32768,cat:32,meta:{color:"hsla(17,88%,40%,1)"},id:2148}),
s[2149]=a({parent:s[1975],name:"orange8",flags:8,mods:32768,cat:32,meta:{color:"hsla(15,79%,33%,1)"},id:2149}),
s[2150]=a({parent:s[1975],name:"orange9",flags:8,mods:32768,cat:32,meta:{color:"hsla(15,74%,27%,1)"},id:2150}),
s[2151]=a({parent:s[1975],name:"red0",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,85%,97%,1)"},id:2151}),
s[2152]=a({parent:s[1975],name:"red1",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,93%,94%,1)"},id:2152}),
s[2153]=a({parent:s[1975],name:"red2",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,96%,89%,1)"},id:2153}),
s[2154]=a({parent:s[1975],name:"red3",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,93%,81%,1)"},id:2154}),
s[2155]=a({parent:s[1975],name:"red4",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,90%,70%,1)"},id:2155}),
s[2156]=a({parent:s[1975],name:"red5",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,84%,60%,1)"},id:2156}),
s[2157]=a({parent:s[1975],name:"red6",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,72%,50%,1)"},id:2157}),
s[2158]=a({parent:s[1975],name:"red7",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,73%,41%,1)"},id:2158}),
s[2159]=a({parent:s[1975],name:"red8",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,70%,35%,1)"},id:2159}),
s[2160]=a({parent:s[1975],name:"red9",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,62%,30%,1)"},id:2160}),
s[2161]=a({parent:s[1975],name:"warmer0",flags:8,mods:32768,cat:32,meta:{color:"hsla(60,9%,97%,1)"},id:2161}),
s[2162]=a({parent:s[1975],name:"warmer1",flags:8,mods:32768,cat:32,meta:{color:"hsla(60,4%,95%,1)"},id:2162}),
s[2163]=a({parent:s[1975],name:"warmer2",flags:8,mods:32768,cat:32,meta:{color:"hsla(20,5%,90%,1)"},id:2163}),
s[2164]=a({parent:s[1975],name:"warmer3",flags:8,mods:32768,cat:32,meta:{color:"hsla(23,5%,82%,1)"},id:2164}),
s[2165]=a({parent:s[1975],name:"warmer4",flags:8,mods:32768,cat:32,meta:{color:"hsla(23,5%,63%,1)"},id:2165}),
s[2166]=a({parent:s[1975],name:"warmer5",flags:8,mods:32768,cat:32,meta:{color:"hsla(24,5%,44%,1)"},id:2166}),
s[2167]=a({parent:s[1975],name:"warmer6",flags:8,mods:32768,cat:32,meta:{color:"hsla(33,5%,32%,1)"},id:2167}),
s[2168]=a({parent:s[1975],name:"warmer7",flags:8,mods:32768,cat:32,meta:{color:"hsla(30,6%,25%,1)"},id:2168}),
s[2169]=a({parent:s[1975],name:"warmer8",flags:8,mods:32768,cat:32,meta:{color:"hsla(12,6%,15%,1)"},id:2169}),
s[2170]=a({parent:s[1975],name:"warmer9",flags:8,mods:32768,cat:32,meta:{color:"hsla(24,9%,10%,1)"},id:2170}),
s[2171]=a({parent:s[1975],name:"warm0",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,98%,1)"},id:2171}),
s[2172]=a({parent:s[1975],name:"warm1",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,96%,1)"},id:2172}),
s[2173]=a({parent:s[1975],name:"warm2",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,89%,1)"},id:2173}),
s[2174]=a({parent:s[1975],name:"warm3",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,83%,1)"},id:2174}),
s[2175]=a({parent:s[1975],name:"warm4",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,63%,1)"},id:2175}),
s[2176]=a({parent:s[1975],name:"warm5",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,45%,1)"},id:2176}),
s[2177]=a({parent:s[1975],name:"warm6",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,32%,1)"},id:2177}),
s[2178]=a({parent:s[1975],name:"warm7",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,25%,1)"},id:2178}),
s[2179]=a({parent:s[1975],name:"warm8",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,14%,1)"},id:2179}),
s[2180]=a({parent:s[1975],name:"warm9",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,9%,1)"},id:2180}),
s[2181]=a({parent:s[1975],name:"gray0",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,98%,1)"},id:2181}),
s[2182]=a({parent:s[1975],name:"gray1",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,4%,95%,1)"},id:2182}),
s[2183]=a({parent:s[1975],name:"gray2",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,90%,1)"},id:2183}),
s[2184]=a({parent:s[1975],name:"gray3",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,4%,83%,1)"},id:2184}),
s[2185]=a({parent:s[1975],name:"gray4",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,64%,1)"},id:2185}),
s[2186]=a({parent:s[1975],name:"gray5",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,3%,46%,1)"},id:2186}),
s[2187]=a({parent:s[1975],name:"gray6",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,33%,1)"},id:2187}),
s[2188]=a({parent:s[1975],name:"gray7",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,26%,1)"},id:2188}),
s[2189]=a({parent:s[1975],name:"gray8",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,3%,15%,1)"},id:2189}),
s[2190]=a({parent:s[1975],name:"gray9",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,10%,1)"},id:2190}),
s[2191]=a({parent:s[1975],name:"cool0",flags:8,mods:32768,cat:32,meta:{color:"hsla(210,19%,98%,1)"},id:2191}),
s[2192]=a({parent:s[1975],name:"cool1",flags:8,mods:32768,cat:32,meta:{color:"hsla(219,14%,95%,1)"},id:2192}),
s[2193]=a({parent:s[1975],name:"cool2",flags:8,mods:32768,cat:32,meta:{color:"hsla(220,13%,90%,1)"},id:2193}),
s[2194]=a({parent:s[1975],name:"cool3",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,12%,83%,1)"},id:2194}),
s[2195]=a({parent:s[1975],name:"cool4",flags:8,mods:32768,cat:32,meta:{color:"hsla(217,10%,64%,1)"},id:2195}),
s[2196]=a({parent:s[1975],name:"cool5",flags:8,mods:32768,cat:32,meta:{color:"hsla(220,8%,46%,1)"},id:2196}),
s[2197]=a({parent:s[1975],name:"cool6",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,13%,34%,1)"},id:2197}),
s[2198]=a({parent:s[1975],name:"cool7",flags:8,mods:32768,cat:32,meta:{color:"hsla(216,19%,26%,1)"},id:2198}),
s[2199]=a({parent:s[1975],name:"cool8",flags:8,mods:32768,cat:32,meta:{color:"hsla(214,27%,16%,1)"},id:2199}),
s[2200]=a({parent:s[1975],name:"cool9",flags:8,mods:32768,cat:32,meta:{color:"hsla(220,39%,10%,1)"},id:2200}),
s[2201]=a({parent:s[1975],name:"cooler0",flags:8,mods:32768,cat:32,meta:{color:"hsla(210,40%,98%,1)"},id:2201}),
s[2202]=a({parent:s[1975],name:"cooler1",flags:8,mods:32768,cat:32,meta:{color:"hsla(209,40%,96%,1)"},id:2202}),
s[2203]=a({parent:s[1975],name:"cooler2",flags:8,mods:32768,cat:32,meta:{color:"hsla(214,31%,91%,1)"},id:2203}),
s[2204]=a({parent:s[1975],name:"cooler3",flags:8,mods:32768,cat:32,meta:{color:"hsla(212,26%,83%,1)"},id:2204}),
s[2205]=a({parent:s[1975],name:"cooler4",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,20%,65%,1)"},id:2205}),
s[2206]=a({parent:s[1975],name:"cooler5",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,16%,46%,1)"},id:2206}),
s[2207]=a({parent:s[1975],name:"cooler6",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,19%,34%,1)"},id:2207}),
s[2208]=a({parent:s[1975],name:"cooler7",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,24%,26%,1)"},id:2208}),
s[2209]=a({parent:s[1975],name:"cooler8",flags:8,mods:32768,cat:32,meta:{color:"hsla(217,32%,17%,1)"},id:2209}),
s[2210]=a({parent:s[1975],name:"cooler9",flags:8,mods:32768,cat:32,meta:{color:"hsla(222,47%,11%,1)"},id:2210}),
s[2211]=a({parent:s[1968],name:"position",flags:384,mods:0,cat:16,meta:{},id:2211}),
s[2212]=a({parent:s[1968],name:"string",flags:384,mods:0,cat:16,meta:{},id:2212}),
s[2213]=a({parent:s[1968],name:"image",flags:384,mods:0,cat:16,meta:{},id:2213}),
s[2214]=a({parent:s[1968],name:"repeat",flags:384,mods:0,cat:16,meta:{},id:2214}),
s[2215]=a({parent:s[1968],name:"box",flags:384,mods:0,cat:16,meta:{},id:2215}),
s[2216]=a({parent:s[1968],name:"font",flags:384,mods:0,cat:16,meta:{},id:2216}),
s[2217]=a({parent:s[1968],name:"time",flags:384,mods:0,cat:16,meta:{},id:2217}),
s[2218]=a({parent:s[1968],name:"easing-function",flags:384,mods:0,cat:16,meta:{},id:2218}),
s[2219]=a({parent:s[2218],name:"ease",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.25, 0.1, 0.25, 1.0)"},id:2219}),
s[2220]=a({parent:s[2218],name:"ease-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.42, 0.0, 1.0, 1.0)"},id:2220}),
s[2221]=a({parent:s[2218],name:"ease-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.0, 0.0, 0.58, 1.0)"},id:2221}),
s[2222]=a({parent:s[2218],name:"ease-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.42, 0.0, 0.58, 1.0)"},id:2222}),
s[2223]=a({parent:s[2218],name:"sine-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.47, 0, 0.745, 0.715)"},id:2223}),
s[2224]=a({parent:s[2218],name:"sine-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.39, 0.575, 0.565, 1)"},id:2224}),
s[2225]=a({parent:s[2218],name:"sine-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.445, 0.05, 0.55, 0.95)"},id:2225}),
s[2226]=a({parent:s[2218],name:"quad-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.55, 0.085, 0.68, 0.53)"},id:2226}),
s[2227]=a({parent:s[2218],name:"quad-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.25, 0.46, 0.45, 0.94)"},id:2227}),
s[2228]=a({parent:s[2218],name:"quad-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.455, 0.03, 0.515, 0.955)"},id:2228}),
s[2229]=a({parent:s[2218],name:"cubic-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.55, 0.055, 0.675, 0.19)"},id:2229}),
s[2230]=a({parent:s[2218],name:"cubic-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.215, 0.61, 0.355, 1)"},id:2230}),
s[2231]=a({parent:s[2218],name:"cubic-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.645, 0.045, 0.355, 1)"},id:2231}),
s[2232]=a({parent:s[2218],name:"quart-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.895, 0.03, 0.685, 0.22)"},id:2232}),
s[2233]=a({parent:s[2218],name:"quart-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.165, 0.84, 0.44, 1)"},id:2233}),
s[2234]=a({parent:s[2218],name:"quart-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.77, 0, 0.175, 1)"},id:2234}),
s[2235]=a({parent:s[2218],name:"quint-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.755, 0.05, 0.855, 0.06)"},id:2235}),
s[2236]=a({parent:s[2218],name:"quint-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.23, 1, 0.32, 1)"},id:2236}),
s[2237]=a({parent:s[2218],name:"quint-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.86, 0, 0.07, 1)"},id:2237}),
s[2238]=a({parent:s[2218],name:"expo-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.95, 0.05, 0.795, 0.035)"},id:2238}),
s[2239]=a({parent:s[2218],name:"expo-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.19, 1, 0.22, 1)"},id:2239}),
s[2240]=a({parent:s[2218],name:"expo-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(1, 0, 0, 1)"},id:2240}),
s[2241]=a({parent:s[2218],name:"circ-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.6, 0.04, 0.98, 0.335)"},id:2241}),
s[2242]=a({parent:s[2218],name:"circ-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.075, 0.82, 0.165, 1)"},id:2242}),
s[2243]=a({parent:s[2218],name:"circ-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.785, 0.135, 0.15, 0.86)"},id:2243}),
s[2244]=a({parent:s[2218],name:"back-in",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.6, -0.28, 0.735, 0.045)"},id:2244}),
s[2245]=a({parent:s[2218],name:"back-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.175, 0.885, 0.32, 1.275)"},id:2245}),
s[2246]=a({parent:s[2218],name:"back-in-out",flags:8,mods:32768,cat:32,meta:{easing:"cubic-bezier(0.68, -0.55, 0.265, 1.55)"},id:2246}),
s[2247]=a({parent:s[1968],name:"property",flags:384,mods:0,cat:16,meta:{},id:2247}),
s[2248]=a({parent:s[1968],name:"identifier",flags:384,mods:0,cat:16,meta:{},id:2248}),
s[2249]=a({parent:s[1968],name:"url",flags:384,mods:0,cat:16,meta:{},id:2249}),
s[2250]=a({parent:s[1968],name:"integer",flags:384,mods:0,cat:16,meta:{},id:2250}),
s[2251]=a({parent:s[1968],name:"unicode-range",flags:384,mods:0,cat:16,meta:{},id:2251}),
s[2252]=a({parent:s[1968],name:"geometry-box",flags:384,mods:0,cat:16,meta:{},id:2252}),
s[2253]=a({parent:s[1968],name:"shape",flags:384,mods:0,cat:16,meta:{},id:2253}),
s[2254]=a({parent:s[1968],name:"angle",flags:384,mods:0,cat:16,meta:{},id:2254}),
s[2255]=a({parent:s[1968],name:"globals",flags:384,mods:0,cat:16,meta:{},id:2255}),
s[2256]=a({parent:s[1968],name:"radius",flags:384,mods:0,cat:16,meta:{},id:2256}),
s[2257]=a({parent:s[2256],name:"full",flags:8,mods:32768,cat:32,meta:{detail:"100%",desc:"<p>9999px</p>\n"},id:2257}),
s[2258]=a({parent:s[2256],name:"xxs",flags:8,mods:32768,cat:32,meta:{detail:"1px",desc:"<p>1px</p>\n"},id:2258}),
s[2259]=a({parent:s[2256],name:"xs",flags:8,mods:32768,cat:32,meta:{detail:"2px",desc:"<p>2px</p>\n"},id:2259}),
s[2260]=a({parent:s[2256],name:"sm",flags:8,mods:32768,cat:32,meta:{detail:"3px",desc:"<p>3px</p>\n"},id:2260}),
s[2261]=a({parent:s[2256],name:"md",flags:8,mods:32768,cat:32,meta:{detail:"4px",desc:"<p>4px</p>\n"},id:2261}),
s[2262]=a({parent:s[2256],name:"lg",flags:8,mods:32768,cat:32,meta:{detail:"6px",desc:"<p>6px</p>\n"},id:2262}),
s[2263]=a({parent:s[2256],name:"xl",flags:8,mods:32768,cat:32,meta:{detail:"8px",desc:"<p>8px</p>\n"},id:2263}),
s[2264]=a({parent:s[1968],name:"spacing",flags:384,mods:0,cat:16,meta:{},id:2264}),
s[2265]=a({parent:s[1968],name:"dimension",flags:384,mods:0,cat:16,meta:{},id:2265}),
s[2266]=a({parent:s[1968],name:"px",flags:4,mods:32768,cat:2,meta:{detail:"padding-(left+right)"},id:2266}),
s[2267]=a({parent:s[1968],name:"py",flags:4,mods:32768,cat:2,meta:{detail:"padding-(top+bottom)"},id:2267}),
s[2268]=a({parent:s[1968],name:"mx",flags:4,mods:32768,cat:2,meta:{detail:"margin-(left+right)"},id:2268}),
s[2269]=a({parent:s[1968],name:"my",flags:4,mods:0,cat:2,meta:{},id:2269}),
s[2270]=a({parent:s[1968],name:"size",flags:4,mods:32768,cat:2,meta:{detail:"width+height",desc:"<p>undefined</p>\n"},id:2270}),
s[2271]=a({parent:s[1968],name:"j",flags:4,mods:32768,cat:2,meta:{detail:"justify-(items+content)"},id:2271}),
s[2272]=a({parent:s[1968],name:"a",flags:4,mods:32768,cat:2,meta:{detail:"align-(items+content)"},id:2272}),
s[2273]=a({parent:s[1968],name:"place-items",flags:4,mods:0,cat:2,meta:{desc:"<p>The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it.</p>\n"},id:2273}),
s[2274]=a({parent:s[1968],name:"jai",flags:4,mods:32768,cat:2,meta:{},proxy:s[2273],id:2274}),
s[2275]=a({parent:s[1968],name:"place-content",flags:4,mods:0,cat:2,meta:{desc:"<p>The place-content CSS shorthand property sets both the align-content and justify-content properties.</p>\n"},id:2275}),
s[2276]=a({parent:s[1968],name:"jac",flags:4,mods:32768,cat:2,meta:{},proxy:s[2275],id:2276}),
s[2277]=a({parent:s[1968],name:"place-self",flags:4,mods:0,cat:2,meta:{desc:"<p>The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it.</p>\n"},id:2277}),
s[2278]=a({parent:s[1968],name:"jas",flags:4,mods:32768,cat:2,meta:{},proxy:s[2277],id:2278}),
s[2279]=a({parent:s[1968],name:"ja",flags:4,mods:32768,cat:2,meta:{detail:"place-(items+content)"},id:2279}),
s[2280]=a({parent:s[1968],name:"rdt",flags:4,mods:32768,cat:2,meta:{detail:"border-top-(left+right)-radius"},id:2280}),
s[2281]=a({parent:s[1968],name:"rdl",flags:4,mods:32768,cat:2,meta:{detail:"border-(top+bottom)-left-radius"},id:2281}),
s[2282]=a({parent:s[1968],name:"rdb",flags:4,mods:32768,cat:2,meta:{detail:"border-bottom-(left+right)-radius"},id:2282}),
s[2283]=a({parent:s[1968],name:"rdr",flags:4,mods:32768,cat:2,meta:{detail:"border-(top+bottom)-right-radius"},id:2283}),
s[2284]=a({parent:s[1968],name:"transition",flags:4,mods:0,cat:2,meta:{alias:"tween",desc:"<p>Shorthand property combines four of the transition properties into a single property.</p>\n"},id:2284}),
s[2285]=a({parent:s[2284],name:"all",flags:8,mods:32768,cat:32,meta:{desc:"<p>Every property that is able to undergo a transition will do so.</p>\n"},id:2285}),
s[2286]=a({parent:s[2284],name:"styles",flags:8,mods:32768,cat:32,meta:{desc:"<p>background-color, border-color, color, fill, stroke, opacity, box-shadow, transform</p>\n"},id:2286}),
s[2287]=a({parent:s[2284],name:"sizes",flags:8,mods:32768,cat:32,meta:{desc:"<p>width, height, left, top, right, bottom, margin, padding</p>\n"},id:2287}),
s[2288]=a({parent:s[2284],name:"colors",flags:8,mods:32768,cat:32,meta:{desc:"<p>background-color, border-color, color, fill, stroke</p>\n"},id:2288}),
s[2289]=a({parent:s[2284],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No property will transition.</p>\n"},id:2289}),
s[2290]=a({parent:s[1968],name:"tween",flags:4,mods:32768,cat:2,meta:{},proxy:s[2284],id:2290}),
s[2291]=a({parent:s[1968],name:"x",flags:4,mods:32768,cat:2,meta:{detail:"transform: translateX(...)",desc:"<p>Shorthand for setting transform translateX()</p>\n"},id:2291}),
s[2292]=a({parent:s[1968],name:"y",flags:4,mods:32768,cat:2,meta:{detail:"transform: translateY(...)",desc:"<p>Shorthand for setting transform translateY()</p>\n"},id:2292}),
s[2293]=a({parent:s[1968],name:"z",flags:4,mods:32768,cat:2,meta:{detail:"transform: translateZ(...)",desc:"<p>Shorthand for setting transform translateZ()</p>\n"},id:2293}),
s[2294]=a({parent:s[1968],name:"skew-x",flags:4,mods:32768,cat:2,meta:{detail:"transform: skewX(...)",desc:"<p>Shorthand for setting transform skewX()</p>\n"},id:2294}),
s[2295]=a({parent:s[1968],name:"skew-y",flags:4,mods:32768,cat:2,meta:{detail:"transform: skewY(...)",desc:"<p>Shorthand for setting transform skewY()</p>\n"},id:2295}),
s[2296]=a({parent:s[1968],name:"scale-x",flags:4,mods:32768,cat:2,meta:{detail:"transform: scaleX(...)",desc:"<p>Shorthand for setting transform scaleX()</p>\n"},id:2296}),
s[2297]=a({parent:s[1968],name:"scale-y",flags:4,mods:32768,cat:2,meta:{detail:"transform: scaleY(...)",desc:"<p>Shorthand for setting transform scaleY()</p>\n"},id:2297}),
s[2298]=a({parent:s[1968],name:"scale",flags:4,mods:32768,cat:2,meta:{detail:"transform: scale(...)",alias:"scale",desc:"<p>Shorthand for setting transform scale()\nThe scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.</p>\n"},proxy:s[2298],id:2298}),
s[2299]=a({parent:s[1968],name:"rotate",flags:4,mods:32768,cat:2,meta:{detail:"transform: rotate(...)",desc:"<p>Shorthand for setting transform rotate()</p>\n"},id:2299}),
s[2300]=a({parent:s[1968],name:"ease",flags:4,mods:32768,cat:2,meta:{desc:"<p>Shorthand for setting transform skeq-y()</p>\n"},id:2300}),
s[2301]=a({parent:s[1968],name:"ease-transform",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand for setting transform scale-x()</p>\n"},id:2301}),
s[2302]=a({parent:s[1968],name:"ease-colors",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand for setting transform scale-x()</p>\n"},id:2302}),
s[2303]=a({parent:s[1968],name:"ease-opacity",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand for setting transform scale-x()</p>\n"},id:2303}),
s[2304]=a({parent:s[1968],name:"e",flags:4,mods:32768,cat:2,meta:{},proxy:s[2300],id:2304}),
s[2305]=a({parent:s[1968],name:"et",flags:4,mods:32768,cat:2,meta:{},proxy:s[2301],id:2305}),
s[2306]=a({parent:s[1968],name:"ec",flags:4,mods:32768,cat:2,meta:{},proxy:s[2302],id:2306}),
s[2307]=a({parent:s[1968],name:"eo",flags:4,mods:32768,cat:2,meta:{},proxy:s[2303],id:2307}),
s[2308]=a({parent:s[1968],name:"hue",flags:4,mods:32768,cat:2,meta:{desc:"<p>Set color alias</p>\n"},id:2308}),
s[2309]=a({parent:s[1968],name:"width",flags:4,mods:0,cat:2,meta:{alias:"w",desc:"<p>Specifies the width of the content area, padding area or border area (depending on &#39;box-sizing&#39;) of certain boxes.</p>\n"},id:2309}),
s[2310]=a({parent:s[2309],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The width depends on the values of other properties.</p>\n"},id:2310}),
s[2311]=a({parent:s[2309],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2311}),
s[2312]=a({parent:s[2309],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2312}),
s[2313]=a({parent:s[2309],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2313}),
s[2314]=a({parent:s[1968],name:"w",flags:4,mods:32768,cat:2,meta:{},proxy:s[2309],id:2314}),
s[2315]=a({parent:s[1968],name:"height",flags:4,mods:0,cat:2,meta:{alias:"h",desc:"<p>Specifies the height of the content area, padding area or border area (depending on &#39;box-sizing&#39;) of certain boxes.</p>\n"},id:2315}),
s[2316]=a({parent:s[2315],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The height depends on the values of other properties.</p>\n"},id:2316}),
s[2317]=a({parent:s[2315],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2317}),
s[2318]=a({parent:s[2315],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2318}),
s[2319]=a({parent:s[2315],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2319}),
s[2320]=a({parent:s[1968],name:"h",flags:4,mods:32768,cat:2,meta:{},proxy:s[2315],id:2320}),
s[2321]=a({parent:s[1968],name:"display",flags:4,mods:0,cat:2,meta:{alias:"d",desc:"<p>In combination with &#39;float&#39; and &#39;position&#39;, determines the type of box or boxes that are generated for an element.</p>\n"},id:2321}),
s[2322]=a({parent:s[2321],name:"block",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a block-level box</p>\n"},id:2322}),
s[2323]=a({parent:s[2321],name:"contents",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal.</p>\n"},id:2323}),
s[2324]=a({parent:s[2321],name:"flex",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a principal flex container box and establishes a flex formatting context.</p>\n"},id:2324}),
s[2325]=a({parent:s[2321],name:"hflex",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex with flex-direction set to row</p>\n"},id:2325}),
s[2326]=a({parent:s[2321],name:"vflex",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex with flex-direction set to column</p>\n"},id:2326}),
s[2327]=a({parent:s[2321],name:"flow-root",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a block container box, and lays out its contents using flow layout.</p>\n"},id:2327}),
s[2328]=a({parent:s[2321],name:"grid",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a principal grid container box, and establishes a grid formatting context.</p>\n"},id:2328}),
s[2329]=a({parent:s[2321],name:"hgrid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Grid with grid-auto-flow set to column</p>\n"},id:2329}),
s[2330]=a({parent:s[2321],name:"vgrid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Grid with grid-auto-flow set to row</p>\n"},id:2330}),
s[2331]=a({parent:s[2321],name:"inline",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates an inline-level box.</p>\n"},id:2331}),
s[2332]=a({parent:s[2321],name:"inline-block",flags:8,mods:32768,cat:32,meta:{desc:"<p>A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box.</p>\n"},id:2332}),
s[2333]=a({parent:s[2321],name:"inline-flex",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level flex container.</p>\n"},id:2333}),
s[2334]=a({parent:s[2321],name:"inline-table",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level table wrapper box containing table box.</p>\n"},id:2334}),
s[2335]=a({parent:s[2321],name:"list-item",flags:8,mods:32768,cat:32,meta:{desc:"<p>One or more block boxes and one marker box.</p>\n"},id:2335}),
s[2336]=a({parent:s[2321],name:"-moz-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element lays out its contents using flow layout (block-and-inline layout). Standardized as &#39;flex&#39;.</p>\n"},id:2336}),
s[2337]=a({parent:s[2321],name:"-moz-inline-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level flex container. Standardized as &#39;inline-flex&#39;</p>\n"},id:2337}),
s[2338]=a({parent:s[2321],name:"-ms-flexbox",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element lays out its contents using flow layout (block-and-inline layout). Standardized as &#39;flex&#39;.</p>\n"},id:2338}),
s[2339]=a({parent:s[2321],name:"-ms-grid",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a principal grid container box, and establishes a grid formatting context.</p>\n"},id:2339}),
s[2340]=a({parent:s[2321],name:"-ms-inline-flexbox",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level flex container. Standardized as &#39;inline-flex&#39;</p>\n"},id:2340}),
s[2341]=a({parent:s[2321],name:"-ms-inline-grid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level grid container.</p>\n"},id:2341}),
s[2342]=a({parent:s[2321],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element and its descendants generates no boxes.</p>\n"},id:2342}),
s[2343]=a({parent:s[2321],name:"ruby",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a principal ruby container box, and establishes a ruby formatting context.</p>\n"},id:2343}),
s[2344]=a({parent:s[2321],name:"run-in",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements.</p>\n"},id:2344}),
s[2345]=a({parent:s[2321],name:"table",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context.</p>\n"},id:2345}),
s[2346]=a({parent:s[2321],name:"-webkit-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element lays out its contents using flow layout (block-and-inline layout). Standardized as &#39;flex&#39;.</p>\n"},id:2346}),
s[2347]=a({parent:s[2321],name:"-webkit-flex",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element lays out its contents using flow layout (block-and-inline layout).</p>\n"},id:2347}),
s[2348]=a({parent:s[2321],name:"-webkit-inline-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level flex container. Standardized as &#39;inline-flex&#39;</p>\n"},id:2348}),
s[2349]=a({parent:s[2321],name:"-webkit-inline-flex",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inline-level flex container.</p>\n"},id:2349}),
s[2350]=a({parent:s[1968],name:"d",flags:4,mods:32768,cat:2,meta:{},proxy:s[2321],id:2350}),
s[2351]=a({parent:s[1968],name:"padding",flags:4,mods:0,cat:2,meta:{alias:"p",desc:"<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n"},id:2351}),
s[2352]=a({parent:s[1968],name:"p",flags:4,mods:32768,cat:2,meta:{},proxy:s[2351],id:2352}),
s[2353]=a({parent:s[1968],name:"position",flags:4,mods:0,cat:2,meta:{alias:"pos",desc:"<p>The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.</p>\n"},id:2353}),
s[2354]=a({parent:s[2353],name:"absolute",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position (and possibly size) is specified with the &#39;top&#39;, &#39;right&#39;, &#39;bottom&#39;, and &#39;left&#39; properties. These properties specify offsets with respect to the box&#39;s &#39;containing block&#39;.</p>\n"},id:2354}),
s[2355]=a({parent:s[2353],name:"fixed",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position is calculated according to the &#39;absolute&#39; model, but in addition, the box is fixed with respect to some reference. As with the &#39;absolute&#39; model, the box&#39;s margins do not collapse with any other margins.</p>\n"},id:2355}),
s[2356]=a({parent:s[2353],name:"-ms-page",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position is calculated according to the &#39;absolute&#39; model.</p>\n"},id:2356}),
s[2357]=a({parent:s[2353],name:"relative",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position.</p>\n"},id:2357}),
s[2358]=a({parent:s[2353],name:"static",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box is a normal box, laid out according to the normal flow. The &#39;top&#39;, &#39;right&#39;, &#39;bottom&#39;, and &#39;left&#39; properties do not apply.</p>\n"},id:2358}),
s[2359]=a({parent:s[2353],name:"sticky",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.</p>\n"},id:2359}),
s[2360]=a({parent:s[2353],name:"-webkit-sticky",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box&#39;s position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.</p>\n"},id:2360}),
s[2361]=a({parent:s[1968],name:"pos",flags:4,mods:32768,cat:2,meta:{},proxy:s[2353],id:2361}),
s[2362]=a({parent:s[1968],name:"border",flags:4,mods:0,cat:2,meta:{alias:"bd",desc:"<p>Shorthand property for setting border width, style, and color.</p>\n"},id:2362}),
s[2363]=a({parent:s[1968],name:"bd",flags:4,mods:32768,cat:2,meta:{},proxy:s[2362],id:2363}),
s[2364]=a({parent:s[1968],name:"margin",flags:4,mods:0,cat:2,meta:{alias:"m",desc:"<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.</p>\n"},id:2364}),
s[2365]=a({parent:s[1968],name:"m",flags:4,mods:32768,cat:2,meta:{},proxy:s[2364],id:2365}),
s[2366]=a({parent:s[1968],name:"svg",flags:4,mods:0,cat:2,meta:{desc:"<p>Set asset as inline background svg</p>\n"},id:2366}),
s[2367]=a({parent:s[1968],name:"top",flags:4,mods:0,cat:2,meta:{alias:"t",desc:"<p>Specifies how far an absolutely positioned box&#39;s top margin edge is offset below the top edge of the box&#39;s &#39;containing block&#39;.</p>\n"},id:2367}),
s[2368]=a({parent:s[2367],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well</p>\n"},id:2368}),
s[2369]=a({parent:s[1968],name:"t",flags:4,mods:32768,cat:2,meta:{},proxy:s[2367],id:2369}),
s[2370]=a({parent:s[1968],name:"left",flags:4,mods:0,cat:2,meta:{alias:"l",desc:"<p>Specifies how far an absolutely positioned box&#39;s left margin edge is offset to the right of the left edge of the box&#39;s &#39;containing block&#39;.</p>\n"},id:2370}),
s[2371]=a({parent:s[2370],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well</p>\n"},id:2371}),
s[2372]=a({parent:s[1968],name:"l",flags:4,mods:32768,cat:2,meta:{},proxy:s[2370],id:2372}),
s[2373]=a({parent:s[1968],name:"margin-top",flags:4,mods:0,cat:2,meta:{alias:"mt",desc:"<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n"},id:2373}),
s[2374]=a({parent:s[1968],name:"mt",flags:4,mods:32768,cat:2,meta:{},proxy:s[2373],id:2374}),
s[2375]=a({parent:s[1968],name:"color",flags:4,mods:0,cat:2,meta:{alias:"c",desc:"<p>Sets the color of an element&#39;s text</p>\n"},id:2375}),
s[2376]=a({parent:s[1968],name:"c",flags:4,mods:32768,cat:2,meta:{},proxy:s[2375],id:2376}),
s[2377]=a({parent:s[1968],name:"font-size",flags:4,mods:0,cat:2,meta:{alias:"fs",desc:"<p>Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.</p>\n"},id:2377}),
s[2378]=a({parent:s[1968],name:"fs",flags:4,mods:32768,cat:2,meta:{},proxy:s[2377],id:2378}),
s[2379]=a({parent:s[1968],name:"background-color",flags:4,mods:0,cat:2,meta:{alias:"bgc",desc:"<p>Sets the background color of an element.</p>\n"},id:2379}),
s[2380]=a({parent:s[1968],name:"bgc",flags:4,mods:32768,cat:2,meta:{},proxy:s[2379],id:2380}),
s[2381]=a({parent:s[1968],name:"text-align",flags:4,mods:0,cat:2,meta:{alias:"ta",desc:"<p>Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.</p>\n"},id:2381}),
s[2382]=a({parent:s[2381],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are centered within the line box.</p>\n"},id:2382}),
s[2383]=a({parent:s[2381],name:"end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the end edge of the line box.</p>\n"},id:2383}),
s[2384]=a({parent:s[2381],name:"justify",flags:8,mods:32768,cat:32,meta:{desc:"<p>The text is justified according to the method specified by the &#39;text-justify&#39; property.</p>\n"},id:2384}),
s[2385]=a({parent:s[2381],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the left edge of the line box. In vertical text, &#39;left&#39; aligns to the edge of the line box that would be the start edge for left-to-right text.</p>\n"},id:2385}),
s[2386]=a({parent:s[2381],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the right edge of the line box. In vertical text, &#39;right&#39; aligns to the edge of the line box that would be the end edge for left-to-right text.</p>\n"},id:2386}),
s[2387]=a({parent:s[2381],name:"start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the start edge of the line box.</p>\n"},id:2387}),
s[2388]=a({parent:s[1968],name:"ta",flags:4,mods:32768,cat:2,meta:{},proxy:s[2381],id:2388}),
s[2389]=a({parent:s[1968],name:"opacity",flags:4,mods:0,cat:2,meta:{alias:"o",desc:"<p>Opacity of an element&#39;s text, where 1 is opaque and 0 is entirely transparent.</p>\n"},id:2389}),
s[2390]=a({parent:s[1968],name:"o",flags:4,mods:32768,cat:2,meta:{},proxy:s[2389],id:2390}),
s[2391]=a({parent:s[1968],name:"background",flags:4,mods:0,cat:2,meta:{alias:"bg",desc:"<p>Shorthand property for setting most background properties at the same place in the style sheet.</p>\n"},id:2391}),
s[2392]=a({parent:s[2391],name:"fixed",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the viewport. In paged media where there is no viewport, a &#39;fixed&#39; background is fixed with respect to the page box and therefore replicated on every page.</p>\n"},id:2392}),
s[2393]=a({parent:s[2391],name:"local",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the element&#39;s contents: if the element has a scrolling mechanism, the background scrolls with the element&#39;s contents.</p>\n"},id:2393}),
s[2394]=a({parent:s[2391],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>A value of &#39;none&#39; counts as an image layer but draws nothing.</p>\n"},id:2394}),
s[2395]=a({parent:s[2391],name:"scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element&#39;s border.)</p>\n"},id:2395}),
s[2396]=a({parent:s[1968],name:"bg",flags:4,mods:32768,cat:2,meta:{},proxy:s[2391],id:2396}),
s[2397]=a({parent:s[1968],name:"font-weight",flags:4,mods:0,cat:2,meta:{alias:"fw",desc:"<p>Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.</p>\n"},id:2397}),
s[2398]=a({parent:s[2397],name:"100",flags:8,mods:32768,cat:32,meta:{desc:"<p>Thin</p>\n"},id:2398}),
s[2399]=a({parent:s[2397],name:"200",flags:8,mods:32768,cat:32,meta:{desc:"<p>Extra Light (Ultra Light)</p>\n"},id:2399}),
s[2400]=a({parent:s[2397],name:"300",flags:8,mods:32768,cat:32,meta:{desc:"<p>Light</p>\n"},id:2400}),
s[2401]=a({parent:s[2397],name:"400",flags:8,mods:32768,cat:32,meta:{desc:"<p>Normal</p>\n"},id:2401}),
s[2402]=a({parent:s[2397],name:"500",flags:8,mods:32768,cat:32,meta:{desc:"<p>Medium</p>\n"},id:2402}),
s[2403]=a({parent:s[2397],name:"600",flags:8,mods:32768,cat:32,meta:{desc:"<p>Semi Bold (Demi Bold)</p>\n"},id:2403}),
s[2404]=a({parent:s[2397],name:"700",flags:8,mods:32768,cat:32,meta:{desc:"<p>Bold</p>\n"},id:2404}),
s[2405]=a({parent:s[2397],name:"800",flags:8,mods:32768,cat:32,meta:{desc:"<p>Extra Bold (Ultra Bold)</p>\n"},id:2405}),
s[2406]=a({parent:s[2397],name:"900",flags:8,mods:32768,cat:32,meta:{desc:"<p>Black (Heavy)</p>\n"},id:2406}),
s[2407]=a({parent:s[2397],name:"bold",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as 700</p>\n"},id:2407}),
s[2408]=a({parent:s[2397],name:"bolder",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies the weight of the face bolder than the inherited value.</p>\n"},id:2408}),
s[2409]=a({parent:s[2397],name:"lighter",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies the weight of the face lighter than the inherited value.</p>\n"},id:2409}),
s[2410]=a({parent:s[2397],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as 400</p>\n"},id:2410}),
s[2411]=a({parent:s[1968],name:"fw",flags:4,mods:32768,cat:2,meta:{},proxy:s[2397],id:2411}),
s[2412]=a({parent:s[1968],name:"overflow",flags:4,mods:0,cat:2,meta:{alias:"of",desc:"<p>Shorthand for setting &#39;overflow-x&#39; and &#39;overflow-y&#39;.</p>\n"},id:2412}),
s[2413]=a({parent:s[2412],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The behavior of the &#39;auto&#39; value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.</p>\n"},id:2413}),
s[2414]=a({parent:s[2412],name:"hidden",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.</p>\n"},id:2414}),
s[2415]=a({parent:s[2412],name:"-moz-hidden-unscrollable",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as the standardized &#39;clip&#39;, except doesnโt establish a block formatting context.</p>\n"},id:2415}),
s[2416]=a({parent:s[2412],name:"scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.</p>\n"},id:2416}),
s[2417]=a({parent:s[2412],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is not clipped, i.e., it may be rendered outside the content box.</p>\n"},id:2417}),
s[2418]=a({parent:s[1968],name:"of",flags:4,mods:32768,cat:2,meta:{},proxy:s[2412],id:2418}),
s[2419]=a({parent:s[1968],name:"font-family",flags:4,mods:0,cat:2,meta:{alias:"ff",desc:"<p>Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.</p>\n"},id:2419}),
s[2420]=a({parent:s[1968],name:"ff",flags:4,mods:32768,cat:2,meta:{},proxy:s[2419],id:2420}),
s[2421]=a({parent:s[1968],name:"float",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.</p>\n"},id:2421}),
s[2422]=a({parent:s[2421],name:"inline-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts.</p>\n"},id:2422}),
s[2423]=a({parent:s[2421],name:"inline-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts.</p>\n"},id:2423}),
s[2424]=a({parent:s[2421],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the &#39;clear&#39; property).</p>\n"},id:2424}),
s[2425]=a({parent:s[2421],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The box is not floated.</p>\n"},id:2425}),
s[2426]=a({parent:s[2421],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Similar to &#39;left&#39;, except the box is floated to the right, and content flows on the left side of the box, starting at the top.</p>\n"},id:2426}),
s[2427]=a({parent:s[1968],name:"line-height",flags:4,mods:0,cat:2,meta:{alias:"lh",desc:"<p>Determines the block-progression dimension of the text content area of an inline box.</p>\n"},id:2427}),
s[2428]=a({parent:s[2427],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Tells user agents to set the computed value to a &#39;reasonable&#39; value based on the font size of the element.</p>\n"},id:2428}),
s[2429]=a({parent:s[1968],name:"lh",flags:4,mods:32768,cat:2,meta:{},proxy:s[2427],id:2429}),
s[2430]=a({parent:s[1968],name:"box-sizing",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the behavior of the &#39;width&#39; and &#39;height&#39; properties.</p>\n"},id:2430}),
s[2431]=a({parent:s[2430],name:"border-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>The specified width and height (and respective min/max properties) on this element determine the border box of the element.</p>\n"},id:2431}),
s[2432]=a({parent:s[2430],name:"content-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element.</p>\n"},id:2432}),
s[2433]=a({parent:s[1968],name:"text-decoration",flags:4,mods:0,cat:2,meta:{alias:"td",desc:"<p>Decorations applied to font used for an element&#39;s text.</p>\n"},id:2433}),
s[2434]=a({parent:s[2433],name:"dashed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a dashed line style.</p>\n"},id:2434}),
s[2435]=a({parent:s[2433],name:"dotted",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a dotted line.</p>\n"},id:2435}),
s[2436]=a({parent:s[2433],name:"double",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a double line.</p>\n"},id:2436}),
s[2437]=a({parent:s[2433],name:"line-through",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text has a line through the middle.</p>\n"},id:2437}),
s[2438]=a({parent:s[2433],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces no line.</p>\n"},id:2438}),
s[2439]=a({parent:s[2433],name:"overline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text has a line above it.</p>\n"},id:2439}),
s[2440]=a({parent:s[2433],name:"solid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a solid line.</p>\n"},id:2440}),
s[2441]=a({parent:s[2433],name:"underline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text is underlined.</p>\n"},id:2441}),
s[2442]=a({parent:s[2433],name:"wavy",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a wavy line.</p>\n"},id:2442}),
s[2443]=a({parent:s[1968],name:"td",flags:4,mods:32768,cat:2,meta:{},proxy:s[2433],id:2443}),
s[2444]=a({parent:s[1968],name:"z-index",flags:4,mods:0,cat:2,meta:{alias:"zi",desc:"<p>For a positioned box, the &#39;z-index&#39; property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.</p>\n"},id:2444}),
s[2445]=a({parent:s[2444],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element.</p>\n"},id:2445}),
s[2446]=a({parent:s[1968],name:"zi",flags:4,mods:32768,cat:2,meta:{},proxy:s[2444],id:2446}),
s[2447]=a({parent:s[1968],name:"vertical-align",flags:4,mods:0,cat:2,meta:{alias:"va",desc:"<p>Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.</p>\n"},id:2447}),
s[2448]=a({parent:s[2447],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box.</p>\n"},id:2448}),
s[2449]=a({parent:s[2447],name:"baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the &#39;alphabetic&#39; baseline of the element with the &#39;alphabetic&#39; baseline of the parent element.</p>\n"},id:2449}),
s[2450]=a({parent:s[2447],name:"bottom",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the after edge of the extended inline box with the after-edge of the line box.</p>\n"},id:2450}),
s[2451]=a({parent:s[2447],name:"middle",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the &#39;middle&#39; baseline of the inline element with the middle baseline of the parent.</p>\n"},id:2451}),
s[2452]=a({parent:s[2447],name:"sub",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lower the baseline of the box to the proper position for subscripts of the parent&#39;s box. (This value has no effect on the font size of the element&#39;s text.)</p>\n"},id:2452}),
s[2453]=a({parent:s[2447],name:"super",flags:8,mods:32768,cat:32,meta:{desc:"<p>Raise the baseline of the box to the proper position for superscripts of the parent&#39;s box. (This value has no effect on the font size of the element&#39;s text.)</p>\n"},id:2453}),
s[2454]=a({parent:s[2447],name:"text-bottom",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the bottom of the box with the after-edge of the parent element&#39;s font.</p>\n"},id:2454}),
s[2455]=a({parent:s[2447],name:"text-top",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the top of the box with the before-edge of the parent element&#39;s font.</p>\n"},id:2455}),
s[2456]=a({parent:s[2447],name:"top",flags:8,mods:32768,cat:32,meta:{desc:"<p>Align the before edge of the extended inline box with the before-edge of the line box.</p>\n"},id:2456}),
s[2457]=a({parent:s[1968],name:"va",flags:4,mods:32768,cat:2,meta:{},proxy:s[2447],id:2457}),
s[2458]=a({parent:s[1968],name:"cursor",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows control over cursor appearance in an element</p>\n"},id:2458}),
s[2459]=a({parent:s[2458],name:"alias",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.</p>\n"},id:2459}),
s[2460]=a({parent:s[2458],name:"all-scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.</p>\n"},id:2460}),
s[2461]=a({parent:s[2458],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA determines the cursor to display based on the current context.</p>\n"},id:2461}),
s[2462]=a({parent:s[2458],name:"cell",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.</p>\n"},id:2462}),
s[2463]=a({parent:s[2458],name:"col-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.</p>\n"},id:2463}),
s[2464]=a({parent:s[2458],name:"context-menu",flags:8,mods:32768,cat:32,meta:{desc:"<p>A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.</p>\n"},id:2464}),
s[2465]=a({parent:s[2458],name:"copy",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.</p>\n"},id:2465}),
s[2466]=a({parent:s[2458],name:"crosshair",flags:8,mods:32768,cat:32,meta:{desc:"<p>A simple crosshair (e.g., short line segments resembling a &#39;+&#39; sign). Often used to indicate a two dimensional bitmap selection mode.</p>\n"},id:2466}),
s[2467]=a({parent:s[2458],name:"default",flags:8,mods:32768,cat:32,meta:{desc:"<p>The platform-dependent default cursor. Often rendered as an arrow.</p>\n"},id:2467}),
s[2468]=a({parent:s[2458],name:"e-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that east edge is to be moved.</p>\n"},id:2468}),
s[2469]=a({parent:s[2458],name:"ew-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a bidirectional east-west resize cursor.</p>\n"},id:2469}),
s[2470]=a({parent:s[2458],name:"grab",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be grabbed.</p>\n"},id:2470}),
s[2471]=a({parent:s[2458],name:"grabbing",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something is being grabbed.</p>\n"},id:2471}),
s[2472]=a({parent:s[2458],name:"help",flags:8,mods:32768,cat:32,meta:{desc:"<p>Help is available for the object under the cursor. Often rendered as a question mark or a balloon.</p>\n"},id:2472}),
s[2473]=a({parent:s[2458],name:"move",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates something is to be moved.</p>\n"},id:2473}),
s[2474]=a({parent:s[2458],name:"-moz-grab",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be grabbed.</p>\n"},id:2474}),
s[2475]=a({parent:s[2458],name:"-moz-grabbing",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something is being grabbed.</p>\n"},id:2475}),
s[2476]=a({parent:s[2458],name:"-moz-zoom-in",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) in.</p>\n"},id:2476}),
s[2477]=a({parent:s[2458],name:"-moz-zoom-out",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) out.</p>\n"},id:2477}),
s[2478]=a({parent:s[2458],name:"ne-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that movement starts from north-east corner.</p>\n"},id:2478}),
s[2479]=a({parent:s[2458],name:"nesw-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a bidirectional north-east/south-west cursor.</p>\n"},id:2479}),
s[2480]=a({parent:s[2458],name:"no-drop",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.</p>\n"},id:2480}),
s[2481]=a({parent:s[2458],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No cursor is rendered for the element.</p>\n"},id:2481}),
s[2482]=a({parent:s[2458],name:"not-allowed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.</p>\n"},id:2482}),
s[2483]=a({parent:s[2458],name:"n-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that north edge is to be moved.</p>\n"},id:2483}),
s[2484]=a({parent:s[2458],name:"ns-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a bidirectional north-south cursor.</p>\n"},id:2484}),
s[2485]=a({parent:s[2458],name:"nw-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that movement starts from north-west corner.</p>\n"},id:2485}),
s[2486]=a({parent:s[2458],name:"nwse-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a bidirectional north-west/south-east cursor.</p>\n"},id:2486}),
s[2487]=a({parent:s[2458],name:"pointer",flags:8,mods:32768,cat:32,meta:{desc:"<p>The cursor is a pointer that indicates a link.</p>\n"},id:2487}),
s[2488]=a({parent:s[2458],name:"progress",flags:8,mods:32768,cat:32,meta:{desc:"<p>A progress indicator. The program is performing some processing, but is different from &#39;wait&#39; in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.</p>\n"},id:2488}),
s[2489]=a({parent:s[2458],name:"row-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.</p>\n"},id:2489}),
s[2490]=a({parent:s[2458],name:"se-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that movement starts from south-east corner.</p>\n"},id:2490}),
s[2491]=a({parent:s[2458],name:"s-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that south edge is to be moved.</p>\n"},id:2491}),
s[2492]=a({parent:s[2458],name:"sw-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that movement starts from south-west corner.</p>\n"},id:2492}),
s[2493]=a({parent:s[2458],name:"text",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates text that may be selected. Often rendered as a vertical I-beam.</p>\n"},id:2493}),
s[2494]=a({parent:s[2458],name:"vertical-text",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.</p>\n"},id:2494}),
s[2495]=a({parent:s[2458],name:"wait",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.</p>\n"},id:2495}),
s[2496]=a({parent:s[2458],name:"-webkit-grab",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be grabbed.</p>\n"},id:2496}),
s[2497]=a({parent:s[2458],name:"-webkit-grabbing",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something is being grabbed.</p>\n"},id:2497}),
s[2498]=a({parent:s[2458],name:"-webkit-zoom-in",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) in.</p>\n"},id:2498}),
s[2499]=a({parent:s[2458],name:"-webkit-zoom-out",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) out.</p>\n"},id:2499}),
s[2500]=a({parent:s[2458],name:"w-resize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that west edge is to be moved.</p>\n"},id:2500}),
s[2501]=a({parent:s[2458],name:"zoom-in",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) in.</p>\n"},id:2501}),
s[2502]=a({parent:s[2458],name:"zoom-out",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that something can be zoomed (magnified) out.</p>\n"},id:2502}),
s[2503]=a({parent:s[1968],name:"margin-left",flags:4,mods:0,cat:2,meta:{alias:"ml",desc:"<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n"},id:2503}),
s[2504]=a({parent:s[1968],name:"ml",flags:4,mods:32768,cat:2,meta:{},proxy:s[2503],id:2504}),
s[2505]=a({parent:s[1968],name:"border-radius",flags:4,mods:0,cat:2,meta:{alias:"rd",desc:"<p>Defines the radii of the outer border edge.</p>\n"},id:2505}),
s[2506]=a({parent:s[1968],name:"rd",flags:4,mods:32768,cat:2,meta:{},proxy:s[2505],id:2506}),
s[2507]=a({parent:s[1968],name:"margin-bottom",flags:4,mods:0,cat:2,meta:{alias:"mb",desc:"<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n"},id:2507}),
s[2508]=a({parent:s[1968],name:"mb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2507],id:2508}),
s[2509]=a({parent:s[1968],name:"margin-right",flags:4,mods:0,cat:2,meta:{alias:"mr",desc:"<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n"},id:2509}),
s[2510]=a({parent:s[1968],name:"mr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2509],id:2510}),
s[2511]=a({parent:s[1968],name:"right",flags:4,mods:0,cat:2,meta:{alias:"r",desc:"<p>Specifies how far an absolutely positioned box&#39;s right margin edge is offset to the left of the right edge of the box&#39;s &#39;containing block&#39;.</p>\n"},id:2511}),
s[2512]=a({parent:s[2511],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well</p>\n"},id:2512}),
s[2513]=a({parent:s[1968],name:"r",flags:4,mods:32768,cat:2,meta:{},proxy:s[2511],id:2513}),
s[2514]=a({parent:s[1968],name:"padding-left",flags:4,mods:0,cat:2,meta:{alias:"pl",desc:"<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n"},id:2514}),
s[2515]=a({parent:s[1968],name:"pl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2514],id:2515}),
s[2516]=a({parent:s[1968],name:"padding-top",flags:4,mods:0,cat:2,meta:{alias:"pt",desc:"<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n"},id:2516}),
s[2517]=a({parent:s[1968],name:"pt",flags:4,mods:32768,cat:2,meta:{},proxy:s[2516],id:2517}),
s[2518]=a({parent:s[1968],name:"max-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows authors to constrain content width to a certain range.</p>\n"},id:2518}),
s[2519]=a({parent:s[2518],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No limit on the width of the box.</p>\n"},id:2519}),
s[2520]=a({parent:s[2518],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2520}),
s[2521]=a({parent:s[2518],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2521}),
s[2522]=a({parent:s[2518],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2522}),
s[2523]=a({parent:s[1968],name:"bottom",flags:4,mods:0,cat:2,meta:{alias:"b",desc:"<p>Specifies how far an absolutely positioned box&#39;s bottom margin edge is offset above the bottom edge of the box&#39;s &#39;containing block&#39;.</p>\n"},id:2523}),
s[2524]=a({parent:s[2523],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well</p>\n"},id:2524}),
s[2525]=a({parent:s[1968],name:"b",flags:4,mods:32768,cat:2,meta:{},proxy:s[2523],id:2525}),
s[2526]=a({parent:s[1968],name:"content",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines which page-based occurrence of a given element is applied to a counter or string value.</p>\n"},id:2526}),
s[2527]=a({parent:s[2526],name:"attr",flags:8192,mods:32768,cat:32,meta:{desc:"<p>The attr(n) function returns as a string the value of attribute n for the subject of the selector.</p>\n"},id:2527}),
s[2528]=a({parent:s[2526],name:"counter",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Counters are denoted by identifiers (see the &#39;counter-increment&#39; and &#39;counter-reset&#39; properties).</p>\n"},id:2528}),
s[2529]=a({parent:s[2526],name:"icon",flags:8,mods:32768,cat:32,meta:{desc:"<p>The (pseudo-)element is replaced in its entirety by the resource referenced by its &#39;icon&#39; property, and treated as a replaced element.</p>\n"},id:2529}),
s[2530]=a({parent:s[2526],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content.</p>\n"},id:2530}),
s[2531]=a({parent:s[2526],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>See <a href=\"http://www.w3.org/TR/css3-content/#content\">http://www.w3.org/TR/css3-content/#content</a> for computation rules.</p>\n"},id:2531}),
s[2532]=a({parent:s[1968],name:"box-shadow",flags:4,mods:0,cat:2,meta:{alias:"shadow",desc:"<p>Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional &#39;inset&#39; keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.</p>\n"},id:2532}),
s[2533]=a({parent:s[2532],name:"inset",flags:8,mods:32768,cat:32,meta:{desc:"<p>Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it).</p>\n"},id:2533}),
s[2534]=a({parent:s[2532],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No shadow.</p>\n"},id:2534}),
s[2535]=a({parent:s[1968],name:"shadow",flags:4,mods:32768,cat:2,meta:{},proxy:s[2532],id:2535}),
s[2536]=a({parent:s[1968],name:"background-image",flags:4,mods:0,cat:2,meta:{alias:"bgi",desc:"<p>Sets the background image(s) of an element.</p>\n"},id:2536}),
s[2537]=a({parent:s[2536],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Counts as an image layer but draws nothing.</p>\n"},id:2537}),
s[2538]=a({parent:s[1968],name:"bgi",flags:4,mods:32768,cat:2,meta:{},proxy:s[2536],id:2538}),
s[2539]=a({parent:s[1968],name:"padding-right",flags:4,mods:0,cat:2,meta:{alias:"pr",desc:"<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n"},id:2539}),
s[2540]=a({parent:s[1968],name:"pr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2539],id:2540}),
s[2541]=a({parent:s[1968],name:"white-space",flags:4,mods:0,cat:2,meta:{alias:"ws",desc:"<p>Shorthand property for the &#39;white-space-collapsing&#39; and &#39;text-wrap&#39; properties.</p>\n"},id:2541}),
s[2542]=a({parent:s[2541],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;white-space-collapsing&#39; to &#39;collapse&#39; and &#39;text-wrap&#39; to &#39;normal&#39;.</p>\n"},id:2542}),
s[2543]=a({parent:s[2541],name:"nowrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;white-space-collapsing&#39; to &#39;collapse&#39; and &#39;text-wrap&#39; to &#39;none&#39;.</p>\n"},id:2543}),
s[2544]=a({parent:s[2541],name:"pre",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;white-space-collapsing&#39; to &#39;preserve&#39; and &#39;text-wrap&#39; to &#39;none&#39;.</p>\n"},id:2544}),
s[2545]=a({parent:s[2541],name:"pre-line",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;white-space-collapsing&#39; to &#39;preserve-breaks&#39; and &#39;text-wrap&#39; to &#39;normal&#39;.</p>\n"},id:2545}),
s[2546]=a({parent:s[2541],name:"pre-wrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;white-space-collapsing&#39; to &#39;preserve&#39; and &#39;text-wrap&#39; to &#39;normal&#39;.</p>\n"},id:2546}),
s[2547]=a({parent:s[1968],name:"ws",flags:4,mods:32768,cat:2,meta:{},proxy:s[2541],id:2547}),
s[2548]=a({parent:s[1968],name:"padding-bottom",flags:4,mods:0,cat:2,meta:{alias:"pb",desc:"<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n"},id:2548}),
s[2549]=a({parent:s[1968],name:"pb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2548],id:2549}),
s[2550]=a({parent:s[1968],name:"min-height",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows authors to constrain content height to a certain range.</p>\n"},id:2550}),
s[2551]=a({parent:s[2550],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2551}),
s[2552]=a({parent:s[2550],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2552}),
s[2553]=a({parent:s[2550],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2553}),
s[2554]=a({parent:s[1968],name:"transform",flags:4,mods:0,cat:2,meta:{desc:"<p>A two-dimensional transformation is applied to an element through the &#39;transform&#39; property. This property contains a list of transform functions similar to those allowed by SVG.</p>\n"},id:2554}),
s[2555]=a({parent:s[2554],name:"matrix",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]</p>\n"},id:2555}),
s[2556]=a({parent:s[2554],name:"matrix3d",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.</p>\n"},id:2556}),
s[2557]=a({parent:s[2554],name:"perspective",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a perspective projection matrix.</p>\n"},id:2557}),
s[2558]=a({parent:s[2554],name:"rotate",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.</p>\n"},id:2558}),
s[2559]=a({parent:s[2554],name:"rotate3d",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.</p>\n"},id:2559}),
s[2560]=a({parent:s[2554],name:"scale",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.</p>\n"},id:2560}),
s[2561]=a({parent:s[2554],name:"scale3d",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.</p>\n"},id:2561}),
s[2562]=a({parent:s[2554],name:"scaleX",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.</p>\n"},id:2562}),
s[2563]=a({parent:s[2554],name:"scaleY",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.</p>\n"},id:2563}),
s[2564]=a({parent:s[2554],name:"scaleZ",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.</p>\n"},id:2564}),
s[2565]=a({parent:s[2554],name:"skew",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).</p>\n"},id:2565}),
s[2566]=a({parent:s[2554],name:"skewX",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a skew transformation along the X axis by the given angle.</p>\n"},id:2566}),
s[2567]=a({parent:s[2554],name:"skewY",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a skew transformation along the Y axis by the given angle.</p>\n"},id:2567}),
s[2568]=a({parent:s[2554],name:"translate",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.</p>\n"},id:2568}),
s[2569]=a({parent:s[2554],name:"translate3d",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.</p>\n"},id:2569}),
s[2570]=a({parent:s[2554],name:"translateX",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a translation by the given amount in the X direction.</p>\n"},id:2570}),
s[2571]=a({parent:s[2554],name:"translateY",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a translation by the given amount in the Y direction.</p>\n"},id:2571}),
s[2572]=a({parent:s[2554],name:"translateZ",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.</p>\n"},id:2572}),
s[2573]=a({parent:s[1968],name:"border-bottom",flags:4,mods:0,cat:2,meta:{alias:"bdb",desc:"<p>Shorthand property for setting border width, style and color.</p>\n"},id:2573}),
s[2574]=a({parent:s[1968],name:"bdb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2573],id:2574}),
s[2575]=a({parent:s[1968],name:"visibility",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the โdisplayโ property to โnoneโ to suppress box generation altogether).</p>\n"},id:2575}),
s[2576]=a({parent:s[2575],name:"collapse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Table-specific. If used on elements other than rows, row groups, columns, or column groups, &#39;collapse&#39; has the same meaning as &#39;hidden&#39;.</p>\n"},id:2576}),
s[2577]=a({parent:s[2575],name:"hidden",flags:8,mods:32768,cat:32,meta:{desc:"<p>The generated box is invisible (fully transparent, nothing is drawn), but still affects layout.</p>\n"},id:2577}),
s[2578]=a({parent:s[2575],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>The generated box is visible.</p>\n"},id:2578}),
s[2579]=a({parent:s[1968],name:"background-position",flags:4,mods:0,cat:2,meta:{alias:"bgp",desc:"<p>Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.</p>\n"},id:2579}),
s[2580]=a({parent:s[1968],name:"bgp",flags:4,mods:32768,cat:2,meta:{},proxy:s[2579],id:2580}),
s[2581]=a({parent:s[1968],name:"border-top",flags:4,mods:0,cat:2,meta:{alias:"bdt",desc:"<p>Shorthand property for setting border width, style and color</p>\n"},id:2581}),
s[2582]=a({parent:s[1968],name:"bdt",flags:4,mods:32768,cat:2,meta:{},proxy:s[2581],id:2582}),
s[2583]=a({parent:s[1968],name:"min-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows authors to constrain content width to a certain range.</p>\n"},id:2583}),
s[2584]=a({parent:s[2583],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2584}),
s[2585]=a({parent:s[2583],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2585}),
s[2586]=a({parent:s[2583],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2586}),
s[2587]=a({parent:s[1968],name:"outline",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand property for &#39;outline-style&#39;, &#39;outline-width&#39;, and &#39;outline-color&#39;.</p>\n"},id:2587}),
s[2588]=a({parent:s[2587],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Permits the user agent to render a custom outline style, typically the default platform style.</p>\n"},id:2588}),
s[2589]=a({parent:s[2587],name:"invert",flags:8,mods:32768,cat:32,meta:{desc:"<p>Performs a color inversion on the pixels on the screen.</p>\n"},id:2589}),
s[2590]=a({parent:s[1968],name:"border-color",flags:4,mods:0,cat:2,meta:{alias:"bc",desc:"<p>The color of the border around all four edges of an element.</p>\n"},id:2590}),
s[2591]=a({parent:s[1968],name:"bc",flags:4,mods:32768,cat:2,meta:{},proxy:s[2590],id:2591}),
s[2592]=a({parent:s[1968],name:"background-repeat",flags:4,mods:0,cat:2,meta:{alias:"bgr",desc:"<p>Specifies how background images are tiled after they have been sized and positioned.</p>\n"},id:2592}),
s[2593]=a({parent:s[1968],name:"bgr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2592],id:2593}),
s[2594]=a({parent:s[1968],name:"text-transform",flags:4,mods:0,cat:2,meta:{alias:"tt",desc:"<p>Controls capitalization effects of an elementโs text.</p>\n"},id:2594}),
s[2595]=a({parent:s[2594],name:"capitalize",flags:8,mods:32768,cat:32,meta:{desc:"<p>Puts the first typographic letter unit of each word in titlecase.</p>\n"},id:2595}),
s[2596]=a({parent:s[2594],name:"lowercase",flags:8,mods:32768,cat:32,meta:{desc:"<p>Puts all letters in lowercase.</p>\n"},id:2596}),
s[2597]=a({parent:s[2594],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No effects.</p>\n"},id:2597}),
s[2598]=a({parent:s[2594],name:"uppercase",flags:8,mods:32768,cat:32,meta:{desc:"<p>Puts all letters in uppercase.</p>\n"},id:2598}),
s[2599]=a({parent:s[1968],name:"tt",flags:4,mods:32768,cat:2,meta:{},proxy:s[2594],id:2599}),
s[2600]=a({parent:s[1968],name:"background-size",flags:4,mods:0,cat:2,meta:{alias:"bgs",desc:"<p>Specifies the size of the background images.</p>\n"},id:2600}),
s[2601]=a({parent:s[2600],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Resolved by using the imageโs intrinsic ratio and the size of the other dimension, or failing that, using the imageโs intrinsic size, or failing that, treating it as 100%.</p>\n"},id:2601}),
s[2602]=a({parent:s[2600],name:"contain",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.</p>\n"},id:2602}),
s[2603]=a({parent:s[2600],name:"cover",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.</p>\n"},id:2603}),
s[2604]=a({parent:s[1968],name:"bgs",flags:4,mods:32768,cat:2,meta:{},proxy:s[2600],id:2604}),
s[2605]=a({parent:s[1968],name:"clear",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates which sides of an element&#39;s box(es) may not be adjacent to an earlier floating box. The &#39;clear&#39; property does not consider floats inside the element itself or in other block formatting contexts.</p>\n"},id:2605}),
s[2606]=a({parent:s[2605],name:"both",flags:8,mods:32768,cat:32,meta:{desc:"<p>The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document.</p>\n"},id:2606}),
s[2607]=a({parent:s[2605],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document.</p>\n"},id:2607}),
s[2608]=a({parent:s[2605],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No constraint on the box&#39;s position with respect to floats.</p>\n"},id:2608}),
s[2609]=a({parent:s[2605],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document.</p>\n"},id:2609}),
s[2610]=a({parent:s[1968],name:"max-height",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows authors to constrain content height to a certain range.</p>\n"},id:2610}),
s[2611]=a({parent:s[2610],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No limit on the height of the box.</p>\n"},id:2611}),
s[2612]=a({parent:s[2610],name:"fit-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.</p>\n"},id:2612}),
s[2613]=a({parent:s[2610],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the max-content inline size or max-content block size, as appropriate to the writing mode.</p>\n"},id:2613}),
s[2614]=a({parent:s[2610],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the min-content inline size or min-content block size, as appropriate to the writing mode.</p>\n"},id:2614}),
s[2615]=a({parent:s[1968],name:"list-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand for setting &#39;list-style-type&#39;, &#39;list-style-position&#39; and &#39;list-style-image&#39;</p>\n"},id:2615}),
s[2616]=a({parent:s[2615],name:"circle",flags:8,mods:32768,cat:32,meta:{desc:"<p>A hollow circle.</p>\n"},id:2616}),
s[2617]=a({parent:s[2615],name:"disc",flags:8,mods:32768,cat:32,meta:{desc:"<p>A filled circle.</p>\n"},id:2617}),
s[2618]=a({parent:s[2615],name:"inside",flags:8,mods:32768,cat:32,meta:{desc:"<p>The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below.</p>\n"},id:2618}),
s[2619]=a({parent:s[2615],name:"outside",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element&#39;s content flows.</p>\n"},id:2619}),
s[2620]=a({parent:s[2615],name:"square",flags:8,mods:32768,cat:32,meta:{desc:"<p>A filled square.</p>\n"},id:2620}),
s[2621]=a({parent:s[2615],name:"symbols",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Allows a counter style to be defined inline.</p>\n"},id:2621}),
s[2622]=a({parent:s[1968],name:"font-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.</p>\n"},id:2622}),
s[2623]=a({parent:s[2622],name:"italic",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects a font that is labeled as an &#39;italic&#39; face, or an &#39;oblique&#39; face if one is not</p>\n"},id:2623}),
s[2624]=a({parent:s[2622],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects a face that is classified as &#39;normal&#39;.</p>\n"},id:2624}),
s[2625]=a({parent:s[2622],name:"oblique",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects a font that is labeled as an &#39;oblique&#39; face, or an &#39;italic&#39; face if one is not.</p>\n"},id:2625}),
s[2626]=a({parent:s[1968],name:"font",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand property for setting &#39;font-style&#39;, &#39;font-variant&#39;, &#39;font-weight&#39;, &#39;font-size&#39;, &#39;line-height&#39;, and &#39;font-family&#39;, at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.</p>\n"},id:2626}),
s[2627]=a({parent:s[2626],name:"100",flags:8,mods:32768,cat:32,meta:{desc:"<p>Thin</p>\n"},id:2627}),
s[2628]=a({parent:s[2626],name:"200",flags:8,mods:32768,cat:32,meta:{desc:"<p>Extra Light (Ultra Light)</p>\n"},id:2628}),
s[2629]=a({parent:s[2626],name:"300",flags:8,mods:32768,cat:32,meta:{desc:"<p>Light</p>\n"},id:2629}),
s[2630]=a({parent:s[2626],name:"400",flags:8,mods:32768,cat:32,meta:{desc:"<p>Normal</p>\n"},id:2630}),
s[2631]=a({parent:s[2626],name:"500",flags:8,mods:32768,cat:32,meta:{desc:"<p>Medium</p>\n"},id:2631}),
s[2632]=a({parent:s[2626],name:"600",flags:8,mods:32768,cat:32,meta:{desc:"<p>Semi Bold (Demi Bold)</p>\n"},id:2632}),
s[2633]=a({parent:s[2626],name:"700",flags:8,mods:32768,cat:32,meta:{desc:"<p>Bold</p>\n"},id:2633}),
s[2634]=a({parent:s[2626],name:"800",flags:8,mods:32768,cat:32,meta:{desc:"<p>Extra Bold (Ultra Bold)</p>\n"},id:2634}),
s[2635]=a({parent:s[2626],name:"900",flags:8,mods:32768,cat:32,meta:{desc:"<p>Black (Heavy)</p>\n"},id:2635}),
s[2636]=a({parent:s[2626],name:"bold",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as 700</p>\n"},id:2636}),
s[2637]=a({parent:s[2626],name:"bolder",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies the weight of the face bolder than the inherited value.</p>\n"},id:2637}),
s[2638]=a({parent:s[2626],name:"caption",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used for captioned controls (e.g., buttons, drop-downs, etc.).</p>\n"},id:2638}),
s[2639]=a({parent:s[2626],name:"icon",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used to label icons.</p>\n"},id:2639}),
s[2640]=a({parent:s[2626],name:"italic",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects a font that is labeled &#39;italic&#39;, or, if that is not available, one labeled &#39;oblique&#39;.</p>\n"},id:2640}),
s[2641]=a({parent:s[2626],name:"lighter",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies the weight of the face lighter than the inherited value.</p>\n"},id:2641}),
s[2642]=a({parent:s[2626],name:"menu",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used in menus (e.g., dropdown menus and menu lists).</p>\n"},id:2642}),
s[2643]=a({parent:s[2626],name:"message-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used in dialog boxes.</p>\n"},id:2643}),
s[2644]=a({parent:s[2626],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies a face that is not labeled as a small-caps font.</p>\n"},id:2644}),
s[2645]=a({parent:s[2626],name:"oblique",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects a font that is labeled &#39;oblique&#39;.</p>\n"},id:2645}),
s[2646]=a({parent:s[2626],name:"small-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font.</p>\n"},id:2646}),
s[2647]=a({parent:s[2626],name:"small-caption",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used for labeling small controls.</p>\n"},id:2647}),
s[2648]=a({parent:s[2626],name:"status-bar",flags:8,mods:32768,cat:32,meta:{desc:"<p>The font used in window status bars.</p>\n"},id:2648}),
s[2649]=a({parent:s[1968],name:"border-left",flags:4,mods:0,cat:2,meta:{alias:"bdl",desc:"<p>Shorthand property for setting border width, style and color</p>\n"},id:2649}),
s[2650]=a({parent:s[1968],name:"bdl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2649],id:2650}),
s[2651]=a({parent:s[1968],name:"border-right",flags:4,mods:0,cat:2,meta:{alias:"bdr",desc:"<p>Shorthand property for setting border width, style and color</p>\n"},id:2651}),
s[2652]=a({parent:s[1968],name:"bdr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2651],id:2652}),
s[2653]=a({parent:s[1968],name:"text-overflow",flags:4,mods:0,cat:2,meta:{desc:"<p>Text can overflow for example when it is prevented from wrapping.</p>\n"},id:2653}),
s[2654]=a({parent:s[2653],name:"clip",flags:8,mods:32768,cat:32,meta:{desc:"<p>Clip inline content that overflows. Characters may be only partially rendered.</p>\n"},id:2654}),
s[2655]=a({parent:s[2653],name:"ellipsis",flags:8,mods:32768,cat:32,meta:{desc:"<p>Render an ellipsis character (U+2026) to represent clipped inline content.</p>\n"},id:2655}),
s[2656]=a({parent:s[1968],name:"border-width",flags:4,mods:0,cat:2,meta:{alias:"bw",desc:"<p>Shorthand that sets the four &#39;border-*-width&#39; properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.</p>\n"},id:2656}),
s[2657]=a({parent:s[1968],name:"bw",flags:4,mods:32768,cat:2,meta:{},proxy:s[2656],id:2657}),
s[2658]=a({parent:s[1968],name:"justify-content",flags:4,mods:0,cat:2,meta:{alias:"jc",desc:"<p>Aligns flex items along the main axis of the current line of the flex container.</p>\n"},id:2658}),
s[2659]=a({parent:s[2658],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex items are packed toward the center of the line.</p>\n"},id:2659}),
s[2660]=a({parent:s[2658],name:"start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the start edge of the alignment container in the main axis.</p>\n"},id:2660}),
s[2661]=a({parent:s[2658],name:"end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the end edge of the alignment container in the main axis.</p>\n"},id:2661}),
s[2662]=a({parent:s[2658],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the left edge of the alignment container in the main axis.</p>\n"},id:2662}),
s[2663]=a({parent:s[2658],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the right edge of the alignment container in the main axis.</p>\n"},id:2663}),
s[2664]=a({parent:s[2658],name:"safe",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start.</p>\n"},id:2664}),
s[2665]=a({parent:s[2658],name:"unsafe",flags:8,mods:32768,cat:32,meta:{desc:"<p>Regardless of the relative sizes of the item and alignment container, the given alignment value is honored.</p>\n"},id:2665}),
s[2666]=a({parent:s[2658],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container.</p>\n"},id:2666}),
s[2667]=a({parent:s[2658],name:"space-evenly",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are evenly distributed within the alignment container along the main axis.</p>\n"},id:2667}),
s[2668]=a({parent:s[2658],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex items are packed toward the end of the line.</p>\n"},id:2668}),
s[2669]=a({parent:s[2658],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex items are packed toward the start of the line.</p>\n"},id:2669}),
s[2670]=a({parent:s[2658],name:"space-around",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex items are evenly distributed in the line, with half-size spaces on either end.</p>\n"},id:2670}),
s[2671]=a({parent:s[2658],name:"space-between",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flex items are evenly distributed in the line.</p>\n"},id:2671}),
s[2672]=a({parent:s[2658],name:"baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies participation in first-baseline alignment.</p>\n"},id:2672}),
s[2673]=a({parent:s[2658],name:"first baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies participation in first-baseline alignment.</p>\n"},id:2673}),
s[2674]=a({parent:s[2658],name:"last baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies participation in last-baseline alignment.</p>\n"},id:2674}),
s[2675]=a({parent:s[1968],name:"jc",flags:4,mods:32768,cat:2,meta:{},proxy:s[2658],id:2675}),
s[2676]=a({parent:s[1968],name:"align-items",flags:4,mods:0,cat:2,meta:{alias:"ai",desc:"<p>Aligns flex items along the cross axis of the current line of the flex container.</p>\n"},id:2676}),
s[2677]=a({parent:s[2676],name:"baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the flex itemโs inline axis is the same as the cross axis, this value is identical to &#39;flex-start&#39;. Otherwise, it participates in baseline alignment.</p>\n"},id:2677}),
s[2678]=a({parent:s[2676],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex itemโs margin box is centered in the cross axis within the line.</p>\n"},id:2678}),
s[2679]=a({parent:s[2676],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.</p>\n"},id:2679}),
s[2680]=a({parent:s[2676],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.</p>\n"},id:2680}),
s[2681]=a({parent:s[2676],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.</p>\n"},id:2681}),
s[2682]=a({parent:s[1968],name:"ai",flags:4,mods:32768,cat:2,meta:{},proxy:s[2676],id:2682}),
s[2683]=a({parent:s[1968],name:"overflow-y",flags:4,mods:0,cat:2,meta:{alias:"ofy",desc:"<p>Specifies the handling of overflow in the vertical direction.</p>\n"},id:2683}),
s[2684]=a({parent:s[2683],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The behavior of the &#39;auto&#39; value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.</p>\n"},id:2684}),
s[2685]=a({parent:s[2683],name:"hidden",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.</p>\n"},id:2685}),
s[2686]=a({parent:s[2683],name:"scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.</p>\n"},id:2686}),
s[2687]=a({parent:s[2683],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is not clipped, i.e., it may be rendered outside the content box.</p>\n"},id:2687}),
s[2688]=a({parent:s[1968],name:"ofy",flags:4,mods:32768,cat:2,meta:{},proxy:s[2683],id:2688}),
s[2689]=a({parent:s[1968],name:"pointer-events",flags:4,mods:0,cat:2,meta:{alias:"pe",desc:"<p>Specifies under what circumstances a given element can be the target element for a pointer event.</p>\n"},id:2689}),
s[2690]=a({parent:s[2689],name:"all",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element.</p>\n"},id:2690}),
s[2691]=a({parent:s[2689],name:"fill",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events whenever the pointer is over the interior of the element.</p>\n"},id:2691}),
s[2692]=a({parent:s[2689],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element does not receive pointer events.</p>\n"},id:2692}),
s[2693]=a({parent:s[2689],name:"painted",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events when the pointer is over a &quot;painted&quot; area.</p>\n"},id:2693}),
s[2694]=a({parent:s[2689],name:"stroke",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element.</p>\n"},id:2694}),
s[2695]=a({parent:s[2689],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events when the โvisibilityโ property is set to visible and the pointer is over either the interior or the perimete of the element.</p>\n"},id:2695}),
s[2696]=a({parent:s[2689],name:"visibleFill",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events when the โvisibilityโ property is set to visible and when the pointer is over the interior of the element.</p>\n"},id:2696}),
s[2697]=a({parent:s[2689],name:"visiblePainted",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events when the โvisibilityโ property is set to visible and when the pointer is over a โpaintedโ area.</p>\n"},id:2697}),
s[2698]=a({parent:s[2689],name:"visibleStroke",flags:8,mods:32768,cat:32,meta:{desc:"<p>The given element can be the target element for pointer events when the โvisibilityโ property is set to visible and when the pointer is over the perimeter of the element.</p>\n"},id:2698}),
s[2699]=a({parent:s[1968],name:"pe",flags:4,mods:32768,cat:2,meta:{},proxy:s[2689],id:2699}),
s[2700]=a({parent:s[1968],name:"border-style",flags:4,mods:0,cat:2,meta:{alias:"bs",desc:"<p>The style of the border around edges of an element.</p>\n"},id:2700}),
s[2701]=a({parent:s[1968],name:"bs",flags:4,mods:32768,cat:2,meta:{},proxy:s[2700],id:2701}),
s[2702]=a({parent:s[1968],name:"letter-spacing",flags:4,mods:0,cat:2,meta:{alias:"ls",desc:"<p>Specifies the minimum, maximum, and optimal spacing between grapheme clusters.</p>\n"},id:2702}),
s[2703]=a({parent:s[2702],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>The spacing is the normal spacing for the current font. It is typically zero-length.</p>\n"},id:2703}),
s[2704]=a({parent:s[1968],name:"ls",flags:4,mods:32768,cat:2,meta:{},proxy:s[2702],id:2704}),
s[2705]=a({parent:s[1968],name:"animation",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand property combines six of the animation properties into a single property.</p>\n"},id:2705}),
s[2706]=a({parent:s[2705],name:"alternate",flags:8,mods:32768,cat:32,meta:{desc:"<p>The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.</p>\n"},id:2706}),
s[2707]=a({parent:s[2705],name:"alternate-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.</p>\n"},id:2707}),
s[2708]=a({parent:s[2705],name:"backwards",flags:8,mods:32768,cat:32,meta:{desc:"<p>The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by &#39;animation-delay&#39;.</p>\n"},id:2708}),
s[2709]=a({parent:s[2705],name:"both",flags:8,mods:32768,cat:32,meta:{desc:"<p>Both forwards and backwards fill modes are applied.</p>\n"},id:2709}),
s[2710]=a({parent:s[2705],name:"forwards",flags:8,mods:32768,cat:32,meta:{desc:"<p>The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.</p>\n"},id:2710}),
s[2711]=a({parent:s[2705],name:"infinite",flags:8,mods:32768,cat:32,meta:{desc:"<p>Causes the animation to repeat forever.</p>\n"},id:2711}),
s[2712]=a({parent:s[2705],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No animation is performed</p>\n"},id:2712}),
s[2713]=a({parent:s[2705],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Normal playback.</p>\n"},id:2713}),
s[2714]=a({parent:s[2705],name:"reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>All iterations of the animation are played in the reverse direction from the way they were specified.</p>\n"},id:2714}),
s[2715]=a({parent:s[1968],name:"overflow-x",flags:4,mods:0,cat:2,meta:{alias:"ofx",desc:"<p>Specifies the handling of overflow in the horizontal direction.</p>\n"},id:2715}),
s[2716]=a({parent:s[2715],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The behavior of the &#39;auto&#39; value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes.</p>\n"},id:2716}),
s[2717]=a({parent:s[2715],name:"hidden",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region.</p>\n"},id:2717}),
s[2718]=a({parent:s[2715],name:"scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped.</p>\n"},id:2718}),
s[2719]=a({parent:s[2715],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content is not clipped, i.e., it may be rendered outside the content box.</p>\n"},id:2719}),
s[2720]=a({parent:s[1968],name:"ofx",flags:4,mods:32768,cat:2,meta:{},proxy:s[2715],id:2720}),
s[2721]=a({parent:s[1968],name:"flex-direction",flags:4,mods:0,cat:2,meta:{alias:"fld",desc:"<p>Specifies how flex items are placed in the flex container, by setting the direction of the flex containerโs main axis.</p>\n"},id:2721}),
s[2722]=a({parent:s[2721],name:"column",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex containerโs main axis has the same orientation as the block axis of the current writing mode.</p>\n"},id:2722}),
s[2723]=a({parent:s[2721],name:"column-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;column&#39;, except the main-start and main-end directions are swapped.</p>\n"},id:2723}),
s[2724]=a({parent:s[2721],name:"row",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex containerโs main axis has the same orientation as the inline axis of the current writing mode.</p>\n"},id:2724}),
s[2725]=a({parent:s[2721],name:"row-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;row&#39;, except the main-start and main-end directions are swapped.</p>\n"},id:2725}),
s[2726]=a({parent:s[1968],name:"fld",flags:4,mods:32768,cat:2,meta:{},proxy:s[2721],id:2726}),
s[2727]=a({parent:s[1968],name:"word-wrap",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.</p>\n"},id:2727}),
s[2728]=a({parent:s[2727],name:"break-word",flags:8,mods:32768,cat:32,meta:{desc:"<p>An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line.</p>\n"},id:2728}),
s[2729]=a({parent:s[2727],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines may break only at allowed break points.</p>\n"},id:2729}),
s[2730]=a({parent:s[1968],name:"flex",flags:4,mods:0,cat:2,meta:{alias:"fl",desc:"<p>Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.</p>\n"},id:2730}),
s[2731]=a({parent:s[2730],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Retrieves the value of the main size property as the used &#39;flex-basis&#39;.</p>\n"},id:2731}),
s[2732]=a({parent:s[2730],name:"content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates automatic sizing, based on the flex itemโs content.</p>\n"},id:2732}),
s[2733]=a({parent:s[2730],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Expands to &#39;0 0 auto&#39;.</p>\n"},id:2733}),
s[2734]=a({parent:s[1968],name:"fl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2730],id:2734}),
s[2735]=a({parent:s[1968],name:"border-collapse",flags:4,mods:0,cat:2,meta:{desc:"<p>Selects a table&#39;s border model.</p>\n"},id:2735}),
s[2736]=a({parent:s[2735],name:"collapse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the collapsing borders model.</p>\n"},id:2736}),
s[2737]=a({parent:s[2735],name:"separate",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the separated borders border model.</p>\n"},id:2737}),
s[2738]=a({parent:s[1968],name:"zoom",flags:4,mods:0,cat:2,meta:{desc:"<p>Non-standard. Specifies the magnification scale of the object. See &#39;transform: scale()&#39; for a standards-based alternative.</p>\n"},id:2738}),
s[2739]=a({parent:s[1968],name:"list-style-type",flags:4,mods:0,cat:2,meta:{desc:"<p>Used to construct the default contents of a list itemโs marker</p>\n"},id:2739}),
s[2740]=a({parent:s[2739],name:"armenian",flags:8,mods:32768,cat:32,meta:{desc:"<p>Traditional uppercase Armenian numbering.</p>\n"},id:2740}),
s[2741]=a({parent:s[2739],name:"circle",flags:8,mods:32768,cat:32,meta:{desc:"<p>A hollow circle.</p>\n"},id:2741}),
s[2742]=a({parent:s[2739],name:"decimal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Western decimal numbers.</p>\n"},id:2742}),
s[2743]=a({parent:s[2739],name:"decimal-leading-zero",flags:8,mods:32768,cat:32,meta:{desc:"<p>Decimal numbers padded by initial zeros.</p>\n"},id:2743}),
s[2744]=a({parent:s[2739],name:"disc",flags:8,mods:32768,cat:32,meta:{desc:"<p>A filled circle.</p>\n"},id:2744}),
s[2745]=a({parent:s[2739],name:"georgian",flags:8,mods:32768,cat:32,meta:{desc:"<p>Traditional Georgian numbering.</p>\n"},id:2745}),
s[2746]=a({parent:s[2739],name:"lower-alpha",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lowercase ASCII letters.</p>\n"},id:2746}),
s[2747]=a({parent:s[2739],name:"lower-greek",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lowercase classical Greek.</p>\n"},id:2747}),
s[2748]=a({parent:s[2739],name:"lower-latin",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lowercase ASCII letters.</p>\n"},id:2748}),
s[2749]=a({parent:s[2739],name:"lower-roman",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lowercase ASCII Roman numerals.</p>\n"},id:2749}),
s[2750]=a({parent:s[2739],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No marker</p>\n"},id:2750}),
s[2751]=a({parent:s[2739],name:"square",flags:8,mods:32768,cat:32,meta:{desc:"<p>A filled square.</p>\n"},id:2751}),
s[2752]=a({parent:s[2739],name:"symbols",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Allows a counter style to be defined inline.</p>\n"},id:2752}),
s[2753]=a({parent:s[2739],name:"upper-alpha",flags:8,mods:32768,cat:32,meta:{desc:"<p>Uppercase ASCII letters.</p>\n"},id:2753}),
s[2754]=a({parent:s[2739],name:"upper-latin",flags:8,mods:32768,cat:32,meta:{desc:"<p>Uppercase ASCII letters.</p>\n"},id:2754}),
s[2755]=a({parent:s[2739],name:"upper-roman",flags:8,mods:32768,cat:32,meta:{desc:"<p>Uppercase ASCII Roman numerals.</p>\n"},id:2755}),
s[2756]=a({parent:s[1968],name:"border-bottom-left-radius",flags:4,mods:0,cat:2,meta:{alias:"rdbl",desc:"<p>Defines the radii of the bottom left outer border edge.</p>\n"},id:2756}),
s[2757]=a({parent:s[1968],name:"rdbl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2756],id:2757}),
s[2758]=a({parent:s[1968],name:"fill",flags:4,mods:0,cat:2,meta:{desc:"<p>Paints the interior of the given graphical element.</p>\n"},id:2758}),
s[2759]=a({parent:s[2758],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>A URL reference to a paint server element, which is an element that defines a paint server: โhatchโ, โlinearGradientโ, โmeshโ, โpatternโ, โradialGradientโ and โsolidcolorโ.</p>\n"},id:2759}),
s[2760]=a({parent:s[2758],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No paint is applied in this layer.</p>\n"},id:2760}),
s[2761]=a({parent:s[1968],name:"transform-origin",flags:4,mods:0,cat:2,meta:{alias:"origin",desc:"<p>Establishes the origin of transformation for an element.</p>\n"},id:2761}),
s[2762]=a({parent:s[1968],name:"origin",flags:4,mods:32768,cat:2,meta:{},proxy:s[2761],id:2762}),
s[2763]=a({parent:s[1968],name:"flex-wrap",flags:4,mods:0,cat:2,meta:{alias:"flw",desc:"<p>Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.</p>\n"},id:2763}),
s[2764]=a({parent:s[2763],name:"nowrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex container is single-line.</p>\n"},id:2764}),
s[2765]=a({parent:s[2763],name:"wrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flexbox is multi-line.</p>\n"},id:2765}),
s[2766]=a({parent:s[2763],name:"wrap-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;wrap&#39;, except the cross-start and cross-end directions are swapped.</p>\n"},id:2766}),
s[2767]=a({parent:s[1968],name:"flw",flags:4,mods:32768,cat:2,meta:{},proxy:s[2763],id:2767}),
s[2768]=a({parent:s[1968],name:"text-shadow",flags:4,mods:0,cat:2,meta:{alias:"ts",desc:"<p>Enables shadow effects to be applied to the text of the element.</p>\n"},id:2768}),
s[2769]=a({parent:s[2768],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No shadow.</p>\n"},id:2769}),
s[2770]=a({parent:s[1968],name:"ts",flags:4,mods:32768,cat:2,meta:{},proxy:s[2768],id:2770}),
s[2771]=a({parent:s[1968],name:"border-top-left-radius",flags:4,mods:0,cat:2,meta:{alias:"rdtl",desc:"<p>Defines the radii of the top left outer border edge.</p>\n"},id:2771}),
s[2772]=a({parent:s[1968],name:"rdtl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2771],id:2772}),
s[2773]=a({parent:s[1968],name:"user-select",flags:4,mods:0,cat:2,meta:{alias:"us",desc:"<p>Controls the appearance of selection.</p>\n"},id:2773}),
s[2774]=a({parent:s[2773],name:"all",flags:8,mods:32768,cat:32,meta:{desc:"<p>The content of the element must be selected atomically</p>\n"},id:2774}),
s[2775]=a({parent:s[2773],name:"contain",flags:8,mods:32768,cat:32,meta:{desc:"<p>UAs must not allow a selection which is started in this element to be extended outside of this element.</p>\n"},id:2775}),
s[2776]=a({parent:s[2773],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA must not allow selections to be started in this element.</p>\n"},id:2776}),
s[2777]=a({parent:s[2773],name:"text",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element imposes no constraint on the selection.</p>\n"},id:2777}),
s[2778]=a({parent:s[1968],name:"us",flags:4,mods:32768,cat:2,meta:{},proxy:s[2773],id:2778}),
s[2779]=a({parent:s[1968],name:"clip",flags:4,mods:0,cat:2,meta:{desc:"<p>Deprecated. Use the &#39;clip-path&#39; property when support allows. Defines the visible portion of an elementโs box.</p>\n"},id:2779}),
s[2780]=a({parent:s[2779],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element does not clip.</p>\n"},id:2780}),
s[2781]=a({parent:s[2779],name:"rect",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Specifies offsets from the edges of the border box.</p>\n"},id:2781}),
s[2782]=a({parent:s[1968],name:"border-bottom-right-radius",flags:4,mods:0,cat:2,meta:{alias:"rdbr",desc:"<p>Defines the radii of the bottom right outer border edge.</p>\n"},id:2782}),
s[2783]=a({parent:s[1968],name:"rdbr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2782],id:2783}),
s[2784]=a({parent:s[1968],name:"word-break",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies line break opportunities for non-CJK scripts.</p>\n"},id:2784}),
s[2785]=a({parent:s[2784],name:"break-all",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines may break between any two grapheme clusters for non-CJK scripts.</p>\n"},id:2785}),
s[2786]=a({parent:s[2784],name:"keep-all",flags:8,mods:32768,cat:32,meta:{desc:"<p>Block characters can no longer create implied break points.</p>\n"},id:2786}),
s[2787]=a({parent:s[2784],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Breaks non-CJK scripts according to their own rules.</p>\n"},id:2787}),
s[2788]=a({parent:s[1968],name:"border-top-right-radius",flags:4,mods:0,cat:2,meta:{alias:"rdtr",desc:"<p>Defines the radii of the top right outer border edge.</p>\n"},id:2788}),
s[2789]=a({parent:s[1968],name:"rdtr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2788],id:2789}),
s[2790]=a({parent:s[1968],name:"flex-grow",flags:4,mods:0,cat:2,meta:{alias:"flg",desc:"<p>Sets the flex grow factor. Negative numbers are invalid.</p>\n"},id:2790}),
s[2791]=a({parent:s[1968],name:"flg",flags:4,mods:32768,cat:2,meta:{},proxy:s[2790],id:2791}),
s[2792]=a({parent:s[1968],name:"border-top-color",flags:4,mods:0,cat:2,meta:{alias:"bct",desc:"<p>Sets the color of the top border.</p>\n"},id:2792}),
s[2793]=a({parent:s[1968],name:"bct",flags:4,mods:32768,cat:2,meta:{},proxy:s[2792],id:2793}),
s[2794]=a({parent:s[1968],name:"border-bottom-color",flags:4,mods:0,cat:2,meta:{alias:"bcb",desc:"<p>Sets the color of the bottom border.</p>\n"},id:2794}),
s[2795]=a({parent:s[1968],name:"bcb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2794],id:2795}),
s[2796]=a({parent:s[1968],name:"flex-shrink",flags:4,mods:0,cat:2,meta:{alias:"fls",desc:"<p>Sets the flex shrink factor. Negative numbers are invalid.</p>\n"},id:2796}),
s[2797]=a({parent:s[1968],name:"fls",flags:4,mods:32768,cat:2,meta:{},proxy:s[2796],id:2797}),
s[2798]=a({parent:s[1968],name:"text-rendering",flags:4,mods:0,cat:2,meta:{desc:"<p>The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The โtext-renderingโ property provides these hints.</p>\n"},id:2798}),
s[2799]=a({parent:s[2798],name:"geometricPrecision",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed.</p>\n"},id:2799}),
s[2800]=a({parent:s[2798],name:"optimizeLegibility",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision.</p>\n"},id:2800}),
s[2801]=a({parent:s[2798],name:"optimizeSpeed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision.</p>\n"},id:2801}),
s[2802]=a({parent:s[1968],name:"align-self",flags:4,mods:0,cat:2,meta:{alias:"as",desc:"<p>Allows the default alignment along the cross axis to be overridden for individual flex items.</p>\n"},id:2802}),
s[2803]=a({parent:s[2802],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Computes to the value of &#39;align-items&#39; on the elementโs parent, or &#39;stretch&#39; if the element has no parent. On absolutely positioned elements, it computes to itself.</p>\n"},id:2803}),
s[2804]=a({parent:s[2802],name:"baseline",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the flex itemโs inline axis is the same as the cross axis, this value is identical to &#39;flex-start&#39;. Otherwise, it participates in baseline alignment.</p>\n"},id:2804}),
s[2805]=a({parent:s[2802],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex itemโs margin box is centered in the cross axis within the line.</p>\n"},id:2805}),
s[2806]=a({parent:s[2802],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.</p>\n"},id:2806}),
s[2807]=a({parent:s[2802],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.</p>\n"},id:2807}),
s[2808]=a({parent:s[2802],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.</p>\n"},id:2808}),
s[2809]=a({parent:s[1968],name:"as",flags:4,mods:32768,cat:2,meta:{},proxy:s[2802],id:2809}),
s[2810]=a({parent:s[1968],name:"text-indent",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the &#39;hanging&#39; keyword is specified, in which case it affects all lines except the first.</p>\n"},id:2810}),
s[2811]=a({parent:s[1968],name:"animation-timing-function",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes how the animation will progress over one cycle of its duration.</p>\n"},id:2811}),
s[2812]=a({parent:s[1968],name:"border-spacing",flags:4,mods:0,cat:2,meta:{desc:"<p>The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.</p>\n"},id:2812}),
s[2813]=a({parent:s[1968],name:"direction",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the &#39;dir&#39; attribute and &#39;bdo&#39; element rather than this property.</p>\n"},id:2813}),
s[2814]=a({parent:s[2813],name:"ltr",flags:8,mods:32768,cat:32,meta:{desc:"<p>Left-to-right direction.</p>\n"},id:2814}),
s[2815]=a({parent:s[2813],name:"rtl",flags:8,mods:32768,cat:32,meta:{desc:"<p>Right-to-left direction.</p>\n"},id:2815}),
s[2816]=a({parent:s[1968],name:"background-clip",flags:4,mods:0,cat:2,meta:{alias:"bgclip",desc:"<p>Determines the background painting area.</p>\n"},id:2816}),
s[2817]=a({parent:s[1968],name:"bgclip",flags:4,mods:32768,cat:2,meta:{},proxy:s[2816],id:2817}),
s[2818]=a({parent:s[1968],name:"border-left-color",flags:4,mods:0,cat:2,meta:{alias:"bcl",desc:"<p>Sets the color of the left border.</p>\n"},id:2818}),
s[2819]=a({parent:s[1968],name:"bcl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2818],id:2819}),
s[2820]=a({parent:s[1968],name:"src",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@font-face</code> descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.</p>\n"},id:2820}),
s[2821]=a({parent:s[2820],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Reference font by URL</p>\n"},id:2821}),
s[2822]=a({parent:s[2820],name:"format",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Optional hint describing the format of the font resource.</p>\n"},id:2822}),
s[2823]=a({parent:s[2820],name:"local",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Format-specific string that identifies a locally available copy of a given font.</p>\n"},id:2823}),
s[2824]=a({parent:s[1968],name:"touch-action",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines whether touch input may trigger default behavior supplied by user agent.</p>\n"},id:2824}),
s[2825]=a({parent:s[2824],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent may determine any permitted touch behaviors for touches that begin on the element.</p>\n"},id:2825}),
s[2826]=a({parent:s[2824],name:"manipulation",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming.</p>\n"},id:2826}),
s[2827]=a({parent:s[2824],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Touches that begin on the element must not trigger default touch behaviors.</p>\n"},id:2827}),
s[2828]=a({parent:s[2824],name:"pan-x",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the elementโs nearest ancestor with horizontally scrollable content.</p>\n"},id:2828}),
s[2829]=a({parent:s[2824],name:"pan-y",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the elementโs nearest ancestor with vertically scrollable content.</p>\n"},id:2829}),
s[2830]=a({parent:s[1968],name:"border-right-color",flags:4,mods:0,cat:2,meta:{alias:"bcr",desc:"<p>Sets the color of the right border.</p>\n"},id:2830}),
s[2831]=a({parent:s[1968],name:"bcr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2830],id:2831}),
s[2832]=a({parent:s[1968],name:"transition-property",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the name of the CSS property to which the transition is applied.</p>\n"},id:2832}),
s[2833]=a({parent:s[2832],name:"all",flags:8,mods:32768,cat:32,meta:{desc:"<p>Every property that is able to undergo a transition will do so.</p>\n"},id:2833}),
s[2834]=a({parent:s[2832],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No property will transition.</p>\n"},id:2834}),
s[2835]=a({parent:s[1968],name:"animation-name",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.</p>\n"},id:2835}),
s[2836]=a({parent:s[2835],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No animation is performed</p>\n"},id:2836}),
s[2837]=a({parent:s[1968],name:"filter",flags:4,mods:0,cat:2,meta:{desc:"<p>Processes an elementโs rendering before it is displayed in the document, by applying one or more filter effects.</p>\n"},id:2837}),
s[2838]=a({parent:s[2837],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No filter effects are applied.</p>\n"},id:2838}),
s[2839]=a({parent:s[2837],name:"blur",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Applies a Gaussian blur to the input image.</p>\n"},id:2839}),
s[2840]=a({parent:s[2837],name:"brightness",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Applies a linear multiplier to input image, making it appear more or less bright.</p>\n"},id:2840}),
s[2841]=a({parent:s[2837],name:"contrast",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Adjusts the contrast of the input.</p>\n"},id:2841}),
s[2842]=a({parent:s[2837],name:"drop-shadow",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Applies a drop shadow effect to the input image.</p>\n"},id:2842}),
s[2843]=a({parent:s[2837],name:"grayscale",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Converts the input image to grayscale.</p>\n"},id:2843}),
s[2844]=a({parent:s[2837],name:"hue-rotate",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Applies a hue rotation on the input image.</p>\n"},id:2844}),
s[2845]=a({parent:s[2837],name:"invert",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Inverts the samples in the input image.</p>\n"},id:2845}),
s[2846]=a({parent:s[2837],name:"opacity",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Applies transparency to the samples in the input image.</p>\n"},id:2846}),
s[2847]=a({parent:s[2837],name:"saturate",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Saturates the input image.</p>\n"},id:2847}),
s[2848]=a({parent:s[2837],name:"sepia",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Converts the input image to sepia.</p>\n"},id:2848}),
s[2849]=a({parent:s[2837],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>A filter reference to a <filter> element.</p>\n"},id:2849}),
s[2850]=a({parent:s[1968],name:"animation-duration",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the length of time that an animation takes to complete one cycle.</p>\n"},id:2850}),
s[2851]=a({parent:s[1968],name:"overflow-wrap",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.</p>\n"},id:2851}),
s[2852]=a({parent:s[2851],name:"break-word",flags:8,mods:32768,cat:32,meta:{desc:"<p>An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line.</p>\n"},id:2852}),
s[2853]=a({parent:s[2851],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines may break only at allowed break points.</p>\n"},id:2853}),
s[2854]=a({parent:s[1968],name:"transition-delay",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.</p>\n"},id:2854}),
s[2855]=a({parent:s[1968],name:"stroke",flags:4,mods:0,cat:2,meta:{desc:"<p>Paints along the outline of the given graphical element.</p>\n"},id:2855}),
s[2856]=a({parent:s[2855],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>A URL reference to a paint server element, which is an element that defines a paint server: โhatchโ, โlinearGradientโ, โmeshโ, โpatternโ, โradialGradientโ and โsolidcolorโ.</p>\n"},id:2856}),
s[2857]=a({parent:s[2855],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No paint is applied in this layer.</p>\n"},id:2857}),
s[2858]=a({parent:s[1968],name:"font-variant",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies variant representations of the font</p>\n"},id:2858}),
s[2859]=a({parent:s[2858],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies a face that is not labeled as a small-caps font.</p>\n"},id:2859}),
s[2860]=a({parent:s[2858],name:"small-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font.</p>\n"},id:2860}),
s[2861]=a({parent:s[1968],name:"border-bottom-width",flags:4,mods:0,cat:2,meta:{alias:"bwb",desc:"<p>Sets the thickness of the bottom border.</p>\n"},id:2861}),
s[2862]=a({parent:s[1968],name:"bwb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2861],id:2862}),
s[2863]=a({parent:s[1968],name:"animation-delay",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines when the animation will start.</p>\n"},id:2863}),
s[2864]=a({parent:s[1968],name:"border-top-width",flags:4,mods:0,cat:2,meta:{alias:"bwt",desc:"<p>Sets the thickness of the top border.</p>\n"},id:2864}),
s[2865]=a({parent:s[1968],name:"bwt",flags:4,mods:32768,cat:2,meta:{},proxy:s[2864],id:2865}),
s[2866]=a({parent:s[1968],name:"transition-duration",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how long the transition from the old value to the new value should take.</p>\n"},id:2866}),
s[2867]=a({parent:s[1968],name:"flex-basis",flags:4,mods:0,cat:2,meta:{alias:"flb",desc:"<p>Sets the flex basis.</p>\n"},id:2867}),
s[2868]=a({parent:s[2867],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Retrieves the value of the main size property as the used &#39;flex-basis&#39;.</p>\n"},id:2868}),
s[2869]=a({parent:s[2867],name:"content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates automatic sizing, based on the flex itemโs content.</p>\n"},id:2869}),
s[2870]=a({parent:s[1968],name:"flb",flags:4,mods:32768,cat:2,meta:{},proxy:s[2867],id:2870}),
s[2871]=a({parent:s[1968],name:"will-change",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.</p>\n"},id:2871}),
s[2872]=a({parent:s[2871],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Expresses no particular intent.</p>\n"},id:2872}),
s[2873]=a({parent:s[2871],name:"contents",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the author expects to animate or change something about the elementโs contents in the near future.</p>\n"},id:2873}),
s[2874]=a({parent:s[2871],name:"scroll-position",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the author expects to animate or change the scroll position of the element in the near future.</p>\n"},id:2874}),
s[2875]=a({parent:s[1968],name:"animation-fill-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines what values are applied by the animation outside the time it is executing.</p>\n"},id:2875}),
s[2876]=a({parent:s[2875],name:"backwards",flags:8,mods:32768,cat:32,meta:{desc:"<p>The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by &#39;animation-delay&#39;.</p>\n"},id:2876}),
s[2877]=a({parent:s[2875],name:"both",flags:8,mods:32768,cat:32,meta:{desc:"<p>Both forwards and backwards fill modes are applied.</p>\n"},id:2877}),
s[2878]=a({parent:s[2875],name:"forwards",flags:8,mods:32768,cat:32,meta:{desc:"<p>The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.</p>\n"},id:2878}),
s[2879]=a({parent:s[2875],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes.</p>\n"},id:2879}),
s[2880]=a({parent:s[1968],name:"outline-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Width of the outline.</p>\n"},id:2880}),
s[2881]=a({parent:s[1968],name:"table-layout",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the algorithm used to lay out the table cells, rows, and columns.</p>\n"},id:2881}),
s[2882]=a({parent:s[2881],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use any automatic table layout algorithm.</p>\n"},id:2882}),
s[2883]=a({parent:s[2881],name:"fixed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the fixed table layout algorithm.</p>\n"},id:2883}),
s[2884]=a({parent:s[1968],name:"object-fit",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.</p>\n"},id:2884}),
s[2885]=a({parent:s[2884],name:"contain",flags:8,mods:32768,cat:32,meta:{desc:"<p>The replaced content is sized to maintain its aspect ratio while fitting within the elementโs content box: its concrete object size is resolved as a contain constraint against the element&#39;s used width and height.</p>\n"},id:2885}),
s[2886]=a({parent:s[2884],name:"cover",flags:8,mods:32768,cat:32,meta:{desc:"<p>The replaced content is sized to maintain its aspect ratio while filling the element&#39;s entire content box: its concrete object size is resolved as a cover constraint against the elementโs used width and height.</p>\n"},id:2886}),
s[2887]=a({parent:s[2884],name:"fill",flags:8,mods:32768,cat:32,meta:{desc:"<p>The replaced content is sized to fill the elementโs content box: the object&#39;s concrete object size is the element&#39;s used width and height.</p>\n"},id:2887}),
s[2888]=a({parent:s[2884],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The replaced content is not resized to fit inside the element&#39;s content box</p>\n"},id:2888}),
s[2889]=a({parent:s[2884],name:"scale-down",flags:8,mods:32768,cat:32,meta:{desc:"<p>Size the content as if โnoneโ or โcontainโ were specified, whichever would result in a smaller concrete object size.</p>\n"},id:2889}),
s[2890]=a({parent:s[1968],name:"order",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.</p>\n"},id:2890}),
s[2891]=a({parent:s[1968],name:"transition-timing-function",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes how the intermediate values used during a transition will be calculated.</p>\n"},id:2891}),
s[2892]=a({parent:s[1968],name:"resize",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.</p>\n"},id:2892}),
s[2893]=a({parent:s[2892],name:"both",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element.</p>\n"},id:2893}),
s[2894]=a({parent:s[2892],name:"horizontal",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element.</p>\n"},id:2894}),
s[2895]=a({parent:s[2892],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element.</p>\n"},id:2895}),
s[2896]=a({parent:s[2892],name:"vertical",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element.</p>\n"},id:2896}),
s[2897]=a({parent:s[1968],name:"outline-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Style of the outline.</p>\n"},id:2897}),
s[2898]=a({parent:s[2897],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Permits the user agent to render a custom outline style, typically the default platform style.</p>\n"},id:2898}),
s[2899]=a({parent:s[1968],name:"border-right-width",flags:4,mods:0,cat:2,meta:{alias:"bwr",desc:"<p>Sets the thickness of the right border.</p>\n"},id:2899}),
s[2900]=a({parent:s[1968],name:"bwr",flags:4,mods:32768,cat:2,meta:{},proxy:s[2899],id:2900}),
s[2901]=a({parent:s[1968],name:"stroke-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the width of the stroke on the current object.</p>\n"},id:2901}),
s[2902]=a({parent:s[1968],name:"animation-iteration-count",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.</p>\n"},id:2902}),
s[2903]=a({parent:s[2902],name:"infinite",flags:8,mods:32768,cat:32,meta:{desc:"<p>Causes the animation to repeat forever.</p>\n"},id:2903}),
s[2904]=a({parent:s[1968],name:"align-content",flags:4,mods:0,cat:2,meta:{alias:"ac",desc:"<p>Aligns a flex containerโs lines within the flex container when there is extra space in the cross-axis, similar to how &#39;justify-content&#39; aligns individual items within the main-axis.</p>\n"},id:2904}),
s[2905]=a({parent:s[2904],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines are packed toward the center of the flex container.</p>\n"},id:2905}),
s[2906]=a({parent:s[2904],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines are packed toward the end of the flex container.</p>\n"},id:2906}),
s[2907]=a({parent:s[2904],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines are packed toward the start of the flex container.</p>\n"},id:2907}),
s[2908]=a({parent:s[2904],name:"space-around",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines are evenly distributed in the flex container, with half-size spaces on either end.</p>\n"},id:2908}),
s[2909]=a({parent:s[2904],name:"space-between",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines are evenly distributed in the flex container.</p>\n"},id:2909}),
s[2910]=a({parent:s[2904],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lines stretch to take up the remaining space.</p>\n"},id:2910}),
s[2911]=a({parent:s[1968],name:"ac",flags:4,mods:32768,cat:2,meta:{},proxy:s[2904],id:2911}),
s[2912]=a({parent:s[1968],name:"outline-offset",flags:4,mods:0,cat:2,meta:{desc:"<p>Offset the outline and draw it beyond the border edge.</p>\n"},id:2912}),
s[2913]=a({parent:s[1968],name:"backface-visibility",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines whether or not the &#39;back&#39; side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.</p>\n"},id:2913}),
s[2914]=a({parent:s[2913],name:"hidden",flags:8,mods:32768,cat:32,meta:{desc:"<p>Back side is hidden.</p>\n"},id:2914}),
s[2915]=a({parent:s[2913],name:"visible",flags:8,mods:32768,cat:32,meta:{desc:"<p>Back side is visible.</p>\n"},id:2915}),
s[2916]=a({parent:s[1968],name:"border-left-width",flags:4,mods:0,cat:2,meta:{alias:"bwl",desc:"<p>Sets the thickness of the left border.</p>\n"},id:2916}),
s[2917]=a({parent:s[1968],name:"bwl",flags:4,mods:32768,cat:2,meta:{},proxy:s[2916],id:2917}),
s[2918]=a({parent:s[1968],name:"flex-flow",flags:4,mods:0,cat:2,meta:{alias:"flf",desc:"<p>Specifies how flexbox items are placed in the flexbox.</p>\n"},id:2918}),
s[2919]=a({parent:s[2918],name:"column",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex containerโs main axis has the same orientation as the block axis of the current writing mode.</p>\n"},id:2919}),
s[2920]=a({parent:s[2918],name:"column-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;column&#39;, except the main-start and main-end directions are swapped.</p>\n"},id:2920}),
s[2921]=a({parent:s[2918],name:"nowrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex container is single-line.</p>\n"},id:2921}),
s[2922]=a({parent:s[2918],name:"row",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flex containerโs main axis has the same orientation as the inline axis of the current writing mode.</p>\n"},id:2922}),
s[2923]=a({parent:s[2918],name:"row-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;row&#39;, except the main-start and main-end directions are swapped.</p>\n"},id:2923}),
s[2924]=a({parent:s[2918],name:"wrap",flags:8,mods:32768,cat:32,meta:{desc:"<p>The flexbox is multi-line.</p>\n"},id:2924}),
s[2925]=a({parent:s[2918],name:"wrap-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Same as &#39;wrap&#39;, except the cross-start and cross-end directions are swapped.</p>\n"},id:2925}),
s[2926]=a({parent:s[1968],name:"flf",flags:4,mods:32768,cat:2,meta:{},proxy:s[2918],id:2926}),
s[2927]=a({parent:s[1968],name:"appearance",flags:4,mods:0,cat:2,meta:{desc:"<p>Changes the appearance of buttons and other controls to resemble native controls.</p>\n"},id:2927}),
s[2928]=a({parent:s[1968],name:"unicode-bidi",flags:4,mods:0,cat:2,meta:{desc:"<p>The level of embedding with respect to the bidirectional algorithm.</p>\n"},id:2928}),
s[2929]=a({parent:s[2928],name:"bidi-override",flags:8,mods:32768,cat:32,meta:{desc:"<p>Inside the element, reordering is strictly in sequence according to the &#39;direction&#39; property; the implicit part of the bidirectional algorithm is ignored.</p>\n"},id:2929}),
s[2930]=a({parent:s[2928],name:"embed",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the &#39;direction&#39; property.</p>\n"},id:2930}),
s[2931]=a({parent:s[2928],name:"isolate",flags:8,mods:32768,cat:32,meta:{desc:"<p>The contents of the element are considered to be inside a separate, independent paragraph.</p>\n"},id:2931}),
s[2932]=a({parent:s[2928],name:"isolate-override",flags:8,mods:32768,cat:32,meta:{desc:"<p>This combines the isolation behavior of &#39;isolate&#39; with the directional override behavior of &#39;bidi-override&#39;</p>\n"},id:2932}),
s[2933]=a({parent:s[2928],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries.</p>\n"},id:2933}),
s[2934]=a({parent:s[2928],name:"plaintext",flags:8,mods:32768,cat:32,meta:{desc:"<p>For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element&#39;s computed &#39;direction&#39;.</p>\n"},id:2934}),
s[2935]=a({parent:s[1968],name:"stroke-dasharray",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the pattern of dashes and gaps used to stroke paths.</p>\n"},id:2935}),
s[2936]=a({parent:s[2935],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that no dashing is used.</p>\n"},id:2936}),
s[2937]=a({parent:s[1968],name:"stroke-dashoffset",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the distance into the dash pattern to start the dash.</p>\n"},id:2937}),
s[2938]=a({parent:s[1968],name:"unicode-range",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@font-face</code> descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.</p>\n"},id:2938}),
s[2939]=a({parent:s[2938],name:"U+26",flags:8,mods:32768,cat:32,meta:{desc:"<p>Ampersand.</p>\n"},id:2939}),
s[2940]=a({parent:s[2938],name:"U+00-7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Basic Latin (ASCII).</p>\n"},id:2940}),
s[2941]=a({parent:s[2938],name:"U+80-FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs.</p>\n"},id:2941}),
s[2942]=a({parent:s[2938],name:"U+100-17F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish.</p>\n"},id:2942}),
s[2943]=a({parent:s[2938],name:"U+180-24F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology.</p>\n"},id:2943}),
s[2944]=a({parent:s[2938],name:"U+1E00-1EFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use.</p>\n"},id:2944}),
s[2945]=a({parent:s[2938],name:"U+250-2AF",flags:8,mods:32768,cat:32,meta:{desc:"<p>International Phonetic Alphabet Extensions.</p>\n"},id:2945}),
s[2946]=a({parent:s[2938],name:"U+370-3FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Greek and Coptic.</p>\n"},id:2946}),
s[2947]=a({parent:s[2938],name:"U+1F00-1FFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Greek Extended. Accented characters for polytonic Greek.</p>\n"},id:2947}),
s[2948]=a({parent:s[2938],name:"U+400-4FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Cyrillic.</p>\n"},id:2948}),
s[2949]=a({parent:s[2938],name:"U+500-52F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok.</p>\n"},id:2949}),
s[2950]=a({parent:s[2938],name:"U+530โ58F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Armenian.</p>\n"},id:2950}),
s[2951]=a({parent:s[2938],name:"U+590โ5FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Hebrew.</p>\n"},id:2951}),
s[2952]=a({parent:s[2938],name:"U+600โ6FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Arabic.</p>\n"},id:2952}),
s[2953]=a({parent:s[2938],name:"U+750โ77F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian.</p>\n"},id:2953}),
s[2954]=a({parent:s[2938],name:"U+8A0โ8FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs.</p>\n"},id:2954}),
s[2955]=a({parent:s[2938],name:"U+700โ74F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Syriac.</p>\n"},id:2955}),
s[2956]=a({parent:s[2938],name:"U+900โ97F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Devanagari.</p>\n"},id:2956}),
s[2957]=a({parent:s[2938],name:"U+980โ9FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Bengali.</p>\n"},id:2957}),
s[2958]=a({parent:s[2938],name:"U+A00โA7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Gurmukhi.</p>\n"},id:2958}),
s[2959]=a({parent:s[2938],name:"U+A80โAFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Gujarati.</p>\n"},id:2959}),
s[2960]=a({parent:s[2938],name:"U+B00โB7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Oriya.</p>\n"},id:2960}),
s[2961]=a({parent:s[2938],name:"U+B80โBFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Tamil.</p>\n"},id:2961}),
s[2962]=a({parent:s[2938],name:"U+C00โC7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Telugu.</p>\n"},id:2962}),
s[2963]=a({parent:s[2938],name:"U+C80โCFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Kannada.</p>\n"},id:2963}),
s[2964]=a({parent:s[2938],name:"U+D00โD7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Malayalam.</p>\n"},id:2964}),
s[2965]=a({parent:s[2938],name:"U+D80โDFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sinhala.</p>\n"},id:2965}),
s[2966]=a({parent:s[2938],name:"U+118A0โ118FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Warang Citi.</p>\n"},id:2966}),
s[2967]=a({parent:s[2938],name:"U+E00โE7F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Thai.</p>\n"},id:2967}),
s[2968]=a({parent:s[2938],name:"U+1A20โ1AAF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Tai Tham.</p>\n"},id:2968}),
s[2969]=a({parent:s[2938],name:"U+AA80โAADF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Tai Viet.</p>\n"},id:2969}),
s[2970]=a({parent:s[2938],name:"U+E80โEFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lao.</p>\n"},id:2970}),
s[2971]=a({parent:s[2938],name:"U+F00โFFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Tibetan.</p>\n"},id:2971}),
s[2972]=a({parent:s[2938],name:"U+1000โ109F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Myanmar (Burmese).</p>\n"},id:2972}),
s[2973]=a({parent:s[2938],name:"U+10A0โ10FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Georgian.</p>\n"},id:2973}),
s[2974]=a({parent:s[2938],name:"U+1200โ137F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Ethiopic.</p>\n"},id:2974}),
s[2975]=a({parent:s[2938],name:"U+1380โ139F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks</p>\n"},id:2975}),
s[2976]=a({parent:s[2938],name:"U+2D80โ2DDF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Ethiopic Extended. Extra Syllables for Me&#39;en, Blin, and Sebatbeit.</p>\n"},id:2976}),
s[2977]=a({parent:s[2938],name:"U+AB00โAB2F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz.</p>\n"},id:2977}),
s[2978]=a({parent:s[2938],name:"U+1780โ17FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Khmer.</p>\n"},id:2978}),
s[2979]=a({parent:s[2938],name:"U+1800โ18AF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Mongolian.</p>\n"},id:2979}),
s[2980]=a({parent:s[2938],name:"U+1B80โ1BBF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sundanese.</p>\n"},id:2980}),
s[2981]=a({parent:s[2938],name:"U+1CC0โ1CCF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sundanese Supplement. Punctuation.</p>\n"},id:2981}),
s[2982]=a({parent:s[2938],name:"U+4E00โ9FD5",flags:8,mods:32768,cat:32,meta:{desc:"<p>CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese.</p>\n"},id:2982}),
s[2983]=a({parent:s[2938],name:"U+3400โ4DB5",flags:8,mods:32768,cat:32,meta:{desc:"<p>CJK Unified Ideographs Extension A. Rare ideographs.</p>\n"},id:2983}),
s[2984]=a({parent:s[2938],name:"U+2F00โ2FDF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Kangxi Radicals.</p>\n"},id:2984}),
s[2985]=a({parent:s[2938],name:"U+2E80โ2EFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>CJK Radicals Supplement. Alternative forms of Kangxi Radicals.</p>\n"},id:2985}),
s[2986]=a({parent:s[2938],name:"U+1100โ11FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Hangul Jamo.</p>\n"},id:2986}),
s[2987]=a({parent:s[2938],name:"U+AC00โD7AF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Hangul Syllables.</p>\n"},id:2987}),
s[2988]=a({parent:s[2938],name:"U+3040โ309F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Hiragana.</p>\n"},id:2988}),
s[2989]=a({parent:s[2938],name:"U+30A0โ30FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Katakana.</p>\n"},id:2989}),
s[2990]=a({parent:s[2938],name:"U+A4D0โA4FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Lisu.</p>\n"},id:2990}),
s[2991]=a({parent:s[2938],name:"U+A000โA48F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Yi Syllables.</p>\n"},id:2991}),
s[2992]=a({parent:s[2938],name:"U+A490โA4CF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Yi Radicals.</p>\n"},id:2992}),
s[2993]=a({parent:s[2938],name:"U+2000-206F",flags:8,mods:32768,cat:32,meta:{desc:"<p>General Punctuation.</p>\n"},id:2993}),
s[2994]=a({parent:s[2938],name:"U+3000โ303F",flags:8,mods:32768,cat:32,meta:{desc:"<p>CJK Symbols and Punctuation.</p>\n"},id:2994}),
s[2995]=a({parent:s[2938],name:"U+2070โ209F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Superscripts and Subscripts.</p>\n"},id:2995}),
s[2996]=a({parent:s[2938],name:"U+20A0โ20CF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Currency Symbols.</p>\n"},id:2996}),
s[2997]=a({parent:s[2938],name:"U+2100โ214F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Letterlike Symbols.</p>\n"},id:2997}),
s[2998]=a({parent:s[2938],name:"U+2150โ218F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Number Forms.</p>\n"},id:2998}),
s[2999]=a({parent:s[2938],name:"U+2190โ21FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Arrows.</p>\n"},id:2999}),
s[3000]=a({parent:s[2938],name:"U+2200โ22FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Mathematical Operators.</p>\n"},id:3000}),
s[3001]=a({parent:s[2938],name:"U+2300โ23FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Miscellaneous Technical.</p>\n"},id:3001}),
s[3002]=a({parent:s[2938],name:"U+E000-F8FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Private Use Area.</p>\n"},id:3002}),
s[3003]=a({parent:s[2938],name:"U+FB00โFB4F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew.</p>\n"},id:3003}),
s[3004]=a({parent:s[2938],name:"U+FB50โFDFF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures.</p>\n"},id:3004}),
s[3005]=a({parent:s[2938],name:"U+1F600โ1F64F",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emoji: Emoticons.</p>\n"},id:3005}),
s[3006]=a({parent:s[2938],name:"U+2600โ26FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emoji: Miscellaneous Symbols.</p>\n"},id:3006}),
s[3007]=a({parent:s[2938],name:"U+1F300โ1F5FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emoji: Miscellaneous Symbols and Pictographs.</p>\n"},id:3007}),
s[3008]=a({parent:s[2938],name:"U+1F900โ1F9FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emoji: Supplemental Symbols and Pictographs.</p>\n"},id:3008}),
s[3009]=a({parent:s[2938],name:"U+1F680โ1F6FF",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emoji: Transport and Map Symbols.</p>\n"},id:3009}),
s[3010]=a({parent:s[1968],name:"word-spacing",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies additional spacing between โwordsโ.</p>\n"},id:3010}),
s[3011]=a({parent:s[3010],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>No additional spacing is applied. Computes to zero.</p>\n"},id:3011}),
s[3012]=a({parent:s[1968],name:"text-size-adjust",flags:4,mods:0,cat:2,meta:{desc:"<p>The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.</p>\n"},id:3012}),
s[3013]=a({parent:s[1968],name:"border-top-style",flags:4,mods:0,cat:2,meta:{alias:"bst",desc:"<p>Sets the style of the top border.</p>\n"},id:3013}),
s[3014]=a({parent:s[1968],name:"bst",flags:4,mods:32768,cat:2,meta:{},proxy:s[3013],id:3014}),
s[3015]=a({parent:s[1968],name:"border-bottom-style",flags:4,mods:0,cat:2,meta:{alias:"bsb",desc:"<p>Sets the style of the bottom border.</p>\n"},id:3015}),
s[3016]=a({parent:s[1968],name:"bsb",flags:4,mods:32768,cat:2,meta:{},proxy:s[3015],id:3016}),
s[3017]=a({parent:s[1968],name:"animation-direction",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines whether or not the animation should play in reverse on alternate cycles.</p>\n"},id:3017}),
s[3018]=a({parent:s[3017],name:"alternate",flags:8,mods:32768,cat:32,meta:{desc:"<p>The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.</p>\n"},id:3018}),
s[3019]=a({parent:s[3017],name:"alternate-reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.</p>\n"},id:3019}),
s[3020]=a({parent:s[3017],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Normal playback.</p>\n"},id:3020}),
s[3021]=a({parent:s[3017],name:"reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>All iterations of the animation are played in the reverse direction from the way they were specified.</p>\n"},id:3021}),
s[3022]=a({parent:s[1968],name:"image-rendering",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.</p>\n"},id:3022}),
s[3023]=a({parent:s[3022],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image should be scaled with an algorithm that maximizes the appearance of the image.</p>\n"},id:3023}),
s[3024]=a({parent:s[3022],name:"crisp-edges",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process.</p>\n"},id:3024}),
s[3025]=a({parent:s[3022],name:"optimizeQuality",flags:8,mods:32768,cat:32,meta:{desc:"<p>Deprecated.</p>\n"},id:3025}),
s[3026]=a({parent:s[3022],name:"optimizeSpeed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Deprecated.</p>\n"},id:3026}),
s[3027]=a({parent:s[3022],name:"pixelated",flags:8,mods:32768,cat:32,meta:{desc:"<p>When scaling the image up, the &#39;nearest neighbor&#39; or similar algorithm must be used, so that the image appears to be simply composed of very large pixels.</p>\n"},id:3027}),
s[3028]=a({parent:s[1968],name:"perspective",flags:4,mods:0,cat:2,meta:{desc:"<p>Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.</p>\n"},id:3028}),
s[3029]=a({parent:s[3028],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No perspective transform is applied.</p>\n"},id:3029}),
s[3030]=a({parent:s[1968],name:"grid-template-columns",flags:4,mods:0,cat:2,meta:{alias:"gtc",desc:"<p>specifies, as a space-separated track list, the line names and track sizing functions of the grid.</p>\n"},id:3030}),
s[3031]=a({parent:s[3030],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>There is no explicit grid; any rows/columns will be implicitly generated.</p>\n"},id:3031}),
s[3032]=a({parent:s[3030],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest min-content contribution of the grid items occupying the grid track.</p>\n"},id:3032}),
s[3033]=a({parent:s[3030],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest max-content contribution of the grid items occupying the grid track.</p>\n"},id:3033}),
s[3034]=a({parent:s[3030],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>As a maximum, identical to &#39;max-content&#39;. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.</p>\n"},id:3034}),
s[3035]=a({parent:s[3030],name:"subgrid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the grid will align to its parent grid in that axis.</p>\n"},id:3035}),
s[3036]=a({parent:s[3030],name:"minmax",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines a size range greater than or equal to min and less than or equal to max.</p>\n"},id:3036}),
s[3037]=a({parent:s[3030],name:"repeat",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.</p>\n"},id:3037}),
s[3038]=a({parent:s[1968],name:"gtc",flags:4,mods:32768,cat:2,meta:{},proxy:s[3030],id:3038}),
s[3039]=a({parent:s[1968],name:"list-style-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the position of the &#39;::marker&#39; pseudo-element&#39;s box in the list item.</p>\n"},id:3039}),
s[3040]=a({parent:s[3039],name:"inside",flags:8,mods:32768,cat:32,meta:{desc:"<p>The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below.</p>\n"},id:3040}),
s[3041]=a({parent:s[3039],name:"outside",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element&#39;s content flows.</p>\n"},id:3041}),
s[3042]=a({parent:s[1968],name:"font-feature-settings",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.</p>\n"},id:3042}),
s[3043]=a({parent:s[3042],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>No change in glyph substitution or positioning occurs.</p>\n"},id:3043}),
s[3044]=a({parent:s[3042],name:"off",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disable feature.</p>\n"},id:3044}),
s[3045]=a({parent:s[3042],name:"on",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enable feature.</p>\n"},id:3045}),
s[3046]=a({parent:s[1968],name:"contain",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.</p>\n"},id:3046}),
s[3047]=a({parent:s[3046],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the property has no effect.</p>\n"},id:3047}),
s[3048]=a({parent:s[3046],name:"strict",flags:8,mods:32768,cat:32,meta:{desc:"<p>Turns on all forms of containment for the element.</p>\n"},id:3048}),
s[3049]=a({parent:s[3046],name:"content",flags:8,mods:32768,cat:32,meta:{desc:"<p>All containment rules except size are applied to the element.</p>\n"},id:3049}),
s[3050]=a({parent:s[3046],name:"size",flags:8,mods:32768,cat:32,meta:{desc:"<p>For properties that can have effects on more than just an element and its descendants, those effects don&#39;t escape the containing element.</p>\n"},id:3050}),
s[3051]=a({parent:s[3046],name:"layout",flags:8,mods:32768,cat:32,meta:{desc:"<p>Turns on layout containment for the element.</p>\n"},id:3051}),
s[3052]=a({parent:s[3046],name:"style",flags:8,mods:32768,cat:32,meta:{desc:"<p>Turns on style containment for the element.</p>\n"},id:3052}),
s[3053]=a({parent:s[3046],name:"paint",flags:8,mods:32768,cat:32,meta:{desc:"<p>Turns on paint containment for the element.</p>\n"},id:3053}),
s[3054]=a({parent:s[1968],name:"background-position-x",flags:4,mods:0,cat:2,meta:{desc:"<p>If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.</p>\n"},id:3054}),
s[3055]=a({parent:s[3054],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;50%&#39; (&#39;left 50%&#39;) for the horizontal position if the horizontal position is not otherwise specified, or &#39;50%&#39; (&#39;top 50%&#39;) for the vertical position if it is.</p>\n"},id:3055}),
s[3056]=a({parent:s[3054],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;0%&#39; for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.</p>\n"},id:3056}),
s[3057]=a({parent:s[3054],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;100%&#39; for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.</p>\n"},id:3057}),
s[3058]=a({parent:s[1968],name:"transform-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines how nested elements are rendered in 3D space.</p>\n"},id:3058}),
s[3059]=a({parent:s[3058],name:"flat",flags:8,mods:32768,cat:32,meta:{desc:"<p>All children of this element are rendered flattened into the 2D plane of the element.</p>\n"},id:3059}),
s[3060]=a({parent:s[3058],name:"preserve-3d",flags:8,mods:32768,cat:32,meta:{desc:"<p>Flattening is not performed, so children maintain their position in 3D space.</p>\n"},id:3060}),
s[3061]=a({parent:s[1968],name:"background-origin",flags:4,mods:0,cat:2,meta:{alias:"bgo",desc:"<p>For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes &#39;box-decoration-break&#39; operates on to determine the background positioning area(s).</p>\n"},id:3061}),
s[3062]=a({parent:s[1968],name:"bgo",flags:4,mods:32768,cat:2,meta:{},proxy:s[3061],id:3062}),
s[3063]=a({parent:s[1968],name:"border-left-style",flags:4,mods:0,cat:2,meta:{alias:"bsl",desc:"<p>Sets the style of the left border.</p>\n"},id:3063}),
s[3064]=a({parent:s[1968],name:"bsl",flags:4,mods:32768,cat:2,meta:{},proxy:s[3063],id:3064}),
s[3065]=a({parent:s[1968],name:"font-display",flags:4,mods:0,cat:2,meta:{desc:"<p>The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use.</p>\n"},id:3065}),
s[3066]=a({parent:s[1968],name:"clip-path",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.</p>\n"},id:3066}),
s[3067]=a({parent:s[3066],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No clipping path gets created.</p>\n"},id:3067}),
s[3068]=a({parent:s[3066],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>References a <clipPath> element to create a clipping path.</p>\n"},id:3068}),
s[3069]=a({parent:s[1968],name:"hyphens",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls whether hyphenation is allowed to create more break opportunities within a line of text.</p>\n"},id:3069}),
s[3070]=a({parent:s[3069],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.</p>\n"},id:3070}),
s[3071]=a({parent:s[3069],name:"manual",flags:8,mods:32768,cat:32,meta:{desc:"<p>Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities</p>\n"},id:3071}),
s[3072]=a({parent:s[3069],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Words are not broken at line breaks, even if characters inside the word suggest line break points.</p>\n"},id:3072}),
s[3073]=a({parent:s[1968],name:"background-attachment",flags:4,mods:0,cat:2,meta:{alias:"bga",desc:"<p>Specifies whether the background images are fixed with regard to the viewport (&#39;fixed&#39;) or scroll along with the element (&#39;scroll&#39;) or its contents (&#39;local&#39;).</p>\n"},id:3073}),
s[3074]=a({parent:s[3073],name:"fixed",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the viewport. In paged media where there is no viewport, a &#39;fixed&#39; background is fixed with respect to the page box and therefore replicated on every page.</p>\n"},id:3074}),
s[3075]=a({parent:s[3073],name:"local",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the elementโs contents: if the element has a scrolling mechanism, the background scrolls with the elementโs contents.</p>\n"},id:3075}),
s[3076]=a({parent:s[3073],name:"scroll",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the elementโs border.)</p>\n"},id:3076}),
s[3077]=a({parent:s[1968],name:"bga",flags:4,mods:32768,cat:2,meta:{},proxy:s[3073],id:3077}),
s[3078]=a({parent:s[1968],name:"border-right-style",flags:4,mods:0,cat:2,meta:{alias:"bsr",desc:"<p>Sets the style of the right border.</p>\n"},id:3078}),
s[3079]=a({parent:s[1968],name:"bsr",flags:4,mods:32768,cat:2,meta:{},proxy:s[3078],id:3079}),
s[3080]=a({parent:s[1968],name:"outline-color",flags:4,mods:0,cat:2,meta:{desc:"<p>The color of the outline.</p>\n"},id:3080}),
s[3081]=a({parent:s[3080],name:"invert",flags:8,mods:32768,cat:32,meta:{desc:"<p>Performs a color inversion on the pixels on the screen.</p>\n"},id:3081}),
s[3082]=a({parent:s[1968],name:"margin-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;margin-bottom&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3082}),
s[3083]=a({parent:s[1968],name:"animation-play-state",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines whether the animation is running or paused.</p>\n"},id:3083}),
s[3084]=a({parent:s[3083],name:"paused",flags:8,mods:32768,cat:32,meta:{desc:"<p>A running animation will be paused.</p>\n"},id:3084}),
s[3085]=a({parent:s[3083],name:"running",flags:8,mods:32768,cat:32,meta:{desc:"<p>Resume playback of a paused animation.</p>\n"},id:3085}),
s[3086]=a({parent:s[1968],name:"quotes",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies quotation marks for any number of embedded quotations.</p>\n"},id:3086}),
s[3087]=a({parent:s[3086],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The &#39;open-quote&#39; and &#39;close-quote&#39; values of the &#39;content&#39; property produce no quotations marks, as if they were &#39;no-open-quote&#39; and &#39;no-close-quote&#39; respectively.</p>\n"},id:3087}),
s[3088]=a({parent:s[1968],name:"background-position-y",flags:4,mods:0,cat:2,meta:{desc:"<p>If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.</p>\n"},id:3088}),
s[3089]=a({parent:s[3088],name:"bottom",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;100%&#39; for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.</p>\n"},id:3089}),
s[3090]=a({parent:s[3088],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;50%&#39; (&#39;left 50%&#39;) for the horizontal position if the horizontal position is not otherwise specified, or &#39;50%&#39; (&#39;top 50%&#39;) for the vertical position if it is.</p>\n"},id:3090}),
s[3091]=a({parent:s[3088],name:"top",flags:8,mods:32768,cat:32,meta:{desc:"<p>Equivalent to &#39;0%&#39; for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.</p>\n"},id:3091}),
s[3092]=a({parent:s[1968],name:"font-stretch",flags:4,mods:0,cat:2,meta:{desc:"<p>Selects a normal, condensed, or expanded face from a font family.</p>\n"},id:3092}),
s[3093]=a({parent:s[3092],name:"narrower",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a narrower value relative to the width of the parent element.</p>\n"},id:3093}),
s[3094]=a({parent:s[3092],name:"wider",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates a wider value relative to the width of the parent element.</p>\n"},id:3094}),
s[3095]=a({parent:s[1968],name:"stroke-linecap",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the shape to be used at the end of open subpaths when they are stroked.</p>\n"},id:3095}),
s[3096]=a({parent:s[3095],name:"butt",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the stroke for each subpath does not extend beyond its two endpoints.</p>\n"},id:3096}),
s[3097]=a({parent:s[3095],name:"round",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width.</p>\n"},id:3097}),
s[3098]=a({parent:s[3095],name:"square",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width.</p>\n"},id:3098}),
s[3099]=a({parent:s[1968],name:"object-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the alignment of the replaced element inside its box.</p>\n"},id:3099}),
s[3100]=a({parent:s[1968],name:"counter-reset",flags:4,mods:0,cat:2,meta:{desc:"<p>Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.</p>\n"},id:3100}),
s[3101]=a({parent:s[3100],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The counter is not modified.</p>\n"},id:3101}),
s[3102]=a({parent:s[1968],name:"margin-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;margin-top&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3102}),
s[3103]=a({parent:s[1968],name:"counter-increment",flags:4,mods:0,cat:2,meta:{desc:"<p>Manipulate the value of existing counters.</p>\n"},id:3103}),
s[3104]=a({parent:s[3103],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>This element does not alter the value of any counters.</p>\n"},id:3104}),
s[3105]=a({parent:s[1968],name:"text-decoration-color",flags:4,mods:0,cat:2,meta:{alias:"tdc",desc:"<p>Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.</p>\n"},id:3105}),
s[3106]=a({parent:s[1968],name:"tdc",flags:4,mods:32768,cat:2,meta:{},proxy:s[3105],id:3106}),
s[3107]=a({parent:s[1968],name:"list-style-image",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the &#39;list-style-type&#39; marker.</p>\n"},id:3107}),
s[3108]=a({parent:s[3107],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The default contents of the of the list itemโs marker are given by &#39;list-style-type&#39; instead.</p>\n"},id:3108}),
s[3109]=a({parent:s[1968],name:"column-count",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the optimal number of columns into which the content of the element will be flowed.</p>\n"},id:3109}),
s[3110]=a({parent:s[3109],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Determines the number of columns by the &#39;column-width&#39; property and the element width.</p>\n"},id:3110}),
s[3111]=a({parent:s[1968],name:"border-image",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand property for setting &#39;border-image-source&#39;, &#39;border-image-slice&#39;, &#39;border-image-width&#39;, &#39;border-image-outset&#39; and &#39;border-image-repeat&#39;. Omitted values are set to their initial values.</p>\n"},id:3111}),
s[3112]=a({parent:s[3111],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>If &#39;auto&#39; is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.</p>\n"},id:3112}),
s[3113]=a({parent:s[3111],name:"fill",flags:8,mods:32768,cat:32,meta:{desc:"<p>Causes the middle part of the border-image to be preserved.</p>\n"},id:3113}),
s[3114]=a({parent:s[3111],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the border styles.</p>\n"},id:3114}),
s[3115]=a({parent:s[3111],name:"repeat",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area.</p>\n"},id:3115}),
s[3116]=a({parent:s[3111],name:"round",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.</p>\n"},id:3116}),
s[3117]=a({parent:s[3111],name:"space",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.</p>\n"},id:3117}),
s[3118]=a({parent:s[3111],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is stretched to fill the area.</p>\n"},id:3118}),
s[3119]=a({parent:s[1968],name:"column-gap",flags:4,mods:0,cat:2,meta:{alias:"cg",desc:"<p>Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.</p>\n"},id:3119}),
s[3120]=a({parent:s[3119],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>User agent specific and typically equivalent to 1em.</p>\n"},id:3120}),
s[3121]=a({parent:s[1968],name:"cg",flags:4,mods:32768,cat:2,meta:{},proxy:s[3119],id:3121}),
s[3122]=a({parent:s[1968],name:"page-break-inside",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines rules for page breaks inside an element.</p>\n"},id:3122}),
s[3123]=a({parent:s[3122],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither force nor forbid a page break inside the generated box.</p>\n"},id:3123}),
s[3124]=a({parent:s[3122],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break inside the generated box.</p>\n"},id:3124}),
s[3125]=a({parent:s[1968],name:"fill-opacity",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the opacity of the painting operation used to paint the interior the current object.</p>\n"},id:3125}),
s[3126]=a({parent:s[1968],name:"padding-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;padding-left&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3126}),
s[3127]=a({parent:s[1968],name:"empty-cells",flags:4,mods:0,cat:2,meta:{desc:"<p>In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.</p>\n"},id:3127}),
s[3128]=a({parent:s[3127],name:"hide",flags:8,mods:32768,cat:32,meta:{desc:"<p>No borders or backgrounds are drawn around/behind empty cells.</p>\n"},id:3128}),
s[3129]=a({parent:s[3127],name:"show",flags:8,mods:32768,cat:32,meta:{desc:"<p>Borders and backgrounds are drawn around/behind empty cells (like normal cells).</p>\n"},id:3129}),
s[3130]=a({parent:s[1968],name:"font-variant-ligatures",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies control over which ligatures are enabled or disabled. A value of โnormalโ implies that the defaults set by the font are used.</p>\n"},id:3130}),
s[3131]=a({parent:s[3130],name:"additional-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of additional ligatures.</p>\n"},id:3131}),
s[3132]=a({parent:s[3130],name:"common-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of common ligatures.</p>\n"},id:3132}),
s[3133]=a({parent:s[3130],name:"contextual",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of contextual alternates.</p>\n"},id:3133}),
s[3134]=a({parent:s[3130],name:"discretionary-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of discretionary ligatures.</p>\n"},id:3134}),
s[3135]=a({parent:s[3130],name:"historical-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of historical ligatures.</p>\n"},id:3135}),
s[3136]=a({parent:s[3130],name:"no-additional-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables display of additional ligatures.</p>\n"},id:3136}),
s[3137]=a({parent:s[3130],name:"no-common-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables display of common ligatures.</p>\n"},id:3137}),
s[3138]=a({parent:s[3130],name:"no-contextual",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables display of contextual alternates.</p>\n"},id:3138}),
s[3139]=a({parent:s[3130],name:"no-discretionary-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables display of discretionary ligatures.</p>\n"},id:3139}),
s[3140]=a({parent:s[3130],name:"no-historical-ligatures",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables display of historical ligatures.</p>\n"},id:3140}),
s[3141]=a({parent:s[3130],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disables all ligatures.</p>\n"},id:3141}),
s[3142]=a({parent:s[3130],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Implies that the defaults set by the font are used.</p>\n"},id:3142}),
s[3143]=a({parent:s[1968],name:"text-decoration-skip",flags:4,mods:0,cat:2,meta:{desc:"<p>The text-decoration-skip CSS property specifies what parts of the elementโs content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.</p>\n"},id:3143}),
s[3144]=a({parent:s[1968],name:"justify-self",flags:4,mods:0,cat:2,meta:{alias:"js",desc:"<p>Defines the way of justifying a box inside its container along the appropriate axis.</p>\n"},id:3144}),
s[3145]=a({parent:s[3144],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>&quot;Flex items are packed toward the end of the line.&quot;</p>\n"},id:3145}),
s[3146]=a({parent:s[3144],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>&quot;Flex items are packed toward the start of the line.&quot;</p>\n"},id:3146}),
s[3147]=a({parent:s[3144],name:"self-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.</p>\n"},id:3147}),
s[3148]=a({parent:s[3144],name:"self-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis..</p>\n"},id:3148}),
s[3149]=a({parent:s[3144],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the center of the of the alignment container.</p>\n"},id:3149}),
s[3150]=a({parent:s[3144],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.</p>\n"},id:3150}),
s[3151]=a({parent:s[1968],name:"js",flags:4,mods:32768,cat:2,meta:{},proxy:s[3144],id:3151}),
s[3152]=a({parent:s[1968],name:"page-break-after",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines rules for page breaks after an element.</p>\n"},id:3152}),
s[3153]=a({parent:s[3152],name:"always",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break after the generated box.</p>\n"},id:3153}),
s[3154]=a({parent:s[3152],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither force nor forbid a page break after generated box.</p>\n"},id:3154}),
s[3155]=a({parent:s[3152],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break after the generated box.</p>\n"},id:3155}),
s[3156]=a({parent:s[3152],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks after the generated box so that the next page is formatted as a left page.</p>\n"},id:3156}),
s[3157]=a({parent:s[3152],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks after the generated box so that the next page is formatted as a right page.</p>\n"},id:3157}),
s[3158]=a({parent:s[1968],name:"grid-template-rows",flags:4,mods:0,cat:2,meta:{alias:"gtr",desc:"<p>specifies, as a space-separated track list, the line names and track sizing functions of the grid.</p>\n"},id:3158}),
s[3159]=a({parent:s[3158],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>There is no explicit grid; any rows/columns will be implicitly generated.</p>\n"},id:3159}),
s[3160]=a({parent:s[3158],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest min-content contribution of the grid items occupying the grid track.</p>\n"},id:3160}),
s[3161]=a({parent:s[3158],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest max-content contribution of the grid items occupying the grid track.</p>\n"},id:3161}),
s[3162]=a({parent:s[3158],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>As a maximum, identical to &#39;max-content&#39;. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.</p>\n"},id:3162}),
s[3163]=a({parent:s[3158],name:"subgrid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the grid will align to its parent grid in that axis.</p>\n"},id:3163}),
s[3164]=a({parent:s[3158],name:"minmax",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines a size range greater than or equal to min and less than or equal to max.</p>\n"},id:3164}),
s[3165]=a({parent:s[3158],name:"repeat",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.</p>\n"},id:3165}),
s[3166]=a({parent:s[1968],name:"gtr",flags:4,mods:32768,cat:2,meta:{},proxy:s[3158],id:3166}),
s[3167]=a({parent:s[1968],name:"padding-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;padding-right&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3167}),
s[3168]=a({parent:s[1968],name:"grid-gap",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by &#39;gap&#39; property.</p>\n"},id:3168}),
s[3169]=a({parent:s[1968],name:"all",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand that resets all properties except &#39;direction&#39; and &#39;unicode-bidi&#39;.</p>\n"},id:3169}),
s[3170]=a({parent:s[1968],name:"grid-column",flags:4,mods:0,cat:2,meta:{alias:"gc",desc:"<p>Shorthand for &#39;grid-column-start&#39; and &#39;grid-column-end&#39;.</p>\n"},id:3170}),
s[3171]=a({parent:s[3170],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3171}),
s[3172]=a({parent:s[3170],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3172}),
s[3173]=a({parent:s[1968],name:"gc",flags:4,mods:32768,cat:2,meta:{},proxy:s[3170],id:3173}),
s[3174]=a({parent:s[1968],name:"stroke-opacity",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the opacity of the painting operation used to stroke the current object.</p>\n"},id:3174}),
s[3175]=a({parent:s[1968],name:"margin-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;margin-left&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3175}),
s[3176]=a({parent:s[1968],name:"margin-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;margin-right&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3176}),
s[3177]=a({parent:s[1968],name:"caret-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the color of the text insertion indicator.</p>\n"},id:3177}),
s[3178]=a({parent:s[3177],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors.</p>\n"},id:3178}),
s[3179]=a({parent:s[1968],name:"orphans",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.</p>\n"},id:3179}),
s[3180]=a({parent:s[1968],name:"caption-side",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the position of the caption box with respect to the table box.</p>\n"},id:3180}),
s[3181]=a({parent:s[3180],name:"bottom",flags:8,mods:32768,cat:32,meta:{desc:"<p>Positions the caption box below the table box.</p>\n"},id:3181}),
s[3182]=a({parent:s[3180],name:"top",flags:8,mods:32768,cat:32,meta:{desc:"<p>Positions the caption box above the table box.</p>\n"},id:3182}),
s[3183]=a({parent:s[1968],name:"perspective-origin",flags:4,mods:0,cat:2,meta:{desc:"<p>Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.</p>\n"},id:3183}),
s[3184]=a({parent:s[1968],name:"stop-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates what color to use at that gradient stop.</p>\n"},id:3184}),
s[3185]=a({parent:s[1968],name:"widows",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.</p>\n"},id:3185}),
s[3186]=a({parent:s[1968],name:"scroll-behavior",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.</p>\n"},id:3186}),
s[3187]=a({parent:s[3186],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scrolls in an instant fashion.</p>\n"},id:3187}),
s[3188]=a({parent:s[3186],name:"smooth",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scrolls in a smooth fashion using a user-agent-defined timing function and time period.</p>\n"},id:3188}),
s[3189]=a({parent:s[1968],name:"grid-column-gap",flags:4,mods:0,cat:2,meta:{alias:"gcg",desc:"<p>Specifies the gutters between grid columns. Replaced by &#39;column-gap&#39; property.</p>\n"},id:3189}),
s[3190]=a({parent:s[1968],name:"gcg",flags:4,mods:32768,cat:2,meta:{},proxy:s[3189],id:3190}),
s[3191]=a({parent:s[1968],name:"columns",flags:4,mods:0,cat:2,meta:{desc:"<p>A shorthand property which sets both &#39;column-width&#39; and &#39;column-count&#39;.</p>\n"},id:3191}),
s[3192]=a({parent:s[3191],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The width depends on the values of other properties.</p>\n"},id:3192}),
s[3193]=a({parent:s[1968],name:"column-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the width of columns in multicol elements.</p>\n"},id:3193}),
s[3194]=a({parent:s[3193],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The width depends on the values of other properties.</p>\n"},id:3194}),
s[3195]=a({parent:s[1968],name:"mix-blend-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the formula that must be used to mix the colors with the backdrop.</p>\n"},id:3195}),
s[3196]=a({parent:s[3195],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Default attribute which specifies no blending</p>\n"},id:3196}),
s[3197]=a({parent:s[3195],name:"multiply",flags:8,mods:32768,cat:32,meta:{desc:"<p>The source color is multiplied by the destination color and replaces the destination.</p>\n"},id:3197}),
s[3198]=a({parent:s[3195],name:"screen",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies the complements of the backdrop and source color values, then complements the result.</p>\n"},id:3198}),
s[3199]=a({parent:s[3195],name:"overlay",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies or screens the colors, depending on the backdrop color value.</p>\n"},id:3199}),
s[3200]=a({parent:s[3195],name:"darken",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the darker of the backdrop and source colors.</p>\n"},id:3200}),
s[3201]=a({parent:s[3195],name:"lighten",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the lighter of the backdrop and source colors.</p>\n"},id:3201}),
s[3202]=a({parent:s[3195],name:"color-dodge",flags:8,mods:32768,cat:32,meta:{desc:"<p>Brightens the backdrop color to reflect the source color.</p>\n"},id:3202}),
s[3203]=a({parent:s[3195],name:"color-burn",flags:8,mods:32768,cat:32,meta:{desc:"<p>Darkens the backdrop color to reflect the source color.</p>\n"},id:3203}),
s[3204]=a({parent:s[3195],name:"hard-light",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies or screens the colors, depending on the source color value.</p>\n"},id:3204}),
s[3205]=a({parent:s[3195],name:"soft-light",flags:8,mods:32768,cat:32,meta:{desc:"<p>Darkens or lightens the colors, depending on the source color value.</p>\n"},id:3205}),
s[3206]=a({parent:s[3195],name:"difference",flags:8,mods:32768,cat:32,meta:{desc:"<p>Subtracts the darker of the two constituent colors from the lighter color..</p>\n"},id:3206}),
s[3207]=a({parent:s[3195],name:"exclusion",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces an effect similar to that of the Difference mode but lower in contrast.</p>\n"},id:3207}),
s[3208]=a({parent:s[3195],name:"hue",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.</p>\n"},id:3208}),
s[3209]=a({parent:s[3195],name:"saturation",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.</p>\n"},id:3209}),
s[3210]=a({parent:s[3195],name:"color",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.</p>\n"},id:3210}),
s[3211]=a({parent:s[3195],name:"luminosity",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.</p>\n"},id:3211}),
s[3212]=a({parent:s[1968],name:"font-kerning",flags:4,mods:0,cat:2,meta:{desc:"<p>Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.</p>\n"},id:3212}),
s[3213]=a({parent:s[3212],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies that kerning is applied at the discretion of the user agent.</p>\n"},id:3213}),
s[3214]=a({parent:s[3212],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies that kerning is not applied.</p>\n"},id:3214}),
s[3215]=a({parent:s[3212],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies that kerning is applied.</p>\n"},id:3215}),
s[3216]=a({parent:s[1968],name:"border-image-slice",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.</p>\n"},id:3216}),
s[3217]=a({parent:s[3216],name:"fill",flags:8,mods:32768,cat:32,meta:{desc:"<p>Causes the middle part of the border-image to be preserved.</p>\n"},id:3217}),
s[3218]=a({parent:s[1968],name:"border-image-repeat",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.</p>\n"},id:3218}),
s[3219]=a({parent:s[3218],name:"repeat",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area.</p>\n"},id:3219}),
s[3220]=a({parent:s[3218],name:"round",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.</p>\n"},id:3220}),
s[3221]=a({parent:s[3218],name:"space",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.</p>\n"},id:3221}),
s[3222]=a({parent:s[3218],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>The image is stretched to fill the area.</p>\n"},id:3222}),
s[3223]=a({parent:s[1968],name:"border-image-width",flags:4,mods:0,cat:2,meta:{desc:"<p>The four values of &#39;border-image-width&#39; specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.</p>\n"},id:3223}),
s[3224]=a({parent:s[3223],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead.</p>\n"},id:3224}),
s[3225]=a({parent:s[1968],name:"grid-row",flags:4,mods:0,cat:2,meta:{alias:"gr",desc:"<p>Shorthand for &#39;grid-row-start&#39; and &#39;grid-row-end&#39;.</p>\n"},id:3225}),
s[3226]=a({parent:s[3225],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3226}),
s[3227]=a({parent:s[3225],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3227}),
s[3228]=a({parent:s[1968],name:"gr",flags:4,mods:32768,cat:2,meta:{},proxy:s[3225],id:3228}),
s[3229]=a({parent:s[1968],name:"tab-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.</p>\n"},id:3229}),
s[3230]=a({parent:s[1968],name:"grid-row-gap",flags:4,mods:0,cat:2,meta:{alias:"grg",desc:"<p>Specifies the gutters between grid rows. Replaced by &#39;row-gap&#39; property.</p>\n"},id:3230}),
s[3231]=a({parent:s[1968],name:"grg",flags:4,mods:32768,cat:2,meta:{},proxy:s[3230],id:3231}),
s[3232]=a({parent:s[1968],name:"text-decoration-style",flags:4,mods:0,cat:2,meta:{alias:"tds",desc:"<p>Specifies the line style for underline, line-through and overline text decoration.</p>\n"},id:3232}),
s[3233]=a({parent:s[3232],name:"dashed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a dashed line style.</p>\n"},id:3233}),
s[3234]=a({parent:s[3232],name:"dotted",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a dotted line.</p>\n"},id:3234}),
s[3235]=a({parent:s[3232],name:"double",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a double line.</p>\n"},id:3235}),
s[3236]=a({parent:s[3232],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces no line.</p>\n"},id:3236}),
s[3237]=a({parent:s[3232],name:"solid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a solid line.</p>\n"},id:3237}),
s[3238]=a({parent:s[3232],name:"wavy",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces a wavy line.</p>\n"},id:3238}),
s[3239]=a({parent:s[1968],name:"tds",flags:4,mods:32768,cat:2,meta:{},proxy:s[3232],id:3239}),
s[3240]=a({parent:s[1968],name:"line-break",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies what set of line breaking restrictions are in effect within the element.</p>\n"},id:3240}),
s[3241]=a({parent:s[3240],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.</p>\n"},id:3241}),
s[3242]=a({parent:s[3240],name:"loose",flags:8,mods:32768,cat:32,meta:{desc:"<p>Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.</p>\n"},id:3242}),
s[3243]=a({parent:s[3240],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Breaks text using the most common set of line-breaking rules.</p>\n"},id:3243}),
s[3244]=a({parent:s[3240],name:"strict",flags:8,mods:32768,cat:32,meta:{desc:"<p>Breaks CJK scripts using a more restrictive set of line-breaking rules than &#39;normal&#39;.</p>\n"},id:3244}),
s[3245]=a({parent:s[1968],name:"border-image-outset",flags:4,mods:0,cat:2,meta:{desc:"<p>The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.</p>\n"},id:3245}),
s[3246]=a({parent:s[1968],name:"column-rule",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand for setting &#39;column-rule-width&#39;, &#39;column-rule-style&#39;, and &#39;column-rule-color&#39; at the same place in the style sheet. Omitted values are set to their initial values.</p>\n"},id:3246}),
s[3247]=a({parent:s[1968],name:"justify-items",flags:4,mods:0,cat:2,meta:{alias:"ji",desc:"<p>Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis</p>\n"},id:3247}),
s[3248]=a({parent:s[3247],name:"flex-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>&quot;Flex items are packed toward the end of the line.&quot;</p>\n"},id:3248}),
s[3249]=a({parent:s[3247],name:"flex-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>&quot;Flex items are packed toward the start of the line.&quot;</p>\n"},id:3249}),
s[3250]=a({parent:s[3247],name:"self-end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.</p>\n"},id:3250}),
s[3251]=a({parent:s[3247],name:"self-start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis..</p>\n"},id:3251}),
s[3252]=a({parent:s[3247],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The items are packed flush to each other toward the center of the of the alignment container.</p>\n"},id:3252}),
s[3253]=a({parent:s[3247],name:"stretch",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched.</p>\n"},id:3253}),
s[3254]=a({parent:s[1968],name:"ji",flags:4,mods:32768,cat:2,meta:{},proxy:s[3247],id:3254}),
s[3255]=a({parent:s[1968],name:"grid-area",flags:4,mods:0,cat:2,meta:{alias:"ga",desc:"<p>Determine a grid itemโs size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for &#39;grid-row-start&#39;, &#39;grid-column-start&#39;, &#39;grid-row-end&#39;, and &#39;grid-column-end&#39;.</p>\n"},id:3255}),
s[3256]=a({parent:s[3255],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3256}),
s[3257]=a({parent:s[3255],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3257}),
s[3258]=a({parent:s[1968],name:"ga",flags:4,mods:32768,cat:2,meta:{},proxy:s[3255],id:3258}),
s[3259]=a({parent:s[1968],name:"stroke-miterlimit",flags:4,mods:0,cat:2,meta:{desc:"<p>When two line segments meet at a sharp angle and miter joins have been specified for &#39;stroke-linejoin&#39;, it is possible for the miter to extend far beyond the thickness of the line stroking the path.</p>\n"},id:3259}),
s[3260]=a({parent:s[1968],name:"text-align-last",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes how the last line of a block or a line right before a forced line break is aligned when &#39;text-align&#39; is set to &#39;justify&#39;.</p>\n"},id:3260}),
s[3261]=a({parent:s[3260],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Content on the affected line is aligned per &#39;text-align&#39; unless &#39;text-align&#39; is set to &#39;justify&#39;, in which case it is &#39;start-aligned&#39;.</p>\n"},id:3261}),
s[3262]=a({parent:s[3260],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are centered within the line box.</p>\n"},id:3262}),
s[3263]=a({parent:s[3260],name:"justify",flags:8,mods:32768,cat:32,meta:{desc:"<p>The text is justified according to the method specified by the &#39;text-justify&#39; property.</p>\n"},id:3263}),
s[3264]=a({parent:s[3260],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the left edge of the line box. In vertical text, &#39;left&#39; aligns to the edge of the line box that would be the start edge for left-to-right text.</p>\n"},id:3264}),
s[3265]=a({parent:s[3260],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The inline contents are aligned to the right edge of the line box. In vertical text, &#39;right&#39; aligns to the edge of the line box that would be the end edge for left-to-right text.</p>\n"},id:3265}),
s[3266]=a({parent:s[1968],name:"backdrop-filter",flags:4,mods:0,cat:2,meta:{desc:"<p>The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.</p>\n"},id:3266}),
s[3267]=a({parent:s[1968],name:"grid-auto-rows",flags:4,mods:0,cat:2,meta:{alias:"gar",desc:"<p>Specifies the size of implicitly created rows.</p>\n"},id:3267}),
s[3268]=a({parent:s[3267],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest min-content contribution of the grid items occupying the grid track.</p>\n"},id:3268}),
s[3269]=a({parent:s[3267],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest max-content contribution of the grid items occupying the grid track.</p>\n"},id:3269}),
s[3270]=a({parent:s[3267],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>As a maximum, identical to &#39;max-content&#39;. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.</p>\n"},id:3270}),
s[3271]=a({parent:s[3267],name:"minmax",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines a size range greater than or equal to min and less than or equal to max.</p>\n"},id:3271}),
s[3272]=a({parent:s[1968],name:"gar",flags:4,mods:32768,cat:2,meta:{},proxy:s[3267],id:3272}),
s[3273]=a({parent:s[1968],name:"stroke-linejoin",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.</p>\n"},id:3273}),
s[3274]=a({parent:s[3273],name:"bevel",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that a bevelled corner is to be used to join path segments.</p>\n"},id:3274}),
s[3275]=a({parent:s[3273],name:"miter",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that a sharp corner is to be used to join path segments.</p>\n"},id:3275}),
s[3276]=a({parent:s[3273],name:"round",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that a round corner is to be used to join path segments.</p>\n"},id:3276}),
s[3277]=a({parent:s[1968],name:"shape-outside",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies an orthogonal rotation to be applied to an image before it is laid out.</p>\n"},id:3277}),
s[3278]=a({parent:s[3277],name:"margin-box",flags:8,mods:32768,cat:32,meta:{desc:"<p>The background is painted within (clipped to) the margin box.</p>\n"},id:3278}),
s[3279]=a({parent:s[3277],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The float area is unaffected.</p>\n"},id:3279}),
s[3280]=a({parent:s[1968],name:"text-decoration-line",flags:4,mods:0,cat:2,meta:{alias:"tdl",desc:"<p>Specifies what line decorations, if any, are added to the element.</p>\n"},id:3280}),
s[3281]=a({parent:s[3280],name:"line-through",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text has a line through the middle.</p>\n"},id:3281}),
s[3282]=a({parent:s[3280],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither produces nor inhibits text decoration.</p>\n"},id:3282}),
s[3283]=a({parent:s[3280],name:"overline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text has a line above it.</p>\n"},id:3283}),
s[3284]=a({parent:s[3280],name:"underline",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each line of text is underlined.</p>\n"},id:3284}),
s[3285]=a({parent:s[1968],name:"tdl",flags:4,mods:32768,cat:2,meta:{},proxy:s[3280],id:3285}),
s[3286]=a({parent:s[1968],name:"scroll-snap-align",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-snap-align property specifies the boxโs snap position as an alignment of its snap area (as the alignment subject) within its snap containerโs snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.</p>\n"},id:3286}),
s[3287]=a({parent:s[1968],name:"fill-rule",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.</p>\n"},id:3287}),
s[3288]=a({parent:s[3287],name:"evenodd",flags:8,mods:32768,cat:32,meta:{desc:"<p>Determines the โinsidenessโ of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses.</p>\n"},id:3288}),
s[3289]=a({parent:s[3287],name:"nonzero",flags:8,mods:32768,cat:32,meta:{desc:"<p>Determines the โinsidenessโ of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.</p>\n"},id:3289}),
s[3290]=a({parent:s[1968],name:"grid-auto-flow",flags:4,mods:0,cat:2,meta:{alias:"gaf",desc:"<p>Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.</p>\n"},id:3290}),
s[3291]=a({parent:s[3290],name:"row",flags:8,mods:32768,cat:32,meta:{desc:"<p>The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary.</p>\n"},id:3291}),
s[3292]=a({parent:s[3290],name:"column",flags:8,mods:32768,cat:32,meta:{desc:"<p>The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary.</p>\n"},id:3292}),
s[3293]=a({parent:s[3290],name:"dense",flags:8,mods:32768,cat:32,meta:{desc:"<p>If specified, the auto-placement algorithm uses a โdenseโ packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.</p>\n"},id:3293}),
s[3294]=a({parent:s[1968],name:"gaf",flags:4,mods:32768,cat:2,meta:{},proxy:s[3290],id:3294}),
s[3295]=a({parent:s[1968],name:"scroll-snap-type",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines how strictly snap points are enforced on the scroll container.</p>\n"},id:3295}),
s[3296]=a({parent:s[3295],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The visual viewport of this scroll container must ignore snap points, if any, when scrolled.</p>\n"},id:3296}),
s[3297]=a({parent:s[3295],name:"mandatory",flags:8,mods:32768,cat:32,meta:{desc:"<p>The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations.</p>\n"},id:3297}),
s[3298]=a({parent:s[3295],name:"proximity",flags:8,mods:32768,cat:32,meta:{desc:"<p>The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll.</p>\n"},id:3298}),
s[3299]=a({parent:s[1968],name:"page-break-before",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines rules for page breaks before an element.</p>\n"},id:3299}),
s[3300]=a({parent:s[3299],name:"always",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break before the generated box.</p>\n"},id:3300}),
s[3301]=a({parent:s[3299],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither force nor forbid a page break before the generated box.</p>\n"},id:3301}),
s[3302]=a({parent:s[3299],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break before the generated box.</p>\n"},id:3302}),
s[3303]=a({parent:s[3299],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before the generated box so that the next page is formatted as a left page.</p>\n"},id:3303}),
s[3304]=a({parent:s[3299],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before the generated box so that the next page is formatted as a right page.</p>\n"},id:3304}),
s[3305]=a({parent:s[1968],name:"grid-column-start",flags:4,mods:0,cat:2,meta:{alias:"gcs",desc:"<p>Determine a grid itemโs size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n"},id:3305}),
s[3306]=a({parent:s[3305],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3306}),
s[3307]=a({parent:s[3305],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3307}),
s[3308]=a({parent:s[1968],name:"gcs",flags:4,mods:32768,cat:2,meta:{},proxy:s[3305],id:3308}),
s[3309]=a({parent:s[1968],name:"grid-template-areas",flags:4,mods:0,cat:2,meta:{alias:"gta",desc:"<p>Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.</p>\n"},id:3309}),
s[3310]=a({parent:s[3309],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The grid container doesnโt define any named grid areas.</p>\n"},id:3310}),
s[3311]=a({parent:s[1968],name:"gta",flags:4,mods:32768,cat:2,meta:{},proxy:s[3309],id:3311}),
s[3312]=a({parent:s[1968],name:"break-inside",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the page/column/region break behavior inside the principal box.</p>\n"},id:3312}),
s[3313]=a({parent:s[3312],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Impose no additional breaking constraints within the box.</p>\n"},id:3313}),
s[3314]=a({parent:s[3312],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid breaks within the box.</p>\n"},id:3314}),
s[3315]=a({parent:s[3312],name:"avoid-column",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a column break within the box.</p>\n"},id:3315}),
s[3316]=a({parent:s[3312],name:"avoid-page",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break within the box.</p>\n"},id:3316}),
s[3317]=a({parent:s[1968],name:"column-fill",flags:4,mods:0,cat:2,meta:{desc:"<p>In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.</p>\n"},id:3317}),
s[3318]=a({parent:s[3317],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Fills columns sequentially.</p>\n"},id:3318}),
s[3319]=a({parent:s[3317],name:"balance",flags:8,mods:32768,cat:32,meta:{desc:"<p>Balance content equally between columns, if possible.</p>\n"},id:3319}),
s[3320]=a({parent:s[1968],name:"grid-column-end",flags:4,mods:0,cat:2,meta:{alias:"gce",desc:"<p>Determine a grid itemโs size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n"},id:3320}),
s[3321]=a({parent:s[3320],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3321}),
s[3322]=a({parent:s[3320],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3322}),
s[3323]=a({parent:s[1968],name:"gce",flags:4,mods:32768,cat:2,meta:{},proxy:s[3320],id:3323}),
s[3324]=a({parent:s[1968],name:"border-image-source",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies an image to use instead of the border styles given by the &#39;border-style&#39; properties and as an additional background layer for the element. If the value is &#39;none&#39; or if the image cannot be displayed, the border styles will be used.</p>\n"},id:3324}),
s[3325]=a({parent:s[3324],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the border styles.</p>\n"},id:3325}),
s[3326]=a({parent:s[1968],name:"overflow-anchor",flags:4,mods:0,cat:2,meta:{alias:"ofa",desc:"<p>The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts.</p>\n"},id:3326}),
s[3327]=a({parent:s[1968],name:"ofa",flags:4,mods:32768,cat:2,meta:{},proxy:s[3326],id:3327}),
s[3328]=a({parent:s[1968],name:"grid-row-start",flags:4,mods:0,cat:2,meta:{alias:"grs",desc:"<p>Determine a grid itemโs size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n"},id:3328}),
s[3329]=a({parent:s[3328],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3329}),
s[3330]=a({parent:s[3328],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3330}),
s[3331]=a({parent:s[1968],name:"grs",flags:4,mods:32768,cat:2,meta:{},proxy:s[3328],id:3331}),
s[3332]=a({parent:s[1968],name:"grid-row-end",flags:4,mods:0,cat:2,meta:{alias:"gre",desc:"<p>Determine a grid itemโs size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n"},id:3332}),
s[3333]=a({parent:s[3332],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The property contributes nothing to the grid itemโs placement, indicating auto-placement, an automatic span, or a default span of one.</p>\n"},id:3333}),
s[3334]=a({parent:s[3332],name:"span",flags:8,mods:32768,cat:32,meta:{desc:"<p>Contributes a grid span to the grid itemโs placement such that the corresponding edge of the grid itemโs grid area is N lines from its opposite edge.</p>\n"},id:3334}),
s[3335]=a({parent:s[1968],name:"gre",flags:4,mods:32768,cat:2,meta:{},proxy:s[3332],id:3335}),
s[3336]=a({parent:s[1968],name:"font-variant-numeric",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies control over numerical forms.</p>\n"},id:3336}),
s[3337]=a({parent:s[3336],name:"diagonal-fractions",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of lining diagonal fractions.</p>\n"},id:3337}),
s[3338]=a({parent:s[3336],name:"lining-nums",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of lining numerals.</p>\n"},id:3338}),
s[3339]=a({parent:s[3336],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>None of the features are enabled.</p>\n"},id:3339}),
s[3340]=a({parent:s[3336],name:"oldstyle-nums",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of old-style numerals.</p>\n"},id:3340}),
s[3341]=a({parent:s[3336],name:"ordinal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of letter forms used with ordinal numbers.</p>\n"},id:3341}),
s[3342]=a({parent:s[3336],name:"proportional-nums",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of proportional numerals.</p>\n"},id:3342}),
s[3343]=a({parent:s[3336],name:"slashed-zero",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of slashed zeros.</p>\n"},id:3343}),
s[3344]=a({parent:s[3336],name:"stacked-fractions",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of lining stacked fractions.</p>\n"},id:3344}),
s[3345]=a({parent:s[3336],name:"tabular-nums",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of tabular numerals.</p>\n"},id:3345}),
s[3346]=a({parent:s[1968],name:"background-blend-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the blending mode of each background layer.</p>\n"},id:3346}),
s[3347]=a({parent:s[3346],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Default attribute which specifies no blending</p>\n"},id:3347}),
s[3348]=a({parent:s[3346],name:"multiply",flags:8,mods:32768,cat:32,meta:{desc:"<p>The source color is multiplied by the destination color and replaces the destination.</p>\n"},id:3348}),
s[3349]=a({parent:s[3346],name:"screen",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies the complements of the backdrop and source color values, then complements the result.</p>\n"},id:3349}),
s[3350]=a({parent:s[3346],name:"overlay",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies or screens the colors, depending on the backdrop color value.</p>\n"},id:3350}),
s[3351]=a({parent:s[3346],name:"darken",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the darker of the backdrop and source colors.</p>\n"},id:3351}),
s[3352]=a({parent:s[3346],name:"lighten",flags:8,mods:32768,cat:32,meta:{desc:"<p>Selects the lighter of the backdrop and source colors.</p>\n"},id:3352}),
s[3353]=a({parent:s[3346],name:"color-dodge",flags:8,mods:32768,cat:32,meta:{desc:"<p>Brightens the backdrop color to reflect the source color.</p>\n"},id:3353}),
s[3354]=a({parent:s[3346],name:"color-burn",flags:8,mods:32768,cat:32,meta:{desc:"<p>Darkens the backdrop color to reflect the source color.</p>\n"},id:3354}),
s[3355]=a({parent:s[3346],name:"hard-light",flags:8,mods:32768,cat:32,meta:{desc:"<p>Multiplies or screens the colors, depending on the source color value.</p>\n"},id:3355}),
s[3356]=a({parent:s[3346],name:"soft-light",flags:8,mods:32768,cat:32,meta:{desc:"<p>Darkens or lightens the colors, depending on the source color value.</p>\n"},id:3356}),
s[3357]=a({parent:s[3346],name:"difference",flags:8,mods:32768,cat:32,meta:{desc:"<p>Subtracts the darker of the two constituent colors from the lighter color..</p>\n"},id:3357}),
s[3358]=a({parent:s[3346],name:"exclusion",flags:8,mods:32768,cat:32,meta:{desc:"<p>Produces an effect similar to that of the Difference mode but lower in contrast.</p>\n"},id:3358}),
s[3359]=a({parent:s[3346],name:"hue",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.</p>\n"},id:3359}),
s[3360]=a({parent:s[3346],name:"saturation",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.</p>\n"},id:3360}),
s[3361]=a({parent:s[3346],name:"color",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.</p>\n"},id:3361}),
s[3362]=a({parent:s[3346],name:"luminosity",flags:8,mods:32768,cat:32,meta:{desc:"<p>Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.</p>\n"},id:3362}),
s[3363]=a({parent:s[1968],name:"text-decoration-skip-ink",flags:4,mods:0,cat:2,meta:{alias:"tdsi",desc:"<p>The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.</p>\n"},id:3363}),
s[3364]=a({parent:s[1968],name:"tdsi",flags:4,mods:32768,cat:2,meta:{},proxy:s[3363],id:3364}),
s[3365]=a({parent:s[1968],name:"column-rule-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the color of the column rule</p>\n"},id:3365}),
s[3366]=a({parent:s[1968],name:"isolation",flags:4,mods:0,cat:2,meta:{desc:"<p>In CSS setting to &#39;isolate&#39; will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.</p>\n"},id:3366}),
s[3367]=a({parent:s[3366],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Elements are not isolated unless an operation is applied that causes the creation of a stacking context.</p>\n"},id:3367}),
s[3368]=a({parent:s[3366],name:"isolate",flags:8,mods:32768,cat:32,meta:{desc:"<p>In CSS will turn the element into a stacking context.</p>\n"},id:3368}),
s[3369]=a({parent:s[1968],name:"shape-rendering",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.</p>\n"},id:3369}),
s[3370]=a({parent:s[3369],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Suppresses aural rendering.</p>\n"},id:3370}),
s[3371]=a({parent:s[3369],name:"crispEdges",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision.</p>\n"},id:3371}),
s[3372]=a({parent:s[3369],name:"geometricPrecision",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emphasize geometric precision over speed and crisp edges.</p>\n"},id:3372}),
s[3373]=a({parent:s[3369],name:"optimizeSpeed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Emphasize rendering speed over geometric precision and crisp edges.</p>\n"},id:3373}),
s[3374]=a({parent:s[1968],name:"column-rule-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the style of the rule between columns of an element.</p>\n"},id:3374}),
s[3375]=a({parent:s[1968],name:"border-inline-end-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-right-width&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3375}),
s[3376]=a({parent:s[1968],name:"border-inline-start-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-left-width&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3376}),
s[3377]=a({parent:s[1968],name:"grid-auto-columns",flags:4,mods:0,cat:2,meta:{alias:"gac",desc:"<p>Specifies the size of implicitly created columns.</p>\n"},id:3377}),
s[3378]=a({parent:s[3377],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest min-content contribution of the grid items occupying the grid track.</p>\n"},id:3378}),
s[3379]=a({parent:s[3377],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest max-content contribution of the grid items occupying the grid track.</p>\n"},id:3379}),
s[3380]=a({parent:s[3377],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>As a maximum, identical to &#39;max-content&#39;. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.</p>\n"},id:3380}),
s[3381]=a({parent:s[3377],name:"minmax",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines a size range greater than or equal to min and less than or equal to max.</p>\n"},id:3381}),
s[3382]=a({parent:s[1968],name:"gac",flags:4,mods:32768,cat:2,meta:{},proxy:s[3377],id:3382}),
s[3383]=a({parent:s[1968],name:"writing-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>This is a shorthand property for both &#39;direction&#39; and &#39;block-progression&#39;.</p>\n"},id:3383}),
s[3384]=a({parent:s[3383],name:"horizontal-tb",flags:8,mods:32768,cat:32,meta:{desc:"<p>Top-to-bottom block flow direction. The writing mode is horizontal.</p>\n"},id:3384}),
s[3385]=a({parent:s[3383],name:"sideways-lr",flags:8,mods:32768,cat:32,meta:{desc:"<p>Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal.</p>\n"},id:3385}),
s[3386]=a({parent:s[3383],name:"sideways-rl",flags:8,mods:32768,cat:32,meta:{desc:"<p>Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal.</p>\n"},id:3386}),
s[3387]=a({parent:s[3383],name:"vertical-lr",flags:8,mods:32768,cat:32,meta:{desc:"<p>Left-to-right block flow direction. The writing mode is vertical.</p>\n"},id:3387}),
s[3388]=a({parent:s[3383],name:"vertical-rl",flags:8,mods:32768,cat:32,meta:{desc:"<p>Right-to-left block flow direction. The writing mode is vertical.</p>\n"},id:3388}),
s[3389]=a({parent:s[1968],name:"clip-rule",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.</p>\n"},id:3389}),
s[3390]=a({parent:s[3389],name:"evenodd",flags:8,mods:32768,cat:32,meta:{desc:"<p>Determines the โinsidenessโ of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses.</p>\n"},id:3390}),
s[3391]=a({parent:s[3389],name:"nonzero",flags:8,mods:32768,cat:32,meta:{desc:"<p>Determines the โinsidenessโ of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.</p>\n"},id:3391}),
s[3392]=a({parent:s[1968],name:"font-variant-caps",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies control over capitalized forms.</p>\n"},id:3392}),
s[3393]=a({parent:s[3392],name:"all-petite-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of petite capitals for both upper and lowercase letters.</p>\n"},id:3393}),
s[3394]=a({parent:s[3392],name:"all-small-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of small capitals for both upper and lowercase letters.</p>\n"},id:3394}),
s[3395]=a({parent:s[3392],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>None of the features are enabled.</p>\n"},id:3395}),
s[3396]=a({parent:s[3392],name:"petite-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of petite capitals.</p>\n"},id:3396}),
s[3397]=a({parent:s[3392],name:"small-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.</p>\n"},id:3397}),
s[3398]=a({parent:s[3392],name:"titling-caps",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of titling capitals.</p>\n"},id:3398}),
s[3399]=a({parent:s[3392],name:"unicase",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of mixture of small capitals for uppercase letters with normal lowercase letters.</p>\n"},id:3399}),
s[3400]=a({parent:s[1968],name:"text-anchor",flags:4,mods:0,cat:2,meta:{desc:"<p>Used to align (start-, middle- or end-alignment) a string of text relative to a given point.</p>\n"},id:3400}),
s[3401]=a({parent:s[3400],name:"end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position.</p>\n"},id:3401}),
s[3402]=a({parent:s[3400],name:"middle",flags:8,mods:32768,cat:32,meta:{desc:"<p>The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position.</p>\n"},id:3402}),
s[3403]=a({parent:s[3400],name:"start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position.</p>\n"},id:3403}),
s[3404]=a({parent:s[1968],name:"stop-opacity",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the opacity of a given gradient stop.</p>\n"},id:3404}),
s[3405]=a({parent:s[1968],name:"mask",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points.</p>\n"},id:3405}),
s[3406]=a({parent:s[1968],name:"column-span",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the page/column break behavior after the generated box.</p>\n"},id:3406}),
s[3407]=a({parent:s[3406],name:"all",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear.</p>\n"},id:3407}),
s[3408]=a({parent:s[3406],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element does not span multiple columns.</p>\n"},id:3408}),
s[3409]=a({parent:s[1968],name:"font-variant-east-asian",flags:4,mods:0,cat:2,meta:{desc:"<p>Allows control of glyph substitute and positioning in East Asian text.</p>\n"},id:3409}),
s[3410]=a({parent:s[3409],name:"full-width",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of full-width variants.</p>\n"},id:3410}),
s[3411]=a({parent:s[3409],name:"jis04",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of JIS04 forms.</p>\n"},id:3411}),
s[3412]=a({parent:s[3409],name:"jis78",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of JIS78 forms.</p>\n"},id:3412}),
s[3413]=a({parent:s[3409],name:"jis83",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of JIS83 forms.</p>\n"},id:3413}),
s[3414]=a({parent:s[3409],name:"jis90",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of JIS90 forms.</p>\n"},id:3414}),
s[3415]=a({parent:s[3409],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>None of the features are enabled.</p>\n"},id:3415}),
s[3416]=a({parent:s[3409],name:"proportional-width",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of proportionally-spaced variants.</p>\n"},id:3416}),
s[3417]=a({parent:s[3409],name:"ruby",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of ruby variant glyphs.</p>\n"},id:3417}),
s[3418]=a({parent:s[3409],name:"simplified",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of simplified forms.</p>\n"},id:3418}),
s[3419]=a({parent:s[3409],name:"traditional",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables rendering of traditional forms.</p>\n"},id:3419}),
s[3420]=a({parent:s[1968],name:"text-underline-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear &#39;over&#39; (to the right of) the affected run of text</p>\n"},id:3420}),
s[3421]=a({parent:s[3420],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent may use any algorithm to determine the underlineโs position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over.</p>\n"},id:3421}),
s[3422]=a({parent:s[3420],name:"below",flags:8,mods:32768,cat:32,meta:{desc:"<p>The underline is aligned with the under edge of the elementโs content box.</p>\n"},id:3422}),
s[3423]=a({parent:s[1968],name:"break-after",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the page/column/region break behavior after the generated box.</p>\n"},id:3423}),
s[3424]=a({parent:s[3423],name:"always",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break before/after the generated box.</p>\n"},id:3424}),
s[3425]=a({parent:s[3423],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither force nor forbid a page/column break before/after the principal box.</p>\n"},id:3425}),
s[3426]=a({parent:s[3423],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a break before/after the principal box.</p>\n"},id:3426}),
s[3427]=a({parent:s[3423],name:"avoid-column",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a column break before/after the principal box.</p>\n"},id:3427}),
s[3428]=a({parent:s[3423],name:"avoid-page",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break before/after the principal box.</p>\n"},id:3428}),
s[3429]=a({parent:s[3423],name:"column",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a column break before/after the principal box.</p>\n"},id:3429}),
s[3430]=a({parent:s[3423],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.</p>\n"},id:3430}),
s[3431]=a({parent:s[3423],name:"page",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break before/after the principal box.</p>\n"},id:3431}),
s[3432]=a({parent:s[3423],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.</p>\n"},id:3432}),
s[3433]=a({parent:s[1968],name:"break-before",flags:4,mods:0,cat:2,meta:{desc:"<p>Describes the page/column/region break behavior before the generated box.</p>\n"},id:3433}),
s[3434]=a({parent:s[3433],name:"always",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break before/after the generated box.</p>\n"},id:3434}),
s[3435]=a({parent:s[3433],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Neither force nor forbid a page/column break before/after the principal box.</p>\n"},id:3435}),
s[3436]=a({parent:s[3433],name:"avoid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a break before/after the principal box.</p>\n"},id:3436}),
s[3437]=a({parent:s[3433],name:"avoid-column",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a column break before/after the principal box.</p>\n"},id:3437}),
s[3438]=a({parent:s[3433],name:"avoid-page",flags:8,mods:32768,cat:32,meta:{desc:"<p>Avoid a page break before/after the principal box.</p>\n"},id:3438}),
s[3439]=a({parent:s[3433],name:"column",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a column break before/after the principal box.</p>\n"},id:3439}),
s[3440]=a({parent:s[3433],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before/after the generated box so that the next page is formatted as a left page.</p>\n"},id:3440}),
s[3441]=a({parent:s[3433],name:"page",flags:8,mods:32768,cat:32,meta:{desc:"<p>Always force a page break before/after the principal box.</p>\n"},id:3441}),
s[3442]=a({parent:s[3433],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>Force one or two page breaks before/after the generated box so that the next page is formatted as a right page.</p>\n"},id:3442}),
s[3443]=a({parent:s[1968],name:"mask-type",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.</p>\n"},id:3443}),
s[3444]=a({parent:s[3443],name:"alpha",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the alpha values of the mask should be used.</p>\n"},id:3444}),
s[3445]=a({parent:s[3443],name:"luminance",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the luminance values of the mask should be used.</p>\n"},id:3445}),
s[3446]=a({parent:s[1968],name:"column-rule-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the width of the rule between columns. Negative values are not allowed.</p>\n"},id:3446}),
s[3447]=a({parent:s[1968],name:"row-gap",flags:4,mods:0,cat:2,meta:{alias:"rg",desc:"<p>The row-gap CSS property specifies the gutter between grid rows.</p>\n"},id:3447}),
s[3448]=a({parent:s[1968],name:"rg",flags:4,mods:32768,cat:2,meta:{},proxy:s[3447],id:3448}),
s[3449]=a({parent:s[1968],name:"text-orientation",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the orientation of text within a line.</p>\n"},id:3449}),
s[3450]=a({parent:s[3449],name:"sideways",flags:8,mods:32768,cat:32,meta:{desc:"<p>This value is equivalent to &#39;sideways-right&#39; in &#39;vertical-rl&#39; writing mode and equivalent to &#39;sideways-left&#39; in &#39;vertical-lr&#39; writing mode.</p>\n"},id:3450}),
s[3451]=a({parent:s[3449],name:"sideways-right",flags:8,mods:32768,cat:32,meta:{desc:"<p>In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90ยฐ clockwise.</p>\n"},id:3451}),
s[3452]=a({parent:s[3449],name:"upright",flags:8,mods:32768,cat:32,meta:{desc:"<p>In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation.</p>\n"},id:3452}),
s[3453]=a({parent:s[1968],name:"scroll-padding",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands.</p>\n"},id:3453}),
s[3454]=a({parent:s[1968],name:"grid-template",flags:4,mods:0,cat:2,meta:{alias:"gt",desc:"<p>Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.</p>\n"},id:3454}),
s[3455]=a({parent:s[3454],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets all three properties to their initial values.</p>\n"},id:3455}),
s[3456]=a({parent:s[3454],name:"min-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest min-content contribution of the grid items occupying the grid track.</p>\n"},id:3456}),
s[3457]=a({parent:s[3454],name:"max-content",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents the largest max-content contribution of the grid items occupying the grid track.</p>\n"},id:3457}),
s[3458]=a({parent:s[3454],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>As a maximum, identical to &#39;max-content&#39;. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.</p>\n"},id:3458}),
s[3459]=a({parent:s[3454],name:"subgrid",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets &#39;grid-template-rows&#39; and &#39;grid-template-columns&#39; to &#39;subgrid&#39;, and &#39;grid-template-areas&#39; to its initial value.</p>\n"},id:3459}),
s[3460]=a({parent:s[3454],name:"minmax",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines a size range greater than or equal to min and less than or equal to max.</p>\n"},id:3460}),
s[3461]=a({parent:s[3454],name:"repeat",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.</p>\n"},id:3461}),
s[3462]=a({parent:s[1968],name:"gt",flags:4,mods:32768,cat:2,meta:{},proxy:s[3454],id:3462}),
s[3463]=a({parent:s[1968],name:"border-inline-end-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-right-color&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3463}),
s[3464]=a({parent:s[1968],name:"border-inline-start-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-left-color&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3464}),
s[3465]=a({parent:s[1968],name:"scroll-snap-stop",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-snap-stop CSS property defines whether the scroll container is allowed to &quot;pass over&quot; possible snap positions.</p>\n"},id:3465}),
s[3466]=a({parent:s[1968],name:"shape-margin",flags:4,mods:0,cat:2,meta:{desc:"<p>Adds a margin to a &#39;shape-outside&#39;. This defines a new shape that is the smallest contour that includes all the points that are the &#39;shape-margin&#39; distance outward in the perpendicular direction from a point on the underlying shape.</p>\n"},id:3466}),
s[3467]=a({parent:s[1968],name:"shape-image-threshold",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.</p>\n"},id:3467}),
s[3468]=a({parent:s[1968],name:"gap",flags:4,mods:0,cat:2,meta:{alias:"g",desc:"<p>The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns.</p>\n"},id:3468}),
s[3469]=a({parent:s[1968],name:"g",flags:4,mods:32768,cat:2,meta:{},proxy:s[3468],id:3469}),
s[3470]=a({parent:s[1968],name:"min-inline-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;min-height&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3470}),
s[3471]=a({parent:s[1968],name:"image-orientation",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies an orthogonal rotation to be applied to an image before it is laid out.</p>\n"},id:3471}),
s[3472]=a({parent:s[3471],name:"flip",flags:8,mods:32768,cat:32,meta:{desc:"<p>After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted.</p>\n"},id:3472}),
s[3473]=a({parent:s[3471],name:"from-image",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image.</p>\n"},id:3473}),
s[3474]=a({parent:s[1968],name:"inline-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;height&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3474}),
s[3475]=a({parent:s[3474],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Depends on the values of other properties.</p>\n"},id:3475}),
s[3476]=a({parent:s[1968],name:"padding-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;padding-top&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3476}),
s[3477]=a({parent:s[1968],name:"padding-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;padding-bottom&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3477}),
s[3478]=a({parent:s[1968],name:"text-combine-upright",flags:4,mods:0,cat:2,meta:{desc:"<p>The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.</p>\n<p>This is used to produce an effect that is known as tate-chลซ-yoko (็ธฆไธญๆจช) in Japanese, or as ็ดๆธๆฉซๅ in Chinese.</p>\n"},id:3478}),
s[3479]=a({parent:s[1968],name:"block-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;width&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3479}),
s[3480]=a({parent:s[3479],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Depends on the values of other properties.</p>\n"},id:3480}),
s[3481]=a({parent:s[1968],name:"min-block-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;min-width&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3481}),
s[3482]=a({parent:s[1968],name:"scroll-padding-top",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3482}),
s[3483]=a({parent:s[1968],name:"border-inline-end-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-right-style&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3483}),
s[3484]=a({parent:s[1968],name:"border-block-start-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-top-width&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3484}),
s[3485]=a({parent:s[1968],name:"border-block-end-width",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-bottom-width&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3485}),
s[3486]=a({parent:s[1968],name:"border-block-end-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-bottom-color&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3486}),
s[3487]=a({parent:s[1968],name:"border-inline-start-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-left-style&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3487}),
s[3488]=a({parent:s[1968],name:"border-block-start-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-top-color&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3488}),
s[3489]=a({parent:s[1968],name:"border-block-end-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-bottom-style&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3489}),
s[3490]=a({parent:s[1968],name:"border-block-start-style",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-top-style&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3490}),
s[3491]=a({parent:s[1968],name:"font-variation-settings",flags:4,mods:0,cat:2,meta:{desc:"<p>The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values.</p>\n"},id:3491}),
s[3492]=a({parent:s[1968],name:"paint-order",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.</p>\n"},id:3492}),
s[3493]=a({parent:s[3492],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element is painted with the standard order of painting operations: the &#39;fill&#39; is painted first, then its &#39;stroke&#39; and finally its markers.</p>\n"},id:3493}),
s[3494]=a({parent:s[1968],name:"color-interpolation-filters",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the color space for imaging operations performed via filter effects.</p>\n"},id:3494}),
s[3495]=a({parent:s[3494],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Color operations are not required to occur in a particular color space.</p>\n"},id:3495}),
s[3496]=a({parent:s[3494],name:"linearRGB",flags:8,mods:32768,cat:32,meta:{desc:"<p>Color operations should occur in the linearized RGB color space.</p>\n"},id:3496}),
s[3497]=a({parent:s[3494],name:"sRGB",flags:8,mods:32768,cat:32,meta:{desc:"<p>Color operations should occur in the sRGB color space.</p>\n"},id:3497}),
s[3498]=a({parent:s[1968],name:"marker-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the marker that will be drawn at the last vertices of the given markable element.</p>\n"},id:3498}),
s[3499]=a({parent:s[3498],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that no marker symbol will be drawn at the given vertex or vertices.</p>\n"},id:3499}),
s[3500]=a({parent:s[3498],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Indicates that the <marker> element referenced will be used.</p>\n"},id:3500}),
s[3501]=a({parent:s[1968],name:"scroll-padding-left",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3501}),
s[3502]=a({parent:s[1968],name:"flood-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates what color to use to flood the current filter primitive subregion.</p>\n"},id:3502}),
s[3503]=a({parent:s[1968],name:"flood-opacity",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates what opacity to use to flood the current filter primitive subregion.</p>\n"},id:3503}),
s[3504]=a({parent:s[1968],name:"lighting-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the color of the light source for filter primitives &#39;feDiffuseLighting&#39; and &#39;feSpecularLighting&#39;.</p>\n"},id:3504}),
s[3505]=a({parent:s[1968],name:"marker-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the marker that will be drawn at the first vertices of the given markable element.</p>\n"},id:3505}),
s[3506]=a({parent:s[3505],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that no marker symbol will be drawn at the given vertex or vertices.</p>\n"},id:3506}),
s[3507]=a({parent:s[3505],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Indicates that the <marker> element referenced will be used.</p>\n"},id:3507}),
s[3508]=a({parent:s[1968],name:"marker-mid",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the marker that will be drawn at all vertices except the first and last.</p>\n"},id:3508}),
s[3509]=a({parent:s[3508],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that no marker symbol will be drawn at the given vertex or vertices.</p>\n"},id:3509}),
s[3510]=a({parent:s[3508],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Indicates that the <marker> element referenced will be used.</p>\n"},id:3510}),
s[3511]=a({parent:s[1968],name:"marker",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given โpathโ element or basic shape.</p>\n"},id:3511}),
s[3512]=a({parent:s[3511],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that no marker symbol will be drawn at the given vertex or vertices.</p>\n"},id:3512}),
s[3513]=a({parent:s[3511],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Indicates that the <marker> element referenced will be used.</p>\n"},id:3513}),
s[3514]=a({parent:s[1968],name:"offset-path",flags:4,mods:0,cat:2,meta:{desc:"<p>The offset-path CSS property specifies the offset path where the element gets positioned. The exact elementโs position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of &quot;0&quot; for offset-distance and an initial direction which specifies the rotation of the object to the initial position.</p>\n<p>In this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the objectโs local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied.</p>\n"},id:3514}),
s[3515]=a({parent:s[1968],name:"offset-rotate",flags:4,mods:0,cat:2,meta:{desc:"<p>The offset-rotate CSS property defines the direction of the element while positioning along the offset path.</p>\n"},id:3515}),
s[3516]=a({parent:s[1968],name:"offset-distance",flags:4,mods:0,cat:2,meta:{desc:"<p>The offset-distance CSS property specifies a position along an offset-path.</p>\n"},id:3516}),
s[3517]=a({parent:s[1968],name:"transform-box",flags:4,mods:0,cat:2,meta:{desc:"<p>The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate.</p>\n"},id:3517}),
s[3518]=a({parent:s[1968],name:"max-inline-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;max-height&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3518}),
s[3519]=a({parent:s[3518],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No limit on the height of the box.</p>\n"},id:3519}),
s[3520]=a({parent:s[1968],name:"max-block-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;max-width&#39;. Mapping depends on the elementโs &#39;writing-mode&#39;.</p>\n"},id:3520}),
s[3521]=a({parent:s[3520],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No limit on the width of the box.</p>\n"},id:3521}),
s[3522]=a({parent:s[1968],name:"ruby-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.</p>\n"},id:3522}),
s[3523]=a({parent:s[3522],name:"after",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text.</p>\n"},id:3523}),
s[3524]=a({parent:s[3522],name:"before",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems.</p>\n"},id:3524}),
s[3525]=a({parent:s[3522],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text appears on the right of the base. Unlike &#39;before&#39; and &#39;after&#39;, this value is not relative to the text flow direction.</p>\n"},id:3525}),
s[3526]=a({parent:s[1968],name:"scroll-padding-right",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3526}),
s[3527]=a({parent:s[1968],name:"scroll-padding-bottom",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3527}),
s[3528]=a({parent:s[1968],name:"scroll-padding-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3528}),
s[3529]=a({parent:s[1968],name:"scroll-padding-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3529}),
s[3530]=a({parent:s[1968],name:"scroll-padding-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3530}),
s[3531]=a({parent:s[1968],name:"scroll-padding-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"},id:3531}),
s[3532]=a({parent:s[1968],name:"font-optical-sizing",flags:4,mods:0,cat:2,meta:{desc:"<p>The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis.</p>\n"},id:3532}),
s[3533]=a({parent:s[1968],name:"grid",flags:4,mods:0,cat:2,meta:{desc:"<p>The grid CSS property is a shorthand property that sets all of the explicit grid properties (&#39;grid-template-rows&#39;, &#39;grid-template-columns&#39;, and &#39;grid-template-areas&#39;), and all the implicit grid properties (&#39;grid-auto-rows&#39;, &#39;grid-auto-columns&#39;, and &#39;grid-auto-flow&#39;), in a single declaration.</p>\n"},id:3533}),
s[3534]=a({parent:s[1968],name:"border-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-left&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3534}),
s[3535]=a({parent:s[1968],name:"border-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-right&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3535}),
s[3536]=a({parent:s[1968],name:"border-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-bottom&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3536}),
s[3537]=a({parent:s[1968],name:"offset",flags:4,mods:0,cat:2,meta:{desc:"<p>The offset CSS property is a shorthand property for animating an element along a defined path.</p>\n"},id:3537}),
s[3538]=a({parent:s[1968],name:"border-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;border-top&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3538}),
s[3539]=a({parent:s[1968],name:"scroll-padding-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension.</p>\n"},id:3539}),
s[3540]=a({parent:s[1968],name:"scroll-padding-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension.</p>\n"},id:3540}),
s[3541]=a({parent:s[1968],name:"overscroll-behavior-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The overscroll-behavior-block CSS property sets the browser&#39;s behavior when the block direction boundary of a scrolling area is reached.</p>\n"},id:3541}),
s[3542]=a({parent:s[1968],name:"overscroll-behavior-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The overscroll-behavior-inline CSS property sets the browser&#39;s behavior when the inline direction boundary of a scrolling area is reached.</p>\n"},id:3542}),
s[3543]=a({parent:s[1968],name:"motion",flags:4,mods:0,cat:2,meta:{desc:"<p>Shorthand property for setting &#39;motion-path&#39;, &#39;motion-offset&#39; and &#39;motion-rotation&#39;.</p>\n"},id:3543}),
s[3544]=a({parent:s[3543],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No motion path gets created.</p>\n"},id:3544}),
s[3545]=a({parent:s[3543],name:"path",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines an SVG path as a string, with optional &#39;fill-rule&#39; as the first argument.</p>\n"},id:3545}),
s[3546]=a({parent:s[3543],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the object is rotated by the angle of the direction of the motion path.</p>\n"},id:3546}),
s[3547]=a({parent:s[3543],name:"reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees.</p>\n"},id:3547}),
s[3548]=a({parent:s[1968],name:"font-size-adjust",flags:4,mods:0,cat:2,meta:{desc:"<p>Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.</p>\n"},id:3548}),
s[3549]=a({parent:s[3548],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Do not preserve the fontโs x-height.</p>\n"},id:3549}),
s[3550]=a({parent:s[1968],name:"inset",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3550}),
s[3551]=a({parent:s[1968],name:"text-justify",flags:4,mods:0,cat:2,meta:{desc:"<p>Selects the justification algorithm used when &#39;text-align&#39; is set to &#39;justify&#39;. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.</p>\n"},id:3551}),
s[3552]=a({parent:s[3551],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality.</p>\n"},id:3552}),
s[3553]=a({parent:s[3551],name:"distribute",flags:8,mods:32768,cat:32,meta:{desc:"<p>Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the &#39;text-align-last&#39; property.</p>\n"},id:3553}),
s[3554]=a({parent:s[3551],name:"inter-cluster",flags:8,mods:32768,cat:32,meta:{desc:"<p>Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai.</p>\n"},id:3554}),
s[3555]=a({parent:s[3551],name:"inter-ideograph",flags:8,mods:32768,cat:32,meta:{desc:"<p>Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages.</p>\n"},id:3555}),
s[3556]=a({parent:s[3551],name:"inter-word",flags:8,mods:32768,cat:32,meta:{desc:"<p>Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean.</p>\n"},id:3556}),
s[3557]=a({parent:s[3551],name:"kashida",flags:8,mods:32768,cat:32,meta:{desc:"<p>Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation.</p>\n"},id:3557}),
s[3558]=a({parent:s[1968],name:"motion-path",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the motion path the element gets positioned at.</p>\n"},id:3558}),
s[3559]=a({parent:s[3558],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No motion path gets created.</p>\n"},id:3559}),
s[3560]=a({parent:s[3558],name:"path",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines an SVG path as a string, with optional &#39;fill-rule&#39; as the first argument.</p>\n"},id:3560}),
s[3561]=a({parent:s[1968],name:"inset-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3561}),
s[3562]=a({parent:s[1968],name:"inset-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3562}),
s[3563]=a({parent:s[1968],name:"translate",flags:4,mods:0,cat:2,meta:{desc:"<p>The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.</p>\n"},id:3563}),
s[3564]=a({parent:s[1968],name:"offset-anchor",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path.</p>\n"},id:3564}),
s[3565]=a({parent:s[1968],name:"offset-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored.</p>\n"},id:3565}),
s[3566]=a({parent:s[1968],name:"padding-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"},id:3566}),
s[3567]=a({parent:s[1968],name:"orientation",flags:4,mods:0,cat:2,meta:{desc:"<p>The orientation CSS @media media feature can be used to apply styles based on the orientation of the viewport (or the page box, for paged media).</p>\n"},id:3567}),
s[3568]=a({parent:s[1968],name:"user-zoom",flags:4,mods:0,cat:2,meta:{desc:"<p>The user-zoom CSS descriptor controls whether or not the user can change the zoom factor of a document defined by @viewport.</p>\n"},id:3568}),
s[3569]=a({parent:s[1968],name:"margin-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"},id:3569}),
s[3570]=a({parent:s[1968],name:"margin-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"},id:3570}),
s[3571]=a({parent:s[1968],name:"padding-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"},id:3571}),
s[3572]=a({parent:s[1968],name:"inset-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3572}),
s[3573]=a({parent:s[1968],name:"inset-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3573}),
s[3574]=a({parent:s[1968],name:"border-block-color",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3574}),
s[3575]=a({parent:s[1968],name:"border-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.</p>\n"},id:3575}),
s[3576]=a({parent:s[1968],name:"border-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.</p>\n"},id:3576}),
s[3577]=a({parent:s[1968],name:"inset-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3577}),
s[3578]=a({parent:s[1968],name:"inset-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3578}),
s[3579]=a({parent:s[1968],name:"enable-background",flags:4,mods:0,cat:2,meta:{desc:"<p>Deprecated. Use &#39;isolation&#39; property instead when support allows. Specifies how the accumulation of the background image is managed.</p>\n"},id:3579}),
s[3580]=a({parent:s[3579],name:"accumulate",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent&#39;s background image and onto the target.</p>\n"},id:3580}),
s[3581]=a({parent:s[3579],name:"new",flags:8,mods:32768,cat:32,meta:{desc:"<p>Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent&#39;s background image canvas in addition to the target device.</p>\n"},id:3581}),
s[3582]=a({parent:s[1968],name:"glyph-orientation-horizontal",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls glyph orientation when the inline-progression-direction is horizontal.</p>\n"},id:3582}),
s[3583]=a({parent:s[1968],name:"glyph-orientation-vertical",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls glyph orientation when the inline-progression-direction is vertical.</p>\n"},id:3583}),
s[3584]=a({parent:s[3583],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation.</p>\n"},id:3584}),
s[3585]=a({parent:s[1968],name:"kerning",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.</p>\n"},id:3585}),
s[3586]=a({parent:s[3585],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used.</p>\n"},id:3586}),
s[3587]=a({parent:s[1968],name:"image-resolution",flags:4,mods:0,cat:2,meta:{desc:"<p>The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the imageโs intrinsic dimensions.</p>\n"},id:3587}),
s[3588]=a({parent:s[1968],name:"max-zoom",flags:4,mods:0,cat:2,meta:{desc:"<p>The max-zoom CSS descriptor sets the maximum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom in any further than this, whether automatically or at the user&#39;s request.</p>\n<p>A zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out.</p>\n"},id:3588}),
s[3589]=a({parent:s[1968],name:"min-zoom",flags:4,mods:0,cat:2,meta:{desc:"<p>The min-zoom CSS descriptor sets the minimum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom out any further than this, whether automatically or at the user&#39;s request.</p>\n<p>A zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out.</p>\n"},id:3589}),
s[3590]=a({parent:s[1968],name:"motion-offset",flags:4,mods:0,cat:2,meta:{desc:"<p>A distance that describes the position along the specified motion path.</p>\n"},id:3590}),
s[3591]=a({parent:s[1968],name:"motion-rotation",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the direction of the element while positioning along the motion path.</p>\n"},id:3591}),
s[3592]=a({parent:s[3591],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the object is rotated by the angle of the direction of the motion path.</p>\n"},id:3592}),
s[3593]=a({parent:s[3591],name:"reverse",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees.</p>\n"},id:3593}),
s[3594]=a({parent:s[1968],name:"scroll-snap-points-x",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the positioning of snap points along the x axis of the scroll container it is applied to.</p>\n"},id:3594}),
s[3595]=a({parent:s[3594],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No snap points are defined by this scroll container.</p>\n"},id:3595}),
s[3596]=a({parent:s[3594],name:"repeat",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines an interval at which snap points are defined, starting from the containerโs relevant start edge.</p>\n"},id:3596}),
s[3597]=a({parent:s[1968],name:"scroll-snap-points-y",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the positioning of snap points along the y axis of the scroll container it is applied to.</p>\n"},id:3597}),
s[3598]=a({parent:s[3597],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No snap points are defined by this scroll container.</p>\n"},id:3598}),
s[3599]=a({parent:s[3597],name:"repeat",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Defines an interval at which snap points are defined, starting from the containerโs relevant start edge.</p>\n"},id:3599}),
s[3600]=a({parent:s[1968],name:"scroll-snap-coordinate",flags:4,mods:0,cat:2,meta:{desc:"<p>Defines the x and y coordinate within the element which will align with the nearest ancestor scroll containerโs snap-destination for the respective axis.</p>\n"},id:3600}),
s[3601]=a({parent:s[3600],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Specifies that this element does not contribute a snap point.</p>\n"},id:3601}),
s[3602]=a({parent:s[1968],name:"scroll-snap-destination",flags:4,mods:0,cat:2,meta:{desc:"<p>Define the x and y coordinate within the scroll containerโs visual viewport which element snap points will align with.</p>\n"},id:3602}),
s[3603]=a({parent:s[1968],name:"viewport-fit",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"},id:3603}),
s[3604]=a({parent:s[1968],name:"border-block-style",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3604}),
s[3605]=a({parent:s[1968],name:"border-block-width",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3605}),
s[3606]=a({parent:s[1968],name:"border-inline-color",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3606}),
s[3607]=a({parent:s[1968],name:"border-inline-style",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3607}),
s[3608]=a({parent:s[1968],name:"border-inline-width",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"},id:3608}),
s[3609]=a({parent:s[1968],name:"overflow-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis.</p>\n"},id:3609}),
s[3610]=a({parent:s[1968],name:"additive-symbols",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is &#39;additive&#39;.</p>\n"},id:3610}),
s[3611]=a({parent:s[1968],name:"alt",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.</p>\n"},id:3611}),
s[3612]=a({parent:s[1968],name:"behavior",flags:4,mods:0,cat:2,meta:{desc:"<p>IE only. Used to extend behaviors of the browser.</p>\n"},id:3612}),
s[3613]=a({parent:s[1968],name:"box-decoration-break",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.</p>\n"},id:3613}),
s[3614]=a({parent:s[3613],name:"clone",flags:8,mods:32768,cat:32,meta:{desc:"<p>Each box is independently wrapped with the border and padding.</p>\n"},id:3614}),
s[3615]=a({parent:s[3613],name:"slice",flags:8,mods:32768,cat:32,meta:{desc:"<p>The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward.</p>\n"},id:3615}),
s[3616]=a({parent:s[1968],name:"fallback",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies a fallback counter style to be used when the current counter style canโt create a representation for a given counter value.</p>\n"},id:3616}),
s[3617]=a({parent:s[1968],name:"font-language-override",flags:4,mods:0,cat:2,meta:{desc:"<p>The value of &#39;normal&#39; implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.</p>\n"},id:3617}),
s[3618]=a({parent:s[3617],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.</p>\n"},id:3618}),
s[3619]=a({parent:s[1968],name:"font-synthesis",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.</p>\n"},id:3619}),
s[3620]=a({parent:s[3619],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Disallow all synthetic faces.</p>\n"},id:3620}),
s[3621]=a({parent:s[3619],name:"style",flags:8,mods:32768,cat:32,meta:{desc:"<p>Allow synthetic italic faces.</p>\n"},id:3621}),
s[3622]=a({parent:s[3619],name:"weight",flags:8,mods:32768,cat:32,meta:{desc:"<p>Allow synthetic bold faces.</p>\n"},id:3622}),
s[3623]=a({parent:s[1968],name:"font-variant-alternates",flags:4,mods:0,cat:2,meta:{desc:"<p>For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.</p>\n"},id:3623}),
s[3624]=a({parent:s[3623],name:"annotation",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables display of alternate annotation forms.</p>\n"},id:3624}),
s[3625]=a({parent:s[3623],name:"character-variant",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables display of specific character variants.</p>\n"},id:3625}),
s[3626]=a({parent:s[3623],name:"historical-forms",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of historical forms.</p>\n"},id:3626}),
s[3627]=a({parent:s[3623],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>None of the features are enabled.</p>\n"},id:3627}),
s[3628]=a({parent:s[3623],name:"ornaments",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables replacement of default glyphs with ornaments, if provided in the font.</p>\n"},id:3628}),
s[3629]=a({parent:s[3623],name:"styleset",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables display with stylistic sets.</p>\n"},id:3629}),
s[3630]=a({parent:s[3623],name:"stylistic",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables display of stylistic alternates.</p>\n"},id:3630}),
s[3631]=a({parent:s[3623],name:"swash",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Enables display of swash glyphs.</p>\n"},id:3631}),
s[3632]=a({parent:s[1968],name:"font-variant-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the vertical position</p>\n"},id:3632}),
s[3633]=a({parent:s[3632],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>None of the features are enabled.</p>\n"},id:3633}),
s[3634]=a({parent:s[3632],name:"sub",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of subscript variants (OpenType feature: subs).</p>\n"},id:3634}),
s[3635]=a({parent:s[3632],name:"super",flags:8,mods:32768,cat:32,meta:{desc:"<p>Enables display of superscript variants (OpenType feature: sups).</p>\n"},id:3635}),
s[3636]=a({parent:s[1968],name:"ime-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>Controls the state of the input method editor for text fields.</p>\n"},id:3636}),
s[3637]=a({parent:s[3636],name:"active",flags:8,mods:32768,cat:32,meta:{desc:"<p>The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it.</p>\n"},id:3637}),
s[3638]=a({parent:s[3636],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>No change is made to the current input method editor state. This is the default.</p>\n"},id:3638}),
s[3639]=a({parent:s[3636],name:"disabled",flags:8,mods:32768,cat:32,meta:{desc:"<p>The input method editor is disabled and may not be activated by the user.</p>\n"},id:3639}),
s[3640]=a({parent:s[3636],name:"inactive",flags:8,mods:32768,cat:32,meta:{desc:"<p>The input method editor is initially inactive, but the user may activate it if they wish.</p>\n"},id:3640}),
s[3641]=a({parent:s[3636],name:"normal",flags:8,mods:32768,cat:32,meta:{desc:"<p>The IME state should be normal; this value can be used in a user style sheet to override the page setting.</p>\n"},id:3641}),
s[3642]=a({parent:s[1968],name:"mask-image",flags:4,mods:0,cat:2,meta:{desc:"<p>Sets the mask layer image of an element.</p>\n"},id:3642}),
s[3643]=a({parent:s[3642],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>Counts as a transparent black image layer.</p>\n"},id:3643}),
s[3644]=a({parent:s[3642],name:"url",flags:8192,mods:32768,cat:32,meta:{desc:"<p>Reference to a &lt;mask element or to a CSS image.</p>\n"},id:3644}),
s[3645]=a({parent:s[1968],name:"mask-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>Indicates whether the mask layer image is treated as luminance mask or alpha mask.</p>\n"},id:3645}),
s[3646]=a({parent:s[3645],name:"alpha",flags:8,mods:32768,cat:32,meta:{desc:"<p>Alpha values of the mask layer image should be used as the mask values.</p>\n"},id:3646}),
s[3647]=a({parent:s[3645],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use alpha values if &#39;mask-image&#39; is an image, luminance if a <mask> element or a CSS image.</p>\n"},id:3647}),
s[3648]=a({parent:s[3645],name:"luminance",flags:8,mods:32768,cat:32,meta:{desc:"<p>Luminance values of the mask layer image should be used as the mask values.</p>\n"},id:3648}),
s[3649]=a({parent:s[1968],name:"mask-origin",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the mask positioning area.</p>\n"},id:3649}),
s[3650]=a({parent:s[1968],name:"mask-position",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how mask layer images are positioned.</p>\n"},id:3650}),
s[3651]=a({parent:s[1968],name:"mask-repeat",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how mask layer images are tiled after they have been sized and positioned.</p>\n"},id:3651}),
s[3652]=a({parent:s[1968],name:"mask-size",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies the size of the mask layer images.</p>\n"},id:3652}),
s[3653]=a({parent:s[3652],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>Resolved by using the imageโs intrinsic ratio and the size of the other dimension, or failing that, using the imageโs intrinsic size, or failing that, treating it as 100%.</p>\n"},id:3653}),
s[3654]=a({parent:s[3652],name:"contain",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.</p>\n"},id:3654}),
s[3655]=a({parent:s[3652],name:"cover",flags:8,mods:32768,cat:32,meta:{desc:"<p>Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.</p>\n"},id:3655}),
s[3656]=a({parent:s[1968],name:"nav-down",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides an way to control directional focus navigation.</p>\n"},id:3656}),
s[3657]=a({parent:s[3656],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</p>\n"},id:3657}),
s[3658]=a({parent:s[3656],name:"current",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the frame that the element is in.</p>\n"},id:3658}),
s[3659]=a({parent:s[3656],name:"root",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the full window.</p>\n"},id:3659}),
s[3660]=a({parent:s[1968],name:"nav-index",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides an input-method-neutral way of specifying the sequential navigation order (also known as &#39;tabbing order&#39;).</p>\n"},id:3660}),
s[3661]=a({parent:s[3660],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The element&#39;s sequential navigation order is assigned automatically by the user agent.</p>\n"},id:3661}),
s[3662]=a({parent:s[1968],name:"nav-left",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides an way to control directional focus navigation.</p>\n"},id:3662}),
s[3663]=a({parent:s[3662],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</p>\n"},id:3663}),
s[3664]=a({parent:s[3662],name:"current",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the frame that the element is in.</p>\n"},id:3664}),
s[3665]=a({parent:s[3662],name:"root",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the full window.</p>\n"},id:3665}),
s[3666]=a({parent:s[1968],name:"nav-right",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides an way to control directional focus navigation.</p>\n"},id:3666}),
s[3667]=a({parent:s[3666],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</p>\n"},id:3667}),
s[3668]=a({parent:s[3666],name:"current",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the frame that the element is in.</p>\n"},id:3668}),
s[3669]=a({parent:s[3666],name:"root",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the full window.</p>\n"},id:3669}),
s[3670]=a({parent:s[1968],name:"nav-up",flags:4,mods:0,cat:2,meta:{desc:"<p>Provides an way to control directional focus navigation.</p>\n"},id:3670}),
s[3671]=a({parent:s[3670],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</p>\n"},id:3671}),
s[3672]=a({parent:s[3670],name:"current",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the frame that the element is in.</p>\n"},id:3672}),
s[3673]=a({parent:s[3670],name:"root",flags:8,mods:32768,cat:32,meta:{desc:"<p>Indicates that the user agent should target the full window.</p>\n"},id:3673}),
s[3674]=a({parent:s[1968],name:"negative",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Defines how to alter the representation when the counter value is negative.</p>\n"},id:3674}),
s[3675]=a({parent:s[1968],name:"offset-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;bottom&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3675}),
s[3676]=a({parent:s[3675],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well.</p>\n"},id:3676}),
s[3677]=a({parent:s[1968],name:"offset-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;top&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3677}),
s[3678]=a({parent:s[3677],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well.</p>\n"},id:3678}),
s[3679]=a({parent:s[1968],name:"offset-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;right&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3679}),
s[3680]=a({parent:s[3679],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well.</p>\n"},id:3680}),
s[3681]=a({parent:s[1968],name:"offset-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>Logical &#39;left&#39;. Mapping depends on the parent elementโs &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"},id:3681}),
s[3682]=a({parent:s[3681],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>For non-replaced elements, the effect of this value depends on which of related properties have the value &#39;auto&#39; as well.</p>\n"},id:3682}),
s[3683]=a({parent:s[1968],name:"pad",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies a โfixed-widthโ counter style, where representations shorter than the pad value are padded with a particular <symbol></p>\n"},id:3683}),
s[3684]=a({parent:s[1968],name:"prefix",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies a <symbol> that is prepended to the marker representation.</p>\n"},id:3684}),
s[3685]=a({parent:s[1968],name:"range",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Defines the ranges over which the counter style is defined.</p>\n"},id:3685}),
s[3686]=a({parent:s[3685],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The range depends on the counter system.</p>\n"},id:3686}),
s[3687]=a({parent:s[3685],name:"infinite",flags:8,mods:32768,cat:32,meta:{desc:"<p>If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity.</p>\n"},id:3687}),
s[3688]=a({parent:s[1968],name:"ruby-align",flags:4,mods:0,cat:2,meta:{desc:"<p>Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.</p>\n"},id:3688}),
s[3689]=a({parent:s[3688],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The user agent determines how the ruby contents are aligned. This is the initial value.</p>\n"},id:3689}),
s[3690]=a({parent:s[3688],name:"center",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby content is centered within its box.</p>\n"},id:3690}),
s[3691]=a({parent:s[3688],name:"distribute-letter",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text.</p>\n"},id:3691}),
s[3692]=a({parent:s[3688],name:"distribute-space",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text.</p>\n"},id:3692}),
s[3693]=a({parent:s[3688],name:"left",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text content is aligned with the start edge of the base.</p>\n"},id:3693}),
s[3694]=a({parent:s[3688],name:"line-edge",flags:8,mods:32768,cat:32,meta:{desc:"<p>If the ruby text is not adjacent to a line edge, it is aligned as in &#39;auto&#39;. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base.</p>\n"},id:3694}),
s[3695]=a({parent:s[3688],name:"right",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text content is aligned with the end edge of the base.</p>\n"},id:3695}),
s[3696]=a({parent:s[3688],name:"start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text content is aligned with the start edge of the base.</p>\n"},id:3696}),
s[3697]=a({parent:s[3688],name:"space-between",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby content expands as defined for normal text justification (as defined by &#39;text-justify&#39;),</p>\n"},id:3697}),
s[3698]=a({parent:s[3688],name:"space-around",flags:8,mods:32768,cat:32,meta:{desc:"<p>As for &#39;space-between&#39; except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content.</p>\n"},id:3698}),
s[3699]=a({parent:s[1968],name:"ruby-overhang",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.</p>\n"},id:3699}),
s[3700]=a({parent:s[3699],name:"auto",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text can overhang text adjacent to the base on either side. This is the initial value.</p>\n"},id:3700}),
s[3701]=a({parent:s[3699],name:"end",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text can overhang the text that follows it.</p>\n"},id:3701}),
s[3702]=a({parent:s[3699],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text cannot overhang any text adjacent to its base, only its own base.</p>\n"},id:3702}),
s[3703]=a({parent:s[3699],name:"start",flags:8,mods:32768,cat:32,meta:{desc:"<p>The ruby text can overhang the text that precedes it.</p>\n"},id:3703}),
s[3704]=a({parent:s[1968],name:"ruby-span",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.</p>\n"},id:3704}),
s[3705]=a({parent:s[3704],name:"attr",flags:8192,mods:32768,cat:32,meta:{desc:"<p>The value of attribute &#39;x&#39; is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element.</p>\n"},id:3705}),
s[3706]=a({parent:s[3704],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>No spanning. The computed value is &#39;1&#39;.</p>\n"},id:3706}),
s[3707]=a({parent:s[1968],name:"scrollbar-3dlight-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.</p>\n"},id:3707}),
s[3708]=a({parent:s[1968],name:"scrollbar-arrow-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the arrow elements of a scroll arrow.</p>\n"},id:3708}),
s[3709]=a({parent:s[1968],name:"scrollbar-base-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.</p>\n"},id:3709}),
s[3710]=a({parent:s[1968],name:"scrollbar-darkshadow-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the gutter of a scroll bar.</p>\n"},id:3710}),
s[3711]=a({parent:s[1968],name:"scrollbar-face-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the scroll box and scroll arrows of a scroll bar.</p>\n"},id:3711}),
s[3712]=a({parent:s[1968],name:"scrollbar-highlight-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.</p>\n"},id:3712}),
s[3713]=a({parent:s[1968],name:"scrollbar-shadow-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.</p>\n"},id:3713}),
s[3714]=a({parent:s[1968],name:"scrollbar-track-color",flags:4,mods:0,cat:2,meta:{desc:"<p>Determines the color of the track element of a scroll bar.</p>\n"},id:3714}),
s[3715]=a({parent:s[1968],name:"suffix",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies a <symbol> that is appended to the marker representation.</p>\n"},id:3715}),
s[3716]=a({parent:s[1968],name:"system",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies which algorithm will be used to construct the counterโs representation based on the counter value.</p>\n"},id:3716}),
s[3717]=a({parent:s[3716],name:"additive",flags:8,mods:32768,cat:32,meta:{desc:"<p>Represents โsign-valueโ numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together.</p>\n"},id:3717}),
s[3718]=a({parent:s[3716],name:"alphabetic",flags:8,mods:32768,cat:32,meta:{desc:"<p>Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, to &quot;aa&quot;, &quot;ab&quot;, &quot;ac&quot;.</p>\n"},id:3718}),
s[3719]=a({parent:s[3716],name:"cyclic",flags:8,mods:32768,cat:32,meta:{desc:"<p>Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list.</p>\n"},id:3719}),
s[3720]=a({parent:s[3716],name:"extends",flags:8,mods:32768,cat:32,meta:{desc:"<p>Use the algorithm of another counter style, but alter other aspects.</p>\n"},id:3720}),
s[3721]=a({parent:s[3716],name:"fixed",flags:8,mods:32768,cat:32,meta:{desc:"<p>Runs through its list of counter symbols once, then falls back.</p>\n"},id:3721}),
s[3722]=a({parent:s[3716],name:"numeric",flags:8,mods:32768,cat:32,meta:{desc:"<p>interprets the list of counter symbols as digits to a &quot;place-value&quot; numbering system, similar to the default &#39;decimal&#39; counter style.</p>\n"},id:3722}),
s[3723]=a({parent:s[3716],name:"symbolic",flags:8,mods:32768,cat:32,meta:{desc:"<p>Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list.</p>\n"},id:3723}),
s[3724]=a({parent:s[1968],name:"symbols",flags:4,mods:0,cat:2,meta:{desc:"<p><code>@counter-style</code> descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.</p>\n"},id:3724}),
s[3725]=a({parent:s[1968],name:"aspect-ratio",flags:4,mods:0,cat:2,meta:{desc:"<p>The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.</p>\n"},id:3725}),
s[3726]=a({parent:s[1968],name:"azimuth",flags:4,mods:0,cat:2,meta:{desc:"<p>In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.</p>\n"},id:3726}),
s[3727]=a({parent:s[1968],name:"border-end-end-radius",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"},id:3727}),
s[3728]=a({parent:s[1968],name:"border-end-start-radius",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"},id:3728}),
s[3729]=a({parent:s[1968],name:"border-start-end-radius",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"},id:3729}),
s[3730]=a({parent:s[1968],name:"border-start-start-radius",flags:4,mods:0,cat:2,meta:{desc:"<p>The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"},id:3730}),
s[3731]=a({parent:s[1968],name:"box-ordinal-group",flags:4,mods:0,cat:2,meta:{desc:"<p>The box-ordinal-group CSS property assigns the flexbox&#39;s child elements to an ordinal group.</p>\n"},id:3731}),
s[3732]=a({parent:s[1968],name:"color-adjust",flags:4,mods:0,cat:2,meta:{desc:"<p>The color-adjust property is a non-standard CSS extension that can be used to force printing of background colors and images in browsers based on the WebKit engine.</p>\n"},id:3732}),
s[3733]=a({parent:s[1968],name:"counter-set",flags:4,mods:0,cat:2,meta:{desc:"<p>The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn&#39;t already a counter of the given name on the element.</p>\n"},id:3733}),
s[3734]=a({parent:s[1968],name:"hanging-punctuation",flags:4,mods:0,cat:2,meta:{desc:"<p>The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.</p>\n"},id:3734}),
s[3735]=a({parent:s[1968],name:"initial-letter",flags:4,mods:0,cat:2,meta:{desc:"<p>The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters.</p>\n"},id:3735}),
s[3736]=a({parent:s[1968],name:"initial-letter-align",flags:4,mods:0,cat:2,meta:{desc:"<p>The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph.</p>\n"},id:3736}),
s[3737]=a({parent:s[1968],name:"line-clamp",flags:4,mods:0,cat:2,meta:{desc:"<p>The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content.</p>\n"},id:3737}),
s[3738]=a({parent:s[1968],name:"line-height-step",flags:4,mods:0,cat:2,meta:{desc:"<p>The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid.</p>\n"},id:3738}),
s[3739]=a({parent:s[1968],name:"margin-trim",flags:4,mods:0,cat:2,meta:{desc:"<p>The margin-trim property allows the container to trim the margins of its children where they adjoin the containerโs edges.</p>\n"},id:3739}),
s[3740]=a({parent:s[1968],name:"mask-border",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border CSS property lets you create a mask along the edge of an element&#39;s border.</p>\n<p>This property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value.</p>\n"},id:3740}),
s[3741]=a({parent:s[1968],name:"mask-border-mode",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-mode CSS property specifies the blending mode used in a mask border.</p>\n"},id:3741}),
s[3742]=a({parent:s[1968],name:"mask-border-outset",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-outset CSS property specifies the distance by which an element&#39;s mask border is set out from its border box.</p>\n"},id:3742}),
s[3743]=a({parent:s[1968],name:"mask-border-repeat",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element&#39;s mask border.</p>\n"},id:3743}),
s[3744]=a({parent:s[1968],name:"mask-border-slice",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element&#39;s mask border.</p>\n"},id:3744}),
s[3745]=a({parent:s[1968],name:"mask-border-source",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-source CSS property specifies the source image used to create an element&#39;s mask border.</p>\n<p>The mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border.</p>\n"},id:3745}),
s[3746]=a({parent:s[1968],name:"mask-border-width",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-border-width CSS property specifies the width of an element&#39;s mask border.</p>\n"},id:3746}),
s[3747]=a({parent:s[1968],name:"mask-clip",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.</p>\n"},id:3747}),
s[3748]=a({parent:s[1968],name:"mask-composite",flags:4,mods:0,cat:2,meta:{desc:"<p>The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it.</p>\n"},id:3748}),
s[3749]=a({parent:s[1968],name:"max-lines",flags:4,mods:0,cat:2,meta:{desc:"<p>The max-liens property forces a break after a set number of lines</p>\n"},id:3749}),
s[3750]=a({parent:s[1968],name:"overflow-clip-box",flags:4,mods:0,cat:2,meta:{desc:"<p>The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties.</p>\n"},id:3750}),
s[3751]=a({parent:s[1968],name:"overflow-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis.</p>\n"},id:3751}),
s[3752]=a({parent:s[1968],name:"overscroll-behavior",flags:4,mods:0,cat:2,meta:{desc:"<p>The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser&#39;s scroll overflow behavior โ what happens when the boundary of a scrolling area is reached.</p>\n"},id:3752}),
s[3753]=a({parent:s[1968],name:"overscroll-behavior-x",flags:4,mods:0,cat:2,meta:{desc:"<p>The overscroll-behavior-x CSS property is allows you to control the browser&#39;s scroll overflow behavior โ what happens when the boundary of a scrolling area is reached โ in the x axis direction.</p>\n"},id:3753}),
s[3754]=a({parent:s[1968],name:"overscroll-behavior-y",flags:4,mods:0,cat:2,meta:{desc:"<p>The overscroll-behavior-y CSS property is allows you to control the browser&#39;s scroll overflow behavior โ what happens when the boundary of a scrolling area is reached โ in the y axis direction.</p>\n"},id:3754}),
s[3755]=a({parent:s[1968],name:"ruby-merge",flags:4,mods:0,cat:2,meta:{desc:"<p>This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available.</p>\n"},id:3755}),
s[3756]=a({parent:s[1968],name:"scrollbar-color",flags:4,mods:0,cat:2,meta:{desc:"<p>The scrollbar-color CSS property sets the color of the scrollbar track and thumb.</p>\n"},id:3756}),
s[3757]=a({parent:s[1968],name:"scrollbar-width",flags:4,mods:0,cat:2,meta:{desc:"<p>The scrollbar-width property allows the author to set the maximum thickness of an elementโs scrollbars when they are shown.</p>\n"},id:3757}),
s[3758]=a({parent:s[1968],name:"scroll-margin",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands.</p>\n"},id:3758}),
s[3759]=a({parent:s[1968],name:"scroll-margin-block",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension.</p>\n"},id:3759}),
s[3760]=a({parent:s[1968],name:"scroll-margin-block-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3760}),
s[3761]=a({parent:s[1968],name:"scroll-margin-block-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3761}),
s[3762]=a({parent:s[1968],name:"scroll-margin-bottom",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3762}),
s[3763]=a({parent:s[1968],name:"scroll-margin-inline",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension.</p>\n"},id:3763}),
s[3764]=a({parent:s[1968],name:"scroll-margin-inline-start",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3764}),
s[3765]=a({parent:s[1968],name:"scroll-margin-inline-end",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3765}),
s[3766]=a({parent:s[1968],name:"scroll-margin-left",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3766}),
s[3767]=a({parent:s[1968],name:"scroll-margin-right",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3767}),
s[3768]=a({parent:s[1968],name:"scroll-margin-top",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll containerโs coordinate space), then adding the specified outsets.</p>\n"},id:3768}),
s[3769]=a({parent:s[1968],name:"scroll-snap-type-x",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.</p>\n<p>Specifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.</p>\n"},id:3769}),
s[3770]=a({parent:s[1968],name:"scroll-snap-type-y",flags:4,mods:0,cat:2,meta:{desc:"<p>The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.</p>\n<p>Specifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.</p>\n"},id:3770}),
s[3771]=a({parent:s[1968],name:"text-decoration-thickness",flags:4,mods:0,cat:2,meta:{alias:"tdt",desc:"<p>The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.</p>\n"},id:3771}),
s[3772]=a({parent:s[1968],name:"tdt",flags:4,mods:32768,cat:2,meta:{},proxy:s[3771],id:3772}),
s[3773]=a({parent:s[1968],name:"text-emphasis",flags:4,mods:0,cat:2,meta:{alias:"te",desc:"<p>The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element&#39;s text, except separator characters, like spaces,  and control characters.</p>\n"},id:3773}),
s[3774]=a({parent:s[1968],name:"te",flags:4,mods:32768,cat:2,meta:{},proxy:s[3773],id:3774}),
s[3775]=a({parent:s[1968],name:"text-emphasis-color",flags:4,mods:0,cat:2,meta:{alias:"tec",desc:"<p>The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand.</p>\n"},id:3775}),
s[3776]=a({parent:s[1968],name:"tec",flags:4,mods:32768,cat:2,meta:{},proxy:s[3775],id:3776}),
s[3777]=a({parent:s[1968],name:"text-emphasis-position",flags:4,mods:0,cat:2,meta:{alias:"tep",desc:"<p>The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn&#39;t enough place, the line height is increased.</p>\n"},id:3777}),
s[3778]=a({parent:s[1968],name:"tep",flags:4,mods:32768,cat:2,meta:{},proxy:s[3777],id:3778}),
s[3779]=a({parent:s[1968],name:"text-emphasis-style",flags:4,mods:0,cat:2,meta:{alias:"tes",desc:"<p>The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand.</p>\n"},id:3779}),
s[3780]=a({parent:s[1968],name:"tes",flags:4,mods:32768,cat:2,meta:{},proxy:s[3779],id:3780}),
s[3781]=a({parent:s[1968],name:"text-underline-offset",flags:4,mods:0,cat:2,meta:{desc:"<p>The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position.</p>\n"},id:3781}),
s[3782]=a({parent:s[1968],name:"speak-as",flags:4,mods:0,cat:2,meta:{desc:"<p>The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue.</p>\n"},id:3782}),
s[3783]=a({parent:s[1968],name:"bleed",flags:4,mods:0,cat:2,meta:{desc:"<p>The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property.</p>\n"},id:3783}),
s[3784]=a({parent:s[1968],name:"marks",flags:4,mods:0,cat:2,meta:{desc:"<p>The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets.</p>\n"},id:3784}),
s[3785]=a({parent:s[1968],name:"hue",flags:384,mods:0,cat:16,meta:{},id:3785}),
s[3786]=a({parent:s[3785],name:"rose",flags:8,mods:32768,cat:32,meta:{color:"hsla(351,94%,71%,1)"},id:3786}),
s[3787]=a({parent:s[3785],name:"pink",flags:8,mods:32768,cat:32,meta:{color:"hsla(328,85%,70%,1)"},id:3787}),
s[3788]=a({parent:s[3785],name:"fuchsia",flags:8,mods:32768,cat:32,meta:{color:"hsla(292,91%,72%,1)"},id:3788}),
s[3789]=a({parent:s[3785],name:"purple",flags:8,mods:32768,cat:32,meta:{color:"hsla(270,95%,75%,1)"},id:3789}),
s[3790]=a({parent:s[3785],name:"violet",flags:8,mods:32768,cat:32,meta:{color:"hsla(255,91%,76%,1)"},id:3790}),
s[3791]=a({parent:s[3785],name:"indigo",flags:8,mods:32768,cat:32,meta:{color:"hsla(234,89%,73%,1)"},id:3791}),
s[3792]=a({parent:s[3785],name:"blue",flags:8,mods:32768,cat:32,meta:{color:"hsla(213,93%,67%,1)"},id:3792}),
s[3793]=a({parent:s[3785],name:"sky",flags:8,mods:32768,cat:32,meta:{color:"hsla(198,93%,59%,1)"},id:3793}),
s[3794]=a({parent:s[3785],name:"cyan",flags:8,mods:32768,cat:32,meta:{color:"hsla(187,85%,53%,1)"},id:3794}),
s[3795]=a({parent:s[3785],name:"teal",flags:8,mods:32768,cat:32,meta:{color:"hsla(172,66%,50%,1)"},id:3795}),
s[3796]=a({parent:s[3785],name:"emerald",flags:8,mods:32768,cat:32,meta:{color:"hsla(158,64%,51%,1)"},id:3796}),
s[3797]=a({parent:s[3785],name:"green",flags:8,mods:32768,cat:32,meta:{color:"hsla(141,69%,58%,1)"},id:3797}),
s[3798]=a({parent:s[3785],name:"lime",flags:8,mods:32768,cat:32,meta:{color:"hsla(82,77%,55%,1)"},id:3798}),
s[3799]=a({parent:s[3785],name:"yellow",flags:8,mods:32768,cat:32,meta:{color:"hsla(47,95%,53%,1)"},id:3799}),
s[3800]=a({parent:s[3785],name:"amber",flags:8,mods:32768,cat:32,meta:{color:"hsla(43,96%,56%,1)"},id:3800}),
s[3801]=a({parent:s[3785],name:"orange",flags:8,mods:32768,cat:32,meta:{color:"hsla(27,95%,60%,1)"},id:3801}),
s[3802]=a({parent:s[3785],name:"red",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,90%,70%,1)"},id:3802}),
s[3803]=a({parent:s[3785],name:"warmer",flags:8,mods:32768,cat:32,meta:{color:"hsla(23,5%,63%,1)"},id:3803}),
s[3804]=a({parent:s[3785],name:"warm",flags:8,mods:32768,cat:32,meta:{color:"hsla(0,0%,63%,1)"},id:3804}),
s[3805]=a({parent:s[3785],name:"gray",flags:8,mods:32768,cat:32,meta:{color:"hsla(240,5%,64%,1)"},id:3805}),
s[3806]=a({parent:s[3785],name:"cool",flags:8,mods:32768,cat:32,meta:{color:"hsla(217,10%,64%,1)"},id:3806}),
s[3807]=a({parent:s[3785],name:"cooler",flags:8,mods:32768,cat:32,meta:{color:"hsla(215,20%,65%,1)"},id:3807}),
s[3808]=a({parent:s[1968],name:"fs",flags:384,mods:0,cat:16,meta:{},id:3808}),
s[3809]=a({parent:s[3808],name:"xxs",flags:8,mods:32768,cat:32,meta:{desc:"<p>10px</p>\n"},id:3809}),
s[3810]=a({parent:s[3808],name:"xs",flags:8,mods:32768,cat:32,meta:{desc:"<p>12px</p>\n"},id:3810}),
s[3811]=a({parent:s[3808],name:"sm-",flags:8,mods:32768,cat:32,meta:{desc:"<p>13px</p>\n"},id:3811}),
s[3812]=a({parent:s[3808],name:"sm",flags:8,mods:32768,cat:32,meta:{desc:"<p>14px</p>\n"},id:3812}),
s[3813]=a({parent:s[3808],name:"md-",flags:8,mods:32768,cat:32,meta:{desc:"<p>15px</p>\n"},id:3813}),
s[3814]=a({parent:s[3808],name:"md",flags:8,mods:32768,cat:32,meta:{desc:"<p>16px</p>\n"},id:3814}),
s[3815]=a({parent:s[3808],name:"lg",flags:8,mods:32768,cat:32,meta:{desc:"<p>18px</p>\n"},id:3815}),
s[3816]=a({parent:s[3808],name:"xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>20px</p>\n"},id:3816}),
s[3817]=a({parent:s[3808],name:"2xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>24px</p>\n"},id:3817}),
s[3818]=a({parent:s[3808],name:"3xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>30px</p>\n"},id:3818}),
s[3819]=a({parent:s[3808],name:"4xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>36px</p>\n"},id:3819}),
s[3820]=a({parent:s[3808],name:"5xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>48px</p>\n"},id:3820}),
s[3821]=a({parent:s[3808],name:"6xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>64px</p>\n"},id:3821}),
s[3822]=a({parent:s[1968],name:"shadow",flags:384,mods:0,cat:16,meta:{},id:3822}),
s[3823]=a({parent:s[3822],name:"xxs",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 0 0 1px rgba(0, 0, 0, 0.05)</p>\n"},id:3823}),
s[3824]=a({parent:s[3822],name:"xs",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 1px 2px 0 rgba(0, 0, 0, 0.05)</p>\n"},id:3824}),
s[3825]=a({parent:s[3822],name:"sm",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)</p>\n"},id:3825}),
s[3826]=a({parent:s[3822],name:"md",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)</p>\n"},id:3826}),
s[3827]=a({parent:s[3822],name:"lg",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)</p>\n"},id:3827}),
s[3828]=a({parent:s[3822],name:"xl",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)</p>\n"},id:3828}),
s[3829]=a({parent:s[3822],name:"xxl",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 25px 50px -6px rgba(0, 0, 0, 0.25)</p>\n"},id:3829}),
s[3830]=a({parent:s[3822],name:"inner",flags:8,mods:32768,cat:32,meta:{desc:"<p>inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)</p>\n"},id:3830}),
s[3831]=a({parent:s[3822],name:"outline",flags:8,mods:32768,cat:32,meta:{desc:"<p>0 0 0 3px rgba(66, 153, 225, 0.5)</p>\n"},id:3831}),
s[3832]=a({parent:s[3822],name:"none",flags:8,mods:32768,cat:32,meta:{desc:"<p>none</p>\n"},id:3832}),
s[3833]=a({parent:s[1968],name:"@odd",flags:268435456,mods:0,cat:4,meta:{detail:":nth-child(odd)",desc:"<p>Represents elements whose numeric position in a series of siblings is odd 1, 3, 5, etc</p>\n"},id:3833}),
s[3834]=a({parent:s[1968],name:"@even",flags:268435456,mods:0,cat:4,meta:{detail:":nth-child(even)",desc:"<p>Represents elements whose numeric position in a series of siblings is even 2, 4, 6, etc</p>\n"},id:3834}),
s[3835]=a({parent:s[1968],name:"@first",flags:268435456,mods:0,cat:4,meta:{detail:":first-child",desc:"<p>Represents the first element among a group of sibling elements</p>\n"},id:3835}),
s[3836]=a({parent:s[1968],name:"@last",flags:268435456,mods:0,cat:4,meta:{detail:":last-child",desc:"<p>Represents the last element among a group of sibling elements</p>\n"},id:3836}),
s[3837]=a({parent:s[1968],name:"@only",flags:268435456,mods:0,cat:4,meta:{detail:":only-child",desc:"<p>Represents an element without any siblings</p>\n"},id:3837}),
s[3838]=a({parent:s[1968],name:"@hover",flags:268435456,mods:0,cat:4,meta:{desc:"<p>Generally triggered when the user hovers over an element with the cursor (mouse pointer)</p>\n"},id:3838}),
s[3839]=a({parent:s[1968],name:"@active",flags:268435456,mods:0,cat:4,meta:{desc:"<p>Element is being activated by the user. When using a mouse, &quot;activation&quot; typically starts when the user presses down the primary mouse button.</p>\n"},id:3839}),
s[3840]=a({parent:s[1968],name:"@visited",flags:268435456,mods:0,cat:4,meta:{},id:3840}),
s[3841]=a({parent:s[1968],name:"@link",flags:268435456,mods:0,cat:4,meta:{},id:3841}),
s[3842]=a({parent:s[1968],name:"@enabled",flags:268435456,mods:0,cat:4,meta:{},id:3842}),
s[3843]=a({parent:s[1968],name:"@checked",flags:268435456,mods:0,cat:4,meta:{},id:3843}),
s[3844]=a({parent:s[1968],name:"@invalid",flags:268435456,mods:0,cat:4,meta:{},id:3844}),
s[3845]=a({parent:s[1968],name:"@valid",flags:268435456,mods:0,cat:4,meta:{},id:3845}),
s[3846]=a({parent:s[1968],name:"@focus",flags:268435456,mods:0,cat:4,meta:{desc:"<p>Element has focus</p>\n"},id:3846}),
s[3847]=a({parent:s[1968],name:"@focin",flags:268435456,mods:0,cat:4,meta:{desc:"<p>Element OR descendant of element has focus</p>\n"},id:3847}),
s[3848]=a({parent:s[1968],name:"@xs",flags:268435456,mods:0,cat:4,meta:{detail:"(min-width: 480px)"},id:3848}),
s[3849]=a({parent:s[1968],name:"@sm",flags:268435456,mods:0,cat:4,meta:{detail:"(min-width: 640px)"},id:3849}),
s[3850]=a({parent:s[1968],name:"@md",flags:268435456,mods:0,cat:4,meta:{detail:"(min-width: 768px)"},id:3850}),
s[3851]=a({parent:s[1968],name:"@lg",flags:268435456,mods:0,cat:4,meta:{detail:"(min-width: 1024px)"},id:3851}),
s[3852]=a({parent:s[1968],name:"@xl",flags:268435456,mods:0,cat:4,meta:{detail:"(min-width: 1280px)"},id:3852}),
s[3853]=a({parent:s[1968],name:"@lt-xs",flags:268435456,mods:0,cat:4,meta:{detail:"(max-width: 479px)"},id:3853}),
s[3854]=a({parent:s[1968],name:"@lt-sm",flags:268435456,mods:0,cat:4,meta:{detail:"(max-width: 639px)"},id:3854}),
s[3855]=a({parent:s[1968],name:"@lt-md",flags:268435456,mods:0,cat:4,meta:{detail:"(max-width: 767px)"},id:3855}),
s[3856]=a({parent:s[1968],name:"@lt-lg",flags:268435456,mods:0,cat:4,meta:{detail:"(max-width: 1023px)"},id:3856}),
s[3857]=a({parent:s[1968],name:"@lt-xl",flags:268435456,mods:0,cat:4,meta:{detail:"(max-width: 1279px)"},id:3857}),
s[3858]=a({parent:s[1968],name:"@dark",flags:268435456,mods:0,cat:4,meta:{detail:"(prefers-color-scheme: dark)",desc:"<p>Indicates that user has notified that they prefer an interface that has a dark theme.</p>\n"},id:3858}),
s[3859]=a({parent:s[1968],name:"@light",flags:268435456,mods:0,cat:4,meta:{detail:"(prefers-color-scheme: light)",desc:"<p>Indicates that user has notified that they prefer an interface that has a light theme, or has not expressed an active preference.</p>\n"},id:3859}),
s[3860]=a({parent:s[1968],name:"@touch",flags:268435456,mods:32768,cat:4,meta:{summary:"Matches when a `@touch` handler is active for element"},id:3860}),
s[3861]=a({parent:s[1968],name:"@move",flags:268435456,mods:32768,cat:4,meta:{summary:"Matches when a `@touch.moved` modifier is active for element"},id:3861}),
s[3862]=a({parent:s[1968],name:"@hold",flags:268435456,mods:32768,cat:4,meta:{summary:"Matches when a `@touch.hold` modifier is active for element"},id:3862}),
s[3863]=a({parent:s[1968],name:"@ssr",flags:268435456,mods:32768,cat:4,meta:{summary:"Matches components rendered from server that are not hydrated"},id:3863}),
s[3864]=a({parent:s[1968],name:"@suspended",flags:268435456,mods:32768,cat:4,meta:{summary:"Matches when the element has been suspended (see imba.Component.suspend)"},id:3864}),
s[3865]=a({parent:s[1968],name:"@landscape",flags:268435456,mods:0,cat:4,meta:{detail:"(orientation: landscape)",desc:"<p>The viewport is in a landscape orientation, i.e., the width is greater than the height.</p>\n"},id:3865}),
s[3866]=a({parent:s[1968],name:"@portrait",flags:268435456,mods:0,cat:4,meta:{detail:"(orientation: portrait)",desc:"<p>The viewport is in a portrait orientation, i.e.,  the height is greater than or equal to the width.</p>\n"},id:3866}),
s[3867]=a({parent:s[1968],name:"@print",flags:268435456,mods:0,cat:4,meta:{summary:"Intended for paged material and documents viewed on a screen in print preview mode.",detail:"(media: print)"},id:3867}),
s[3868]=a({parent:s[1968],name:"@screen",flags:268435456,mods:0,cat:4,meta:{summary:"Intended primarily for screens.",detail:"(media: screen)"},id:3868}),
s[3869]=a({parent:s[1968],name:"@before",flags:268435456,mods:0,cat:4,meta:{summary:"Pseudo-element that is the first child of the selected element",detail:"::before { ... }",pseudoelement:true},id:3869}),
s[3870]=a({parent:s[1968],name:"@after",flags:268435456,mods:0,cat:4,meta:{summary:"Pseudo-element that is the last child of the selected element",pseudoelement:true,detail:"::after { ... }"},id:3870}),
s[3871]=a({parent:s[1968],name:"@in",flags:268435456,mods:32768,cat:4,meta:{see:"",summary:"Matches when element is transitioning into the dom"},id:3871}),
s[3872]=a({parent:s[1968],name:"@out",flags:268435456,mods:32768,cat:4,meta:{see:"",summary:"Matches when element is transitioning out of the dom"},id:3872}),
s[3873]=a({parent:s[1968],name:"@off",flags:268435456,mods:32768,cat:4,meta:{see:"",summary:"Matches when element is transitioning into or out of the dom"},id:3873}),
s[3874]=a({parent:s[1],name:"Math",flags:65,mods:0,cat:0,meta:{desc:"<p>An intrinsic object that provides basic mathematics functionality and constants.</p>\n"},id:3874}),
s[3875]=a({parent:s[3874],name:"E",flags:4,mods:131136,cat:0,meta:{desc:"<p>The mathematical constant e. This is Euler&#39;s number, the base of natural logarithms.</p>\n"},id:3875}),
s[3876]=a({parent:s[3874],name:"LN10",flags:4,mods:64,cat:0,meta:{desc:"<p>The natural logarithm of 10.</p>\n"},id:3876}),
s[3877]=a({parent:s[3874],name:"LN2",flags:4,mods:64,cat:0,meta:{desc:"<p>The natural logarithm of 2.</p>\n"},id:3877}),
s[3878]=a({parent:s[3874],name:"LOG2E",flags:4,mods:64,cat:0,meta:{desc:"<p>The base-2 logarithm of e.</p>\n"},id:3878}),
s[3879]=a({parent:s[3874],name:"LOG10E",flags:4,mods:64,cat:0,meta:{desc:"<p>The base-10 logarithm of e.</p>\n"},id:3879}),
s[3880]=a({parent:s[3874],name:"PI",flags:4,mods:131136,cat:0,meta:{desc:"<p>Pi. This is the ratio of the circumference of a circle to its diameter.</p>\n"},id:3880}),
s[3881]=a({parent:s[3874],name:"SQRT1_2",flags:4,mods:64,cat:0,meta:{desc:"<p>The square root of 0.5, or, equivalently, one divided by the square root of 2.</p>\n"},id:3881}),
s[3882]=a({parent:s[3874],name:"SQRT2",flags:4,mods:64,cat:0,meta:{desc:"<p>The square root of 2.</p>\n"},id:3882}),
s[3883]=a({parent:s[3874],name:"abs",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.</p>\n"},id:3883}),
s[3884]=a({parent:s[3874],name:"acos",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the arc cosine (or inverse cosine) of a number.</p>\n"},id:3884}),
s[3885]=a({parent:s[3874],name:"asin",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the arcsine of a number.</p>\n"},id:3885}),
s[3886]=a({parent:s[3874],name:"atan",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the arctangent of a number.</p>\n"},id:3886}),
s[3887]=a({parent:s[3874],name:"atan2",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the angle (in radians) from the X axis to a point.</p>\n"},id:3887}),
s[3888]=a({parent:s[3874],name:"ceil",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the smallest integer greater than or equal to its numeric argument.</p>\n"},id:3888}),
s[3889]=a({parent:s[3874],name:"cos",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the cosine of a number.</p>\n"},id:3889}),
s[3890]=a({parent:s[3874],name:"exp",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns e (the base of natural logarithms) raised to a power.</p>\n"},id:3890}),
s[3891]=a({parent:s[3874],name:"floor",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the greatest integer less than or equal to its numeric argument.</p>\n"},id:3891}),
s[3892]=a({parent:s[3874],name:"log",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the natural logarithm (base e) of a number.</p>\n"},id:3892}),
s[3893]=a({parent:s[3874],name:"max",flags:8192,mods:0,cat:0,meta:{param:{text:"values",kind:"parameterName"},desc:"<p>Returns the larger of a set of supplied numeric expressions.</p>\n"},id:3893}),
s[3894]=a({parent:s[3874],name:"min",flags:8192,mods:0,cat:0,meta:{param:{text:"values",kind:"parameterName"},desc:"<p>Returns the smaller of a set of supplied numeric expressions.</p>\n"},id:3894}),
s[3895]=a({parent:s[3874],name:"pow",flags:8192,mods:0,cat:0,meta:{param:{text:"y",kind:"parameterName"},desc:"<p>Returns the value of a base expression taken to a specified power.</p>\n"},id:3895}),
s[3896]=a({parent:s[3874],name:"random",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a pseudorandom number between 0 and 1.</p>\n"},id:3896}),
s[3897]=a({parent:s[3874],name:"round",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns a supplied numeric expression rounded to the nearest integer.</p>\n"},id:3897}),
s[3898]=a({parent:s[3874],name:"sin",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the sine of a number.</p>\n"},id:3898}),
s[3899]=a({parent:s[3874],name:"sqrt",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the square root of a number.</p>\n"},id:3899}),
s[3900]=a({parent:s[3874],name:"tan",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the tangent of a number.</p>\n"},id:3900}),
s[3901]=a({parent:s[3874],name:"clz32",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the number of leading zero bits in the 32-bit binary representation of a number.</p>\n"},id:3901}),
s[3902]=a({parent:s[3874],name:"imul",flags:8192,mods:0,cat:0,meta:{param:{text:"y",kind:"parameterName"},desc:"<p>Returns the result of 32-bit multiplication of two numbers.</p>\n"},id:3902}),
s[3903]=a({parent:s[3874],name:"sign",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the sign of the x, indicating whether x is positive, negative or zero.</p>\n"},id:3903}),
s[3904]=a({parent:s[3874],name:"log10",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the base 10 logarithm of a number.</p>\n"},id:3904}),
s[3905]=a({parent:s[3874],name:"log2",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the base 2 logarithm of a number.</p>\n"},id:3905}),
s[3906]=a({parent:s[3874],name:"log1p",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the natural logarithm of 1 + x.</p>\n"},id:3906}),
s[3907]=a({parent:s[3874],name:"expm1",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the result of (e^x - 1), which is an implementation-dependent approximation to\nsubtracting 1 from the exponential function of x (e raised to the power of x, where e\nis the base of the natural logarithms).</p>\n"},id:3907}),
s[3908]=a({parent:s[3874],name:"cosh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the hyperbolic cosine of a number.</p>\n"},id:3908}),
s[3909]=a({parent:s[3874],name:"sinh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the hyperbolic sine of a number.</p>\n"},id:3909}),
s[3910]=a({parent:s[3874],name:"tanh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the hyperbolic tangent of a number.</p>\n"},id:3910}),
s[3911]=a({parent:s[3874],name:"acosh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the inverse hyperbolic cosine of a number.</p>\n"},id:3911}),
s[3912]=a({parent:s[3874],name:"asinh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the inverse hyperbolic sine of a number.</p>\n"},id:3912}),
s[3913]=a({parent:s[3874],name:"atanh",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the inverse hyperbolic tangent of a number.</p>\n"},id:3913}),
s[3914]=a({parent:s[3874],name:"hypot",flags:8192,mods:0,cat:0,meta:{param:{text:"values",kind:"parameterName"},desc:"<p>Returns the square root of the sum of squares of its arguments.</p>\n"},id:3914}),
s[3915]=a({parent:s[3874],name:"trunc",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the integral part of the a numeric expression, x, removing any fractional digits.\nIf x is already an integer, the result is x.</p>\n"},id:3915}),
s[3916]=a({parent:s[3874],name:"fround",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns the nearest single precision float representation of a number.</p>\n"},id:3916}),
s[3917]=a({parent:s[3874],name:"cbrt",flags:8192,mods:0,cat:0,meta:{param:{text:"x",kind:"parameterName"},desc:"<p>Returns an implementation-dependent approximation to the cube root of number.</p>\n"},id:3917}),
s[3918]=a({parent:s[1],name:"String",flags:65,mods:0,cat:0,meta:{desc:"<p>Allows manipulation and formatting of text strings and determination and location of substrings within strings.</p>\n"},id:3918}),
s[3919]=a({parent:s[3918],name:"charAt",flags:8192,mods:0,cat:0,meta:{param:{text:"pos",kind:"parameterName"},desc:"<p>Returns the character at the specified index.</p>\n"},id:3919}),
s[3920]=a({parent:s[3918],name:"charCodeAt",flags:8192,mods:0,cat:0,meta:{param:{text:"index",kind:"parameterName"},desc:"<p>Returns the Unicode value of the character at the specified location.</p>\n"},id:3920}),
s[3921]=a({parent:s[3918],name:"concat",flags:8192,mods:0,cat:0,meta:{param:{text:"strings",kind:"parameterName"},desc:"<p>Returns a string that contains the concatenation of two or more strings.</p>\n"},id:3921}),
s[3922]=a({parent:s[3918],name:"indexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"position",kind:"parameterName"},desc:"<p>Returns the position of the first occurrence of a substring.</p>\n"},id:3922}),
s[3923]=a({parent:s[3918],name:"lastIndexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"position",kind:"parameterName"},desc:"<p>Returns the last occurrence of a substring in the string.</p>\n"},id:3923}),
s[3924]=a({parent:s[3918],name:"localeCompare",flags:8192,mods:0,cat:0,meta:{param:{text:"options",kind:"parameterName"},desc:"<p>Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.</p>\n"},id:3924}),
s[3925]=a({parent:s[3918],name:"match",flags:8192,mods:0,cat:0,meta:{param:{text:"matcher",kind:"parameterName"},desc:"<p>Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.</p>\n"},id:3925}),
s[3926]=a({parent:s[3918],name:"replace",flags:8192,mods:0,cat:0,meta:{param:{text:"replacer",kind:"parameterName"},desc:"<p>Replaces text in a string, using a regular expression or search string.\nReplaces first match with string or all matches with RegExp.\nReplaces text in a string, using an object that supports replacement within a string.</p>\n"},id:3926}),
s[3927]=a({parent:s[3918],name:"search",flags:8192,mods:0,cat:0,meta:{param:{text:"searcher",kind:"parameterName"},desc:"<p>Finds the first substring match in a regular expression search.</p>\n"},id:3927}),
s[3928]=a({parent:s[3918],name:"slice",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns a section of a string.</p>\n"},id:3928}),
s[3929]=a({parent:s[3918],name:"split",flags:8192,mods:0,cat:0,meta:{param:{text:"limit",kind:"parameterName"},desc:"<p>Split a string into substrings using the specified separator and return them as an array.</p>\n"},id:3929}),
s[3930]=a({parent:s[3918],name:"substring",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns the substring at the specified location within a String object.</p>\n"},id:3930}),
s[3931]=a({parent:s[3918],name:"toLowerCase",flags:8192,mods:0,cat:0,meta:{desc:"<p>Converts all the alphabetic characters in a string to lowercase.</p>\n"},id:3931}),
s[3932]=a({parent:s[3918],name:"toLocaleLowerCase",flags:8192,mods:0,cat:0,meta:{desc:"<p>Converts all alphabetic characters to lowercase, taking into account the host environment&#39;s current locale.</p>\n"},id:3932}),
s[3933]=a({parent:s[3918],name:"toUpperCase",flags:8192,mods:0,cat:0,meta:{desc:"<p>Converts all the alphabetic characters in a string to uppercase.</p>\n"},id:3933}),
s[3934]=a({parent:s[3918],name:"toLocaleUpperCase",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment&#39;s current locale.</p>\n"},id:3934}),
s[3935]=a({parent:s[3918],name:"trim",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the leading and trailing white space and line terminator characters from a string.</p>\n"},id:3935}),
s[3936]=a({parent:s[3918],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>Returns the length of a String object.</p>\n"},id:3936}),
s[3937]=a({parent:s[3918],name:"substr",flags:8192,mods:0,cat:0,meta:{param:{text:"length",kind:"parameterName"},desc:"<p>Gets a substring beginning at the specified location and having the specified length.</p>\n"},id:3937}),
s[3938]=a({parent:s[3918],name:"codePointAt",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.</p>\n"},id:3938}),
s[3939]=a({parent:s[3918],name:"includes",flags:8192,mods:0,cat:0,meta:{param:{text:"position",kind:"parameterName"},desc:"<p>Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.</p>\n"},id:3939}),
s[3940]=a({parent:s[3918],name:"endsWith",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition โ length(this). Otherwise returns false.</p>\n"},id:3940}),
s[3941]=a({parent:s[3918],name:"normalize",flags:8192,mods:0,cat:0,meta:{param:{text:"form",kind:"parameterName"},desc:"<p>Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.</p>\n"},id:3941}),
s[3942]=a({parent:s[3918],name:"repeat",flags:8192,mods:0,cat:0,meta:{param:{text:"count",kind:"parameterName"},desc:"<p>Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.</p>\n"},id:3942}),
s[3943]=a({parent:s[3918],name:"startsWith",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.</p>\n"},id:3943}),
s[3944]=a({parent:s[3918],name:"anchor",flags:8192,mods:0,cat:0,meta:{param:"name",desc:"<p>Returns an <code>&lt;a&gt;</code> HTML anchor element and sets the name attribute to the text value</p>\n"},id:3944}),
s[3945]=a({parent:s[3918],name:"big",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;big&gt;</code> HTML element</p>\n"},id:3945}),
s[3946]=a({parent:s[3918],name:"blink",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;blink&gt;</code> HTML element</p>\n"},id:3946}),
s[3947]=a({parent:s[3918],name:"bold",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;b&gt;</code> HTML element</p>\n"},id:3947}),
s[3948]=a({parent:s[3918],name:"fixed",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;tt&gt;</code> HTML element</p>\n"},id:3948}),
s[3949]=a({parent:s[3918],name:"fontcolor",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;font&gt;</code> HTML element and sets the color attribute value</p>\n"},id:3949}),
s[3950]=a({parent:s[3918],name:"fontsize",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;font&gt;</code> HTML element and sets the size attribute value</p>\n"},id:3950}),
s[3951]=a({parent:s[3918],name:"italics",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an <code>&lt;i&gt;</code> HTML element</p>\n"},id:3951}),
s[3952]=a({parent:s[3918],name:"link",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an <code>&lt;a&gt;</code> HTML element and sets the href attribute value</p>\n"},id:3952}),
s[3953]=a({parent:s[3918],name:"small",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;small&gt;</code> HTML element</p>\n"},id:3953}),
s[3954]=a({parent:s[3918],name:"strike",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;strike&gt;</code> HTML element</p>\n"},id:3954}),
s[3955]=a({parent:s[3918],name:"sub",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;sub&gt;</code> HTML element</p>\n"},id:3955}),
s[3956]=a({parent:s[3918],name:"sup",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns a <code>&lt;sup&gt;</code> HTML element</p>\n"},id:3956}),
s[3957]=a({parent:s[3918],name:"padStart",flags:8192,mods:0,cat:0,meta:{param:{text:"fillString",kind:"parameterName"},desc:"<p>Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.</p>\n"},id:3957}),
s[3958]=a({parent:s[3918],name:"padEnd",flags:8192,mods:0,cat:0,meta:{param:{text:"fillString",kind:"parameterName"},desc:"<p>Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.</p>\n"},id:3958}),
s[3959]=a({parent:s[3918],name:"trimEnd",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the trailing white space and line terminator characters from a string.</p>\n"},id:3959}),
s[3960]=a({parent:s[3918],name:"trimStart",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the leading white space and line terminator characters from a string.</p>\n"},id:3960}),
s[3961]=a({parent:s[3918],name:"trimLeft",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the leading white space and line terminator characters from a string.</p>\n"},id:3961}),
s[3962]=a({parent:s[3918],name:"trimRight",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the trailing white space and line terminator characters from a string.</p>\n"},id:3962}),
s[3963]=a({parent:s[3918],name:"matchAll",flags:8192,mods:0,cat:0,meta:{param:{text:"regexp",kind:"parameterName"},desc:"<p>Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.</p>\n"},id:3963}),
s[3964]=a({parent:s[3918],name:"replaceAll",flags:8192,mods:0,cat:0,meta:{param:{text:"replacer",kind:"parameterName"},desc:"<p>Replace all instances of a substring in a string, using a regular expression or search string.</p>\n"},id:3964}),
s[3965]=a({parent:s[1],name:"Number",flags:65,mods:0,cat:0,meta:{desc:"<p>An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.</p>\n"},id:3965}),
s[3966]=a({parent:s[3965],name:"toFixed",flags:8192,mods:0,cat:0,meta:{param:{text:"fractionDigits",kind:"parameterName"},desc:"<p>Returns a string representing a number in fixed-point notation.</p>\n"},id:3966}),
s[3967]=a({parent:s[3965],name:"toExponential",flags:8192,mods:0,cat:0,meta:{param:{text:"fractionDigits",kind:"parameterName"},desc:"<p>Returns a string containing a number represented in exponential notation.</p>\n"},id:3967}),
s[3968]=a({parent:s[3965],name:"toPrecision",flags:8192,mods:0,cat:0,meta:{param:{text:"precision",kind:"parameterName"},desc:"<p>Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.</p>\n"},id:3968}),
s[3969]=a({parent:s[1],name:"parseInt",flags:16,mods:2,cat:0,meta:{param:{text:"radix",kind:"parameterName"},desc:"<p>Converts a string to an integer.</p>\n"},id:3969}),
s[3970]=a({parent:s[1],name:"parseFloat",flags:16,mods:2,cat:0,meta:{param:{text:"string",kind:"parameterName"},desc:"<p>Converts a string to a floating-point number.</p>\n"},id:3970}),
s[3971]=a({parent:s[1],name:"isNaN",flags:16,mods:2,cat:0,meta:{param:{text:"number",kind:"parameterName"},desc:"<p>Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).</p>\n"},id:3971}),
s[3972]=a({parent:s[1],name:"isFinite",flags:16,mods:2,cat:0,meta:{param:{text:"number",kind:"parameterName"},desc:"<p>Determines whether a supplied number is finite.</p>\n"},id:3972}),
s[3973]=a({parent:s[1],name:"toString",flags:16,mods:2,cat:0,meta:{dom:true},id:3973}),
s[3974]=a({parent:s[1],name:"clearInterval",flags:16,mods:2,cat:0,meta:{dom:true},id:3974}),
s[3975]=a({parent:s[1],name:"clearTimeout",flags:16,mods:2,cat:0,meta:{dom:true},id:3975}),
s[3976]=a({parent:s[1],name:"setInterval",flags:16,mods:2,cat:0,meta:{dom:true},id:3976}),
s[3977]=a({parent:s[1],name:"setTimeout",flags:16,mods:2,cat:0,meta:{dom:true},id:3977}),
s[3978]=a({parent:s[1],name:"console",flags:1,mods:0,cat:0,meta:{dom:true},id:3978,valuetype:s[344]}),
s[3979]=a({parent:s[1],name:"document",flags:1,mods:524288,cat:0,meta:{dom:true},id:3979,valuetype:s[567]}),
s[3980]=a({parent:s[1],name:"window",flags:1,mods:0,cat:0,meta:{dom:true},id:3980}),
s[3981]=a({parent:s[1],name:"Array",flags:65,mods:0,cat:0,meta:{},id:3981}),
s[3982]=a({parent:s[3981],name:"length",flags:4,mods:0,cat:0,meta:{desc:"<p>Gets or sets the length of the array. This is a number one higher than the highest index in the array.</p>\n"},id:3982}),
s[3983]=a({parent:s[3981],name:"pop",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.</p>\n"},id:3983}),
s[3984]=a({parent:s[3981],name:"push",flags:8192,mods:0,cat:0,meta:{param:{text:"items",kind:"parameterName"},desc:"<p>Appends new elements to the end of an array, and returns the new length of the array.</p>\n"},id:3984}),
s[3985]=a({parent:s[3981],name:"concat",flags:8192,mods:0,cat:0,meta:{param:{text:"items",kind:"parameterName"},desc:"<p>Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.</p>\n"},id:3985}),
s[3986]=a({parent:s[3981],name:"join",flags:8192,mods:0,cat:0,meta:{param:{text:"separator",kind:"parameterName"},desc:"<p>Adds all the elements of an array into a string, separated by the specified separator string.</p>\n"},id:3986}),
s[3987]=a({parent:s[3981],name:"reverse",flags:8192,mods:0,cat:0,meta:{desc:"<p>Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.</p>\n"},id:3987}),
s[3988]=a({parent:s[3981],name:"shift",flags:8192,mods:0,cat:0,meta:{desc:"<p>Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.</p>\n"},id:3988}),
s[3989]=a({parent:s[3981],name:"slice",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.</p>\n"},id:3989}),
s[3990]=a({parent:s[3981],name:"sort",flags:8192,mods:0,cat:0,meta:{param:{text:"compareFn",kind:"parameterName"},desc:"<p>Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.</p>\n"},id:3990}),
s[3991]=a({parent:s[3981],name:"splice",flags:8192,mods:0,cat:0,meta:{param:{text:"items",kind:"parameterName"},returns:"An array containing the elements that were deleted.",desc:"<p>Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.</p>\n"},id:3991}),
s[3992]=a({parent:s[3981],name:"unshift",flags:8192,mods:0,cat:0,meta:{param:{text:"items",kind:"parameterName"},desc:"<p>Inserts new elements at the start of an array, and returns the new length of the array.</p>\n"},id:3992}),
s[3993]=a({parent:s[3981],name:"indexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the first occurrence of a value in an array, or -1 if it is not present.</p>\n"},id:3993}),
s[3994]=a({parent:s[3981],name:"lastIndexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.</p>\n"},id:3994}),
s[3995]=a({parent:s[3981],name:"every",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether all the members of an array satisfy the specified test.</p>\n"},id:3995}),
s[3996]=a({parent:s[3981],name:"some",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether the specified callback function returns true for any element of an array.</p>\n"},id:3996}),
s[3997]=a({parent:s[3981],name:"forEach",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Performs the specified action for each element in an array.</p>\n"},id:3997}),
s[3998]=a({parent:s[3981],name:"map",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Calls a defined callback function on each element of an array, and returns an array that contains the results.</p>\n"},id:3998}),
s[3999]=a({parent:s[3981],name:"filter",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the elements of an array that meet the condition specified in a callback function.</p>\n"},id:3999}),
s[4000]=a({parent:s[3981],name:"reduce",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.</p>\n"},id:4000}),
s[4001]=a({parent:s[3981],name:"reduceRight",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.</p>\n"},id:4001}),
s[4002]=a({parent:s[3981],name:"find",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the value of the first element in the array where predicate is true, and undefined\notherwise.</p>\n"},id:4002}),
s[4003]=a({parent:s[3981],name:"findIndex",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the index of the first element in the array where predicate is true, and -1\notherwise.</p>\n"},id:4003}),
s[4004]=a({parent:s[3981],name:"fill",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Changes all array elements from <code>start</code> to <code>end</code> index to a static <code>value</code> and returns the modified array</p>\n"},id:4004}),
s[4005]=a({parent:s[3981],name:"copyWithin",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target</p>\n"},id:4005}),
s[4006]=a({parent:s[3981],name:"entries",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of key, value pairs for every entry in the array</p>\n"},id:4006}),
s[4007]=a({parent:s[3981],name:"keys",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of keys in the array</p>\n"},id:4007}),
s[4008]=a({parent:s[3981],name:"values",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of values in the array</p>\n"},id:4008}),
s[4009]=a({parent:s[3981],name:"includes",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Determines whether an array includes a certain element, returning true or false as appropriate.</p>\n"},id:4009}),
s[4010]=a({parent:s[3981],name:"flatMap",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.</p>\n"},id:4010}),
s[4011]=a({parent:s[3981],name:"flat",flags:8192,mods:0,cat:0,meta:{param:{text:"depth",kind:"parameterName"},desc:"<p>Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.</p>\n"},id:4011}),
s[4012]=a({parent:s[1],name:"Set",flags:65,mods:0,cat:0,meta:{},id:4012}),
s[4013]=a({parent:s[4012],name:"add",flags:8192,mods:0,cat:0,meta:{},id:4013}),
s[4014]=a({parent:s[4012],name:"clear",flags:8192,mods:0,cat:0,meta:{},id:4014}),
s[4015]=a({parent:s[4012],name:"delete",flags:8192,mods:0,cat:0,meta:{},id:4015}),
s[4016]=a({parent:s[4012],name:"forEach",flags:8192,mods:0,cat:0,meta:{},id:4016}),
s[4017]=a({parent:s[4012],name:"has",flags:8192,mods:0,cat:0,meta:{},id:4017}),
s[4018]=a({parent:s[4012],name:"size",flags:4,mods:64,cat:0,meta:{},id:4018}),
s[4019]=a({parent:s[4012],name:"entries",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of [v,v] pairs for every value <code>v</code> in the set.</p>\n"},id:4019}),
s[4020]=a({parent:s[4012],name:"keys",flags:8192,mods:0,cat:0,meta:{desc:"<p>Despite its name, returns an iterable of the values in the set.</p>\n"},id:4020}),
s[4021]=a({parent:s[4012],name:"values",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of values in the set.</p>\n"},id:4021}),
s[4022]=a({parent:s[1],name:"Map",flags:65,mods:0,cat:0,meta:{},id:4022}),
s[4023]=a({parent:s[4022],name:"clear",flags:8192,mods:0,cat:0,meta:{},id:4023}),
s[4024]=a({parent:s[4022],name:"delete",flags:8192,mods:0,cat:0,meta:{},id:4024}),
s[4025]=a({parent:s[4022],name:"forEach",flags:8192,mods:0,cat:0,meta:{},id:4025}),
s[4026]=a({parent:s[4022],name:"get",flags:8192,mods:0,cat:0,meta:{},id:4026}),
s[4027]=a({parent:s[4022],name:"has",flags:8192,mods:0,cat:0,meta:{},id:4027}),
s[4028]=a({parent:s[4022],name:"set",flags:8192,mods:0,cat:0,meta:{},id:4028}),
s[4029]=a({parent:s[4022],name:"size",flags:4,mods:64,cat:0,meta:{},id:4029}),
s[4030]=a({parent:s[4022],name:"entries",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of key, value pairs for every entry in the map.</p>\n"},id:4030}),
s[4031]=a({parent:s[4022],name:"keys",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of keys in the map</p>\n"},id:4031}),
s[4032]=a({parent:s[4022],name:"values",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an iterable of values in the map</p>\n"},id:4032}),
s[4033]=a({parent:s[1],name:"WeakSet",flags:65,mods:0,cat:0,meta:{},id:4033}),
s[4034]=a({parent:s[4033],name:"add",flags:8192,mods:0,cat:0,meta:{},id:4034}),
s[4035]=a({parent:s[4033],name:"delete",flags:8192,mods:0,cat:0,meta:{},id:4035}),
s[4036]=a({parent:s[4033],name:"has",flags:8192,mods:0,cat:0,meta:{},id:4036}),
s[4037]=a({parent:s[1],name:"WeakMap",flags:65,mods:0,cat:0,meta:{},id:4037}),
s[4038]=a({parent:s[4037],name:"delete",flags:8192,mods:0,cat:0,meta:{},id:4038}),
s[4039]=a({parent:s[4037],name:"get",flags:8192,mods:0,cat:0,meta:{},id:4039}),
s[4040]=a({parent:s[4037],name:"has",flags:8192,mods:0,cat:0,meta:{},id:4040}),
s[4041]=a({parent:s[4037],name:"set",flags:8192,mods:0,cat:0,meta:{},id:4041}),
s[4042]=a({parent:s[1],name:"Uint8Array",flags:65,mods:0,cat:0,meta:{desc:"<p>A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.</p>\n"},id:4042}),
s[4043]=a({parent:s[4042],name:"BYTES_PER_ELEMENT",flags:4,mods:131136,cat:0,meta:{desc:"<p>The size in bytes of each element in the array.</p>\n"},id:4043}),
s[4044]=a({parent:s[4042],name:"buffer",flags:4,mods:64,cat:0,meta:{desc:"<p>The ArrayBuffer instance referenced by the array.</p>\n"},id:4044}),
s[4045]=a({parent:s[4042],name:"byteLength",flags:4,mods:64,cat:0,meta:{desc:"<p>The length in bytes of the array.</p>\n"},id:4045}),
s[4046]=a({parent:s[4042],name:"byteOffset",flags:4,mods:64,cat:0,meta:{desc:"<p>The offset in bytes of the array.</p>\n"},id:4046}),
s[4047]=a({parent:s[4042],name:"copyWithin",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target</p>\n"},id:4047}),
s[4048]=a({parent:s[4042],name:"every",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether all the members of an array satisfy the specified test.</p>\n"},id:4048}),
s[4049]=a({parent:s[4042],name:"fill",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Changes all array elements from <code>start</code> to <code>end</code> index to a static <code>value</code> and returns the modified array</p>\n"},id:4049}),
s[4050]=a({parent:s[4042],name:"filter",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the elements of an array that meet the condition specified in a callback function.</p>\n"},id:4050}),
s[4051]=a({parent:s[4042],name:"find",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the value of the first element in the array where predicate is true, and undefined\notherwise.</p>\n"},id:4051}),
s[4052]=a({parent:s[4042],name:"findIndex",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Returns the index of the first element in the array where predicate is true, and -1\notherwise.</p>\n"},id:4052}),
s[4053]=a({parent:s[4042],name:"forEach",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Performs the specified action for each element in an array.</p>\n"},id:4053}),
s[4054]=a({parent:s[4042],name:"indexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the first occurrence of a value in an array.</p>\n"},id:4054}),
s[4055]=a({parent:s[4042],name:"join",flags:8192,mods:0,cat:0,meta:{param:{text:"separator",kind:"parameterName"},desc:"<p>Adds all the elements of an array separated by the specified separator string.</p>\n"},id:4055}),
s[4056]=a({parent:s[4042],name:"lastIndexOf",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Returns the index of the last occurrence of a value in an array.</p>\n"},id:4056}),
s[4057]=a({parent:s[4042],name:"length",flags:4,mods:64,cat:0,meta:{desc:"<p>The length of the array.</p>\n"},id:4057}),
s[4058]=a({parent:s[4042],name:"map",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Calls a defined callback function on each element of an array, and returns an array that\ncontains the results.</p>\n"},id:4058}),
s[4059]=a({parent:s[4042],name:"reduce",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array. The return value of\nthe callback function is the accumulated result, and is provided as an argument in the next\ncall to the callback function.</p>\n"},id:4059}),
s[4060]=a({parent:s[4042],name:"reduceRight",flags:8192,mods:0,cat:0,meta:{param:{text:"initialValue",kind:"parameterName"},desc:"<p>Calls the specified callback function for all the elements in an array, in descending order.\nThe return value of the callback function is the accumulated result, and is provided as an\nargument in the next call to the callback function.</p>\n"},id:4060}),
s[4061]=a({parent:s[4042],name:"reverse",flags:8192,mods:0,cat:0,meta:{desc:"<p>Reverses the elements in an Array.</p>\n"},id:4061}),
s[4062]=a({parent:s[4042],name:"set",flags:8192,mods:0,cat:0,meta:{param:{text:"offset",kind:"parameterName"},desc:"<p>Sets a value or an array of values.</p>\n"},id:4062}),
s[4063]=a({parent:s[4042],name:"slice",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Returns a section of an array.</p>\n"},id:4063}),
s[4064]=a({parent:s[4042],name:"some",flags:8192,mods:0,cat:0,meta:{param:{text:"thisArg",kind:"parameterName"},desc:"<p>Determines whether the specified callback function returns true for any element of an array.</p>\n"},id:4064}),
s[4065]=a({parent:s[4042],name:"sort",flags:8192,mods:0,cat:0,meta:{param:{text:"compareFn",kind:"parameterName"},desc:"<p>Sorts an array.</p>\n"},id:4065}),
s[4066]=a({parent:s[4042],name:"subarray",flags:8192,mods:0,cat:0,meta:{param:{text:"end",kind:"parameterName"},desc:"<p>Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\nat begin, inclusive, up to end, exclusive.</p>\n"},id:4066}),
s[4067]=a({parent:s[4042],name:"entries",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an array of key, value pairs for every entry in the array</p>\n"},id:4067}),
s[4068]=a({parent:s[4042],name:"keys",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an list of keys in the array</p>\n"},id:4068}),
s[4069]=a({parent:s[4042],name:"values",flags:8192,mods:0,cat:0,meta:{desc:"<p>Returns an list of values in the array</p>\n"},id:4069}),
s[4070]=a({parent:s[4042],name:"includes",flags:8192,mods:0,cat:0,meta:{param:{text:"fromIndex",kind:"parameterName"},desc:"<p>Determines whether an array includes a certain element, returning true or false as appropriate.</p>\n"},id:4070})]}